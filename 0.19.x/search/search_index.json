{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"anno/","text":"\ud83d\udcd4 Annotations How to use? You should add an annotation to your Deployment / StatefulSet / Jobs / DaemonSet apiVersion : apps/v1 kind : Deployment metadata : name : api spec : ... template : metadata : annotations : helmwave.dev/show-service-messages : \"true\" Helmwave's annotations helmwave.dev/skip-diff Skip resource for helm diff function. This is very useful for secret or sensitive data. kubedog's \ud83d\udc36 Danger Kubedog currently in beta . inspired by werf annotations First step you need enable kubedog for helmwave. export HELMWAVE_KUBEDOG_ENABLED = true helmwave.dev/track-termination-mode Defines a condition when helmwave should stop tracking of the resource: WaitUntilResourceReady (default) \u2014 the entire deployment process would monitor and wait for the readiness of the resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all resources to be ready. NonBlocking \u2014 the resource is tracked only if there are other resources that are not yet ready. helmwave.dev/fail-mode Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process: FailWholeDeployProcessImmediately (default) \u2014 the entire deploy process will fail with an error if an error occurs for some resource. HopeUntilEndOfDeployProcess \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again. IgnoreAndContinueDeployProcess \u2014 resource errors do not affect the deployment process. helmwave.dev/failures-allowed-per-replica By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode. NUMBER helmwave.dev/log-regex Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX helmwave.dev/log-regex-for-{container} Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX helmwave.dev/skip-logs Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. \"true\"|\"false\" helmwave.dev/skip-logs-for-containers Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator helmwave.dev/show-logs-only-for-containers Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator helmwave.dev/show-service-messages Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process. \"true\"|\"false\"","title":"\ud83d\udcd4 Annotations"},{"location":"anno/#annotations","text":"","title":"\ud83d\udcd4 Annotations"},{"location":"anno/#how-to-use","text":"You should add an annotation to your Deployment / StatefulSet / Jobs / DaemonSet apiVersion : apps/v1 kind : Deployment metadata : name : api spec : ... template : metadata : annotations : helmwave.dev/show-service-messages : \"true\"","title":"How to use?"},{"location":"anno/#helmwaves-annotations","text":"","title":"Helmwave's annotations"},{"location":"anno/#helmwavedevskip-diff","text":"Skip resource for helm diff function. This is very useful for secret or sensitive data.","title":"helmwave.dev/skip-diff"},{"location":"anno/#kubedogs","text":"Danger Kubedog currently in beta . inspired by werf annotations First step you need enable kubedog for helmwave. export HELMWAVE_KUBEDOG_ENABLED = true","title":"kubedog's \ud83d\udc36"},{"location":"anno/#helmwavedevtrack-termination-mode","text":"Defines a condition when helmwave should stop tracking of the resource: WaitUntilResourceReady (default) \u2014 the entire deployment process would monitor and wait for the readiness of the resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all resources to be ready. NonBlocking \u2014 the resource is tracked only if there are other resources that are not yet ready.","title":"helmwave.dev/track-termination-mode"},{"location":"anno/#helmwavedevfail-mode","text":"Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process: FailWholeDeployProcessImmediately (default) \u2014 the entire deploy process will fail with an error if an error occurs for some resource. HopeUntilEndOfDeployProcess \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again. IgnoreAndContinueDeployProcess \u2014 resource errors do not affect the deployment process.","title":"helmwave.dev/fail-mode"},{"location":"anno/#helmwavedevfailures-allowed-per-replica","text":"By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode. NUMBER","title":"helmwave.dev/failures-allowed-per-replica"},{"location":"anno/#helmwavedevlog-regex","text":"Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX","title":"helmwave.dev/log-regex"},{"location":"anno/#helmwavedevlog-regex-for-container","text":"Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX","title":"helmwave.dev/log-regex-for-{container}"},{"location":"anno/#helmwavedevskip-logs","text":"Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. \"true\"|\"false\"","title":"helmwave.dev/skip-logs"},{"location":"anno/#helmwavedevskip-logs-for-containers","text":"Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator","title":"helmwave.dev/skip-logs-for-containers"},{"location":"anno/#helmwavedevshow-logs-only-for-containers","text":"Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator","title":"helmwave.dev/show-logs-only-for-containers"},{"location":"anno/#helmwavedevshow-service-messages","text":"Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process. \"true\"|\"false\"","title":"helmwave.dev/show-service-messages"},{"location":"ci/","text":"\ud83e\uddcb Continuous Integration Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind. Let's see how we can get it working on popular CI software. GitHub action official github action name : Deploy on : push : jobs : external : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : helmwave/setup-action@v0.2.0 name : Install helmwave with : version : '0.17.2' - name : templating helmwave.yml.tpl run : helmwave yml - name : plan run : helmwave build - name : deploy run : helmwave up Gitlab-CI variables : HELMWAVE_LOG_LEVEL : debug helmwave : stage : deploy environment : name : \"ref/$CI_COMMIT_REF_SLUG\" image : name : diamon/helmwave:0.19.0 entrypoint : [ \"\" ] before_script : - printenv | grep HELMWAVE script : - helmwave yml # if it needs - helmwave build - helmwave up artifacts : paths : - .helmwave expire_in : 2 week See example Kube-Linter and Helmwave stages : - build - lint - deploy variables : HELMWAVE_PLAN : $CI_PROJECT_DIR/.helmwave .helmwave : &helmwave before_script : - printenv | grep HELMWAVE - ls -la $HELMWAVE_PLAN || true after_script : - ls -la $HELMWAVE_PLAN image : name : ghcr.io/helmwave/helmwave:0.19.0 entrypoint : [ '' ] ############### BUILD ################ plan : stage : build extends : .helmwave artifacts : paths : - .helmwave expire_in : 1 week script : - '[[ -f \"helmwave.yml.tpl\" ]] && helmwave yml' - cat helmwave.yml - helmwave build ############### Deploy ################ up : stage : deploy extends : .helmwave when : manual script : - helmwave up ############### LINT ################ kube-linter : stage : lint image : name : stackrox/kube-linter:0.2.5-alpine entrypoint : [ '' ] script : - /kube-linter lint $HELMWAVE_PLAN kubeval : stage : lint image : name : garethr/kubeval entrypoint : [ '' ] script : - kubeval --force-color $HELMWAVE_PLAN/manifest/*.yml pluto : image : name : quay.io/fairwinds/pluto:v5.1 entrypoint : [ '' ] script : - /pluto detect-files -d $HELMWAVE_PLAN","title":"\ud83e\uddcb Continuous Integration"},{"location":"ci/#continuous-integration","text":"Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind. Let's see how we can get it working on popular CI software.","title":"\ud83e\uddcb Continuous Integration"},{"location":"ci/#github-action","text":"official github action name : Deploy on : push : jobs : external : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : helmwave/setup-action@v0.2.0 name : Install helmwave with : version : '0.17.2' - name : templating helmwave.yml.tpl run : helmwave yml - name : plan run : helmwave build - name : deploy run : helmwave up","title":" GitHub action"},{"location":"ci/#gitlab-ci","text":"variables : HELMWAVE_LOG_LEVEL : debug helmwave : stage : deploy environment : name : \"ref/$CI_COMMIT_REF_SLUG\" image : name : diamon/helmwave:0.19.0 entrypoint : [ \"\" ] before_script : - printenv | grep HELMWAVE script : - helmwave yml # if it needs - helmwave build - helmwave up artifacts : paths : - .helmwave expire_in : 2 week See example","title":" Gitlab-CI"},{"location":"ci/#kube-linter-and-helmwave","text":"stages : - build - lint - deploy variables : HELMWAVE_PLAN : $CI_PROJECT_DIR/.helmwave .helmwave : &helmwave before_script : - printenv | grep HELMWAVE - ls -la $HELMWAVE_PLAN || true after_script : - ls -la $HELMWAVE_PLAN image : name : ghcr.io/helmwave/helmwave:0.19.0 entrypoint : [ '' ] ############### BUILD ################ plan : stage : build extends : .helmwave artifacts : paths : - .helmwave expire_in : 1 week script : - '[[ -f \"helmwave.yml.tpl\" ]] && helmwave yml' - cat helmwave.yml - helmwave build ############### Deploy ################ up : stage : deploy extends : .helmwave when : manual script : - helmwave up ############### LINT ################ kube-linter : stage : lint image : name : stackrox/kube-linter:0.2.5-alpine entrypoint : [ '' ] script : - /kube-linter lint $HELMWAVE_PLAN kubeval : stage : lint image : name : garethr/kubeval entrypoint : [ '' ] script : - kubeval --force-color $HELMWAVE_PLAN/manifest/*.yml pluto : image : name : quay.io/fairwinds/pluto:v5.1 entrypoint : [ '' ] script : - /pluto detect-files -d $HELMWAVE_PLAN","title":"Kube-Linter and Helmwave"},{"location":"cli/","text":"\ud83d\udee0 CLI Reference NAME: helmwave - is like docker-compose for helm USAGE: helmwave [global options] command [command options] [arguments...] VERSION: 0.19.0 DESCRIPTION: This tool helps you compose your helm releases! 0. $ helmwave yml 1. $ helmwave build 2. $ helmwave up COMMANDS: build \ud83c\udfd7 Build a plan diff, vs \ud83c\udd9a Show Differences up \ud83d\udea2 Apply your plan list, ls \ud83d\udc40 List of deployed releases rollback \u23ee Rollback your plan status \ud83d\udc41\ufe0f Status of deployed releases down \ud83d\udd2a Delete all validate \ud83d\udec2 Validate your plan yml \ud83d\udcc4 Render helmwave.yml.tpl -> helmwave.yml version, ver Show shorts version completion Generate completion script help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --log-format value You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT] --log-level value You can set: [ debug | info | warn | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL] --log-color Force color (default: true) [$HELMWAVE_LOG_COLOR] --kubedog-log-width value Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH] --log-timestamps Add timestamps to log messages (default: false) [$HELMWAVE_LOG_TIMESTAMPS] --help, -h show help (default: false) --version, -v print the version (default: false) step #0: yml It allows render helmwave.yml.tpl to helmwave.yml Options --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML] --templater value Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE] step #1: build This command generates .helmwave/ --plandir value, -p value Path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN] --tags value, -t value It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS] --match-all-tags Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS] --diff-mode value You can set: [ live | local ] (default: \"live\") [$HELMWAVE_DIFF_MODE] --yml Auto helmwave.yml.tpl --> helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML] --wide value Show line around change (default: 5) [$HELMWAVE_DIFF_WIDE] --show-secret Show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET] --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML] --templater value Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE] step #2: Working with plan up Helmwave will install repositories and helm-releases from plan. --build auto build (default: false) [$HELMWAVE_AUTO_BUILD] --kubedog Enable/Disable kubedog (default: false) [$HELMWAVE_KUBEDOG_ENABLED, $HELMWAVE_KUBEDOG] --kubedog-status-interval value Interval of kubedog status messages (default: 5s) [$HELMWAVE_KUBEDOG_STATUS_INTERVAL] --kubedog-start-delay value Delay kubedog start, don't make it too late (default: 1s) [$HELMWAVE_KUBEDOG_START_DELAY] --kubedog-timeout value Timeout of kubedog multitrackers (default: 5m0s) [$HELMWAVE_KUBEDOG_TIMEOUT] --progress Enable progress logs of helm (INFO log level) (default: false) [$HELMWAVE_PROGRESS] --plandir value, -p value Path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN] --tags value, -t value It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS] --match-all-tags Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS] --diff-mode value You can set: [ live | local ] (default: \"live\") [$HELMWAVE_DIFF_MODE] --yml Auto helmwave.yml.tpl --> helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML] --wide value Show line around change (default: 5) [$HELMWAVE_DIFF_WIDE] --show-secret Show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET] --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML] --templater value Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE] down Helmwave will uninstall helm-releases from plan. $ helmwave down [ \ud83d\ude43 aka INFO ] : \u2705 frontend@test uninstalled! [ \ud83d\ude43 aka INFO ] : \u2705 database@test uninstalled! [ \ud83d\ude43 aka INFO ] : \u2705 backend@test uninstalled! ls Helmwave try getting list of helm-releases from plan. $ helmwave ls [ \ud83d\ude43 aka INFO ] : Should be 3 releases NAME | NAMESPACE | REVISION | UPDATED | STATUS | CHART | VERSION -----------+-----------+----------+--------------------------------+----------+-------+---------- frontend | test | 1 | 2021 -11-10 04 :41:23.330989 | deployed | this | 0 .1.0 | | | +0300 MSK | | | database | test | 1 | 2021 -11-10 04 :41:23.353473 | deployed | this | 0 .1.0 | | | +0300 MSK | | | backend | test | 1 | 2021 -11-10 04 :41:23.270076 | deployed | this | 0 .1.0 | | | +0300 MSK | | | status Helmwave try getting status of helm-releases from plan. $ helmwave status [ \ud83d\ude43 aka INFO ] : Status of frontend@test status: deployed revision: 1 name: frontend namespace: test chart: frontend-0.1.0 last deployed: 2021 -11-10 04 :41:23.330989 +0300 MSK [ \ud83d\ude43 aka INFO ] : Status of database@test status: deployed revision: 1 name: database namespace: test chart: database-0.1.0 last deployed: 2021 -11-10 04 :41:23.353473 +0300 MSK [ \ud83d\ude43 aka INFO ] : Status of backend@test name: backend namespace: test chart: backend-0.1.0 last deployed: 2021 -11-10 04 :41:23.270076 +0300 MSK status: deployed revision: 1 rollback Helmwave will rollback helm-releases from plan. $ helmwave down [ \ud83d\ude43 aka INFO ] : \u2705 frontend@test rollback! [ \ud83d\ude43 aka INFO ] : \u2705 database@test rollback! [ \ud83d\ude43 aka INFO ] : \u2705 backend@test rollback! validate Helmwave will validate plan. diff Diff has 2 subcommands helmwave diff live will diff with manifests in the k8s-cluster helmwave diff plan will diff with your another local plan. Logs Logs options. Helmwave use logrus as internal logger. Log Format Helmwave supports several log-format features text json pad emoji (default) Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave Log Level _ info (default) warn debug fatal panic trace general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests, bug report \u274c \u274c \u274c \u274c \u274c \u2705 info is prefer. How to use? helmwave <cmd> --log-color = true --log-level = debug --log-format = pad or export HELMWAVE_LOG_FORMAT = pad export HELMWAVE_LOG_LEVEL = debug export HELMWAVE_LOG_COLOR = true helmwave <cmd> Get Version Long version $ helmwave --version helmwave version 0 .19.0 $ helmwave -v helmwave version 0 .19.0 Short version $ helmwave version 0 .19.0 $ helmwave ver 0 .19.0 Completion Bash Add this code to your ~/.bashrc source < ( helmwave completion bash ) echo \"source <(helmwave completion bash)\" >> ~/.bashrc ZSH Add this code to your ~/.zshrc source < ( helmwave completion zsh ) echo \"source <(helmwave completion zsh)\" >> ~/.zshrc","title":"\ud83d\udee0 CLI Reference"},{"location":"cli/#cli-reference","text":"NAME: helmwave - is like docker-compose for helm USAGE: helmwave [global options] command [command options] [arguments...] VERSION: 0.19.0 DESCRIPTION: This tool helps you compose your helm releases! 0. $ helmwave yml 1. $ helmwave build 2. $ helmwave up COMMANDS: build \ud83c\udfd7 Build a plan diff, vs \ud83c\udd9a Show Differences up \ud83d\udea2 Apply your plan list, ls \ud83d\udc40 List of deployed releases rollback \u23ee Rollback your plan status \ud83d\udc41\ufe0f Status of deployed releases down \ud83d\udd2a Delete all validate \ud83d\udec2 Validate your plan yml \ud83d\udcc4 Render helmwave.yml.tpl -> helmwave.yml version, ver Show shorts version completion Generate completion script help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --log-format value You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT] --log-level value You can set: [ debug | info | warn | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL] --log-color Force color (default: true) [$HELMWAVE_LOG_COLOR] --kubedog-log-width value Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH] --log-timestamps Add timestamps to log messages (default: false) [$HELMWAVE_LOG_TIMESTAMPS] --help, -h show help (default: false) --version, -v print the version (default: false)","title":"\ud83d\udee0 CLI Reference"},{"location":"cli/#step-0-yml","text":"It allows render helmwave.yml.tpl to helmwave.yml Options --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML] --templater value Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]","title":"step #0: yml"},{"location":"cli/#step-1-build","text":"This command generates .helmwave/ --plandir value, -p value Path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN] --tags value, -t value It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS] --match-all-tags Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS] --diff-mode value You can set: [ live | local ] (default: \"live\") [$HELMWAVE_DIFF_MODE] --yml Auto helmwave.yml.tpl --> helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML] --wide value Show line around change (default: 5) [$HELMWAVE_DIFF_WIDE] --show-secret Show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET] --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML] --templater value Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]","title":"step #1: build"},{"location":"cli/#step-2-working-with-plan","text":"","title":"step #2: Working with plan"},{"location":"cli/#up","text":"Helmwave will install repositories and helm-releases from plan. --build auto build (default: false) [$HELMWAVE_AUTO_BUILD] --kubedog Enable/Disable kubedog (default: false) [$HELMWAVE_KUBEDOG_ENABLED, $HELMWAVE_KUBEDOG] --kubedog-status-interval value Interval of kubedog status messages (default: 5s) [$HELMWAVE_KUBEDOG_STATUS_INTERVAL] --kubedog-start-delay value Delay kubedog start, don't make it too late (default: 1s) [$HELMWAVE_KUBEDOG_START_DELAY] --kubedog-timeout value Timeout of kubedog multitrackers (default: 5m0s) [$HELMWAVE_KUBEDOG_TIMEOUT] --progress Enable progress logs of helm (INFO log level) (default: false) [$HELMWAVE_PROGRESS] --plandir value, -p value Path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN] --tags value, -t value It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS] --match-all-tags Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS] --diff-mode value You can set: [ live | local ] (default: \"live\") [$HELMWAVE_DIFF_MODE] --yml Auto helmwave.yml.tpl --> helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML] --wide value Show line around change (default: 5) [$HELMWAVE_DIFF_WIDE] --show-secret Show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET] --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML] --templater value Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]","title":"up"},{"location":"cli/#down","text":"Helmwave will uninstall helm-releases from plan. $ helmwave down [ \ud83d\ude43 aka INFO ] : \u2705 frontend@test uninstalled! [ \ud83d\ude43 aka INFO ] : \u2705 database@test uninstalled! [ \ud83d\ude43 aka INFO ] : \u2705 backend@test uninstalled!","title":"down"},{"location":"cli/#ls","text":"Helmwave try getting list of helm-releases from plan. $ helmwave ls [ \ud83d\ude43 aka INFO ] : Should be 3 releases NAME | NAMESPACE | REVISION | UPDATED | STATUS | CHART | VERSION -----------+-----------+----------+--------------------------------+----------+-------+---------- frontend | test | 1 | 2021 -11-10 04 :41:23.330989 | deployed | this | 0 .1.0 | | | +0300 MSK | | | database | test | 1 | 2021 -11-10 04 :41:23.353473 | deployed | this | 0 .1.0 | | | +0300 MSK | | | backend | test | 1 | 2021 -11-10 04 :41:23.270076 | deployed | this | 0 .1.0 | | | +0300 MSK | | |","title":"ls"},{"location":"cli/#status","text":"Helmwave try getting status of helm-releases from plan. $ helmwave status [ \ud83d\ude43 aka INFO ] : Status of frontend@test status: deployed revision: 1 name: frontend namespace: test chart: frontend-0.1.0 last deployed: 2021 -11-10 04 :41:23.330989 +0300 MSK [ \ud83d\ude43 aka INFO ] : Status of database@test status: deployed revision: 1 name: database namespace: test chart: database-0.1.0 last deployed: 2021 -11-10 04 :41:23.353473 +0300 MSK [ \ud83d\ude43 aka INFO ] : Status of backend@test name: backend namespace: test chart: backend-0.1.0 last deployed: 2021 -11-10 04 :41:23.270076 +0300 MSK status: deployed revision: 1","title":"status"},{"location":"cli/#rollback","text":"Helmwave will rollback helm-releases from plan. $ helmwave down [ \ud83d\ude43 aka INFO ] : \u2705 frontend@test rollback! [ \ud83d\ude43 aka INFO ] : \u2705 database@test rollback! [ \ud83d\ude43 aka INFO ] : \u2705 backend@test rollback!","title":"rollback"},{"location":"cli/#validate","text":"Helmwave will validate plan.","title":"validate"},{"location":"cli/#diff","text":"Diff has 2 subcommands helmwave diff live will diff with manifests in the k8s-cluster helmwave diff plan will diff with your another local plan.","title":"diff"},{"location":"cli/#logs","text":"Logs options. Helmwave use logrus as internal logger.","title":"Logs"},{"location":"cli/#log-format","text":"Helmwave supports several log-format features text json pad emoji (default) Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave","title":"Log Format"},{"location":"cli/#log-level","text":"_ info (default) warn debug fatal panic trace general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests, bug report \u274c \u274c \u274c \u274c \u274c \u2705 info is prefer.","title":"Log Level"},{"location":"cli/#how-to-use","text":"helmwave <cmd> --log-color = true --log-level = debug --log-format = pad or export HELMWAVE_LOG_FORMAT = pad export HELMWAVE_LOG_LEVEL = debug export HELMWAVE_LOG_COLOR = true helmwave <cmd>","title":"How to use?"},{"location":"cli/#get-version","text":"","title":"Get Version"},{"location":"cli/#long-version","text":"$ helmwave --version helmwave version 0 .19.0 $ helmwave -v helmwave version 0 .19.0","title":"Long version"},{"location":"cli/#short-version","text":"$ helmwave version 0 .19.0 $ helmwave ver 0 .19.0","title":"Short version"},{"location":"cli/#completion","text":"","title":"Completion"},{"location":"cli/#bash","text":"Add this code to your ~/.bashrc source < ( helmwave completion bash ) echo \"source <(helmwave completion bash)\" >> ~/.bashrc","title":"Bash"},{"location":"cli/#zsh","text":"Add this code to your ~/.zshrc source < ( helmwave completion zsh ) echo \"source <(helmwave completion zsh)\" >> ~/.zshrc","title":"ZSH"},{"location":"install/","text":"\ud83d\udce5 Installation You can install the pre-compiled binary from releases , packages , use Docker or compile from the source. Here are the steps for each of them: \ud83c\udf4f Mac OS Download one of releases Install with brew brew install helmwave/tap/helmwave or use wget export VERSION = 0 .19.0 wget -c https://github.com/helmwave/helmwave/releases/download/v $VERSION /helmwave_ ${ VERSION } _darwin_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/ \ud83d\udc27 Linux Download one of releases export VERSION = 0 .19.0 wget -c https://github.com/helmwave/helmwave/releases/download/v $VERSION /helmwave_ ${ VERSION } _linux_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/ \ud83e\ude9f Windows We haven't tried running this on Windows. Download one of releases Run as a container We use 2 docker registries. Registry URL project page Docker hub https://hub.docker.com view Github Container registry https://ghcr.io view docker pull diamon/helmwave docker pull ghcr.io/helmwave/helmwave Use specific version docker pull diamon/helmwave:0.19.0 docker pull ghcr.io/helmwave/helmwave:0.19.0 docker run --entrypoint = ash -it --rm --name helmwave ghcr.io/helmwave/helmwave:0.19.0 # helmwave version 0 .19.0 # Use scratch image scratch image run with nobody user . docker pull diamon/helmwave:scratch docker pull ghcr.io/helmwave/helmwave:scratch docker run ghcr.io/helmwave/helmwave:0.16.2-scratch version 0 .16.2 Use scratch image with specific helmwave version docker pull diamon/helmwave:0.19.0-scratch docker pull ghcr.io/helmwave/helmwave:0.19.0-scratch Install with go get export VERSION = 0 .19.0 GO111MODULE = on go get github.com/helmwave/helmwave/cmd/helmwave@ $VERSION Compile from source git clone git@github.com:helmwave/helmwave.git cd helmwave go build ./cmd/helmwave mv -f helmwave /usr/local/bin/ Install with marcosnils/bin bin install github.com/helmwave/helmwave","title":"\ud83d\udce5 Installation"},{"location":"install/#installation","text":"You can install the pre-compiled binary from releases , packages , use Docker or compile from the source. Here are the steps for each of them:","title":"\ud83d\udce5 Installation"},{"location":"install/#mac-os","text":"Download one of releases Install with brew brew install helmwave/tap/helmwave or use wget export VERSION = 0 .19.0 wget -c https://github.com/helmwave/helmwave/releases/download/v $VERSION /helmwave_ ${ VERSION } _darwin_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/","title":"\ud83c\udf4f Mac OS"},{"location":"install/#linux","text":"Download one of releases export VERSION = 0 .19.0 wget -c https://github.com/helmwave/helmwave/releases/download/v $VERSION /helmwave_ ${ VERSION } _linux_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/","title":"\ud83d\udc27 Linux"},{"location":"install/#windows","text":"We haven't tried running this on Windows. Download one of releases","title":"\ud83e\ude9f Windows"},{"location":"install/#run-as-a-container","text":"We use 2 docker registries. Registry URL project page Docker hub https://hub.docker.com view Github Container registry https://ghcr.io view docker pull diamon/helmwave docker pull ghcr.io/helmwave/helmwave Use specific version docker pull diamon/helmwave:0.19.0 docker pull ghcr.io/helmwave/helmwave:0.19.0 docker run --entrypoint = ash -it --rm --name helmwave ghcr.io/helmwave/helmwave:0.19.0 # helmwave version 0 .19.0 # Use scratch image scratch image run with nobody user . docker pull diamon/helmwave:scratch docker pull ghcr.io/helmwave/helmwave:scratch docker run ghcr.io/helmwave/helmwave:0.16.2-scratch version 0 .16.2 Use scratch image with specific helmwave version docker pull diamon/helmwave:0.19.0-scratch docker pull ghcr.io/helmwave/helmwave:0.19.0-scratch","title":" Run as a container"},{"location":"install/#install-with-go-get","text":"export VERSION = 0 .19.0 GO111MODULE = on go get github.com/helmwave/helmwave/cmd/helmwave@ $VERSION","title":"Install with go get"},{"location":"install/#compile-from-source","text":"git clone git@github.com:helmwave/helmwave.git cd helmwave go build ./cmd/helmwave mv -f helmwave /usr/local/bin/","title":" Compile from source"},{"location":"install/#install-with-marcosnilsbin","text":"bin install github.com/helmwave/helmwave","title":"Install with marcosnils/bin"},{"location":"intro/","text":"\ud83c\udf0a Helmwave is helm3 -native tool for deploy your Helm Charts via GitOps . HelmWave is like docker-compose for helm. \ud83d\ude80 Features We focus on speed execution, tiny size, pretty debugging. With helmwave you will become a superhero: Deploy multiple environments by one step Separate values for environments Common values for apps Keep a directory of chart value files Maintain changes in version control Template values Step by Step deployment ( depends_on , allow_failure ) Live tracking kubernetes resources with kubedog Fetch data from external datasource like vault, aws ssm ... and much more! Comparison to alternatives \ud83c\udf0a HelmWave Helmfile Helmsman Syntax YAML + sprig / gomplate YAML + sprig TOML/YAML Requirements No kubectl , helm helm-diff (optional: helm-secrets , helm-s3 , helm-git ) kubectl , helm helm-diff Helm execution function call of bundled helm os.Exec os.Exec Remote values Yes Yes No Parallel releases Yes Yes No Releases dependencies Yes (depends_on) Yes (needs) Kind of (priority) Latest docker image size Linux amd64 binary size + requirements + requirements Live-tracking kubernetes resources Kubedog No No Compatible with helm v2 no Yes Yes Graph dependencies yes No No \ud83c\udf0a Helmwave is inspired by docker-compose, terraform and helmfile, Here I would like to express our gratitude to all contributors for their commits, authors of third-party dependencies and all open source community \u2764\ufe0f","title":"Intro"},{"location":"intro/#features","text":"We focus on speed execution, tiny size, pretty debugging. With helmwave you will become a superhero: Deploy multiple environments by one step Separate values for environments Common values for apps Keep a directory of chart value files Maintain changes in version control Template values Step by Step deployment ( depends_on , allow_failure ) Live tracking kubernetes resources with kubedog Fetch data from external datasource like vault, aws ssm ... and much more!","title":"\ud83d\ude80 Features"},{"location":"intro/#comparison-to-alternatives","text":"\ud83c\udf0a HelmWave Helmfile Helmsman Syntax YAML + sprig / gomplate YAML + sprig TOML/YAML Requirements No kubectl , helm helm-diff (optional: helm-secrets , helm-s3 , helm-git ) kubectl , helm helm-diff Helm execution function call of bundled helm os.Exec os.Exec Remote values Yes Yes No Parallel releases Yes Yes No Releases dependencies Yes (depends_on) Yes (needs) Kind of (priority) Latest docker image size Linux amd64 binary size + requirements + requirements Live-tracking kubernetes resources Kubedog No No Compatible with helm v2 no Yes Yes Graph dependencies yes No No \ud83c\udf0a Helmwave is inspired by docker-compose, terraform and helmfile, Here I would like to express our gratitude to all contributors for their commits, authors of third-party dependencies and all open source community \u2764\ufe0f","title":"Comparison to alternatives"},{"location":"pub/","text":"Publications Part 3. Deployment. coming soon... 14.02.2022. HelmWave v0.19.0 https://habr.com/ru/post/650963/ HelmWave v0.12.8 https://habr.com/ru/post/575646/ SberDevConf / SmartDev \u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u043e\u0434\u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438: \u043e\u0442 CI/CD \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u044b\u0445 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0434\u043e \u0432\u0441\u0435\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0432 \u043e\u0431\u043b\u0430\u043a\u0435. \u0417\u0430\u0447\u0435\u043c \u0438 \u043a\u0430\u043a \u043c\u044b \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u043e\u043e\u0431\u0449\u0435 \u0432\u0441\u0451 \u0438 \u043f\u0440\u0438 \u0447\u0451\u043c \u0437\u0434\u0435\u0441\u044c \u0431\u043e\u0442\u044b? \u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f open-source-\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f helm-\u0440\u0435\u043b\u0438\u0437\u043e\u0432 \u2014 helmwave HelmWave v0.5.0 https://habr.com/ru/post/532596/","title":"Publications"},{"location":"pub/#publications","text":"","title":"Publications"},{"location":"pub/#part-3-deployment","text":"coming soon... 14.02.2022.","title":"Part 3. Deployment."},{"location":"pub/#helmwave-v0190","text":"https://habr.com/ru/post/650963/","title":"HelmWave v0.19.0"},{"location":"pub/#helmwave-v0128","text":"https://habr.com/ru/post/575646/","title":"HelmWave v0.12.8"},{"location":"pub/#sberdevconf-smartdev","text":"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u043e\u0434\u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438: \u043e\u0442 CI/CD \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u044b\u0445 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0434\u043e \u0432\u0441\u0435\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0432 \u043e\u0431\u043b\u0430\u043a\u0435. \u0417\u0430\u0447\u0435\u043c \u0438 \u043a\u0430\u043a \u043c\u044b \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u043e\u043e\u0431\u0449\u0435 \u0432\u0441\u0451 \u0438 \u043f\u0440\u0438 \u0447\u0451\u043c \u0437\u0434\u0435\u0441\u044c \u0431\u043e\u0442\u044b? \u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f open-source-\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f helm-\u0440\u0435\u043b\u0438\u0437\u043e\u0432 \u2014 helmwave","title":"SberDevConf / SmartDev"},{"location":"pub/#helmwave-v050","text":"https://habr.com/ru/post/532596/","title":"HelmWave v0.5.0"},{"location":"tpl/","text":"\ud83d\udcc4 Templating Helmwave uses Go templates for templating. Helmwave supports all built-in functions / sprig / gomplate / custom. Since v0.17.0. You can chose template engine with next flag: --templater value Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE] Sprig If you've ever written helm charts, then you're already familiar with it. http://masterminds.github.io/sprig/ Gomplate gomplate is a template renderer which supports a growing list of datasources, such as: JSON (including EJSON - encrypted JSON), YAML, AWS EC2 metadata, BoltDB, Hashicorp Consul and Hashicorp Vault secrets. Custom toYaml marshals a map into a string fromYaml reads a golang string and generates a map readFile get file as string hasKey get true if field is exists get (Sprig's original get is available as sprigGet ) setValueAtPath PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE requiredEnv The requiredEnv function allows you to declare a particular environment variable as required for template rendering. If the environment variable is unset or empty, the template rendering will fail with an error message.","title":"\ud83d\udcc4 Templating"},{"location":"tpl/#templating","text":"Helmwave uses Go templates for templating. Helmwave supports all built-in functions / sprig / gomplate / custom. Since v0.17.0. You can chose template engine with next flag: --templater value Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]","title":"\ud83d\udcc4 Templating"},{"location":"tpl/#sprig","text":"If you've ever written helm charts, then you're already familiar with it. http://masterminds.github.io/sprig/","title":"Sprig"},{"location":"tpl/#gomplate","text":"gomplate is a template renderer which supports a growing list of datasources, such as: JSON (including EJSON - encrypted JSON), YAML, AWS EC2 metadata, BoltDB, Hashicorp Consul and Hashicorp Vault secrets.","title":"Gomplate"},{"location":"tpl/#custom","text":"toYaml marshals a map into a string fromYaml reads a golang string and generates a map readFile get file as string hasKey get true if field is exists get (Sprig's original get is available as sprigGet ) setValueAtPath PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE requiredEnv The requiredEnv function allows you to declare a particular environment variable as required for template rendering. If the environment variable is unset or empty, the template rendering will fail with an error message.","title":"Custom"},{"location":"yaml/","text":"Yaml works on helm v3.8.1 Sample: <WIP> Project Reserved for future. Version Helmwave will check current version and project version. In the future it is planned to be used for major compatibility. Repositories[] field required type default name \u2705 string \"\" url \u2705 url \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" certfile \ud83d\ude45 string \"\" keyfile \ud83d\ude45 string \"\" cafile \ud83d\ude45 string \"\" insecureskiptlsverify \ud83d\ude45 bool false force \ud83d\ude45 bool false name Local name alias url URL for chart repository force Don't skip if repository exists. Releases[] field required type default helmwave build helmwave up name \u2705 string \"\" \u2705 \u2705 namespace \u2705 string \"\" \u2705 \u2705 chart.name \u2705 string \"\" \u2705 \u2705 chart.username \ud83d\ude45 string \"\" chart.password \ud83d\ude45 string \"\" chart.certfile \ud83d\ude45 string \"\" chart.keyfile \ud83d\ude45 string \"\" chart.cafile \ud83d\ude45 string \"\" chart.insecureskiptlsverify \ud83d\ude45 bool false description \ud83d\ude45 string \"\" depends_on \ud83d\ude45 array [] \u2705 allow_failure \ud83d\ude45 bool false \u2705 values \ud83d\ude45 array [] \u2705 \u2705 tags \ud83d\ude45 array [] \u2705 store \ud83d\ude45 object {} \u2705 timeout \ud83d\ude45 interval 0s \u2705 maxhistory \ud83d\ude45 int 0 \u2705 createnamespace \ud83d\ude45 bool false \u2705 resetvalues \ud83d\ude45 bool false \u2705 recreate \ud83d\ude45 bool false \u2705 force \ud83d\ude45 bool false \u2705 atomic \ud83d\ude45 bool false \u2705 cleanuponfail \ud83d\ude45 bool false \u2705 subnotes \ud83d\ude45 bool false \u2705 disablehooks \ud83d\ude45 bool false \u2705 disableopenapivalidation \ud83d\ude45 bool false \u2705 waitforjobs \ud83d\ude45 bool false \u2705 wait \ud83d\ude45 bool false \u2705 skipcrds \ud83d\ude45 bool false \u2705 devel \ud83d\ude45 bool false \u2705 reusevalues \ud83d\ude45 bool false \u2705 \ud83d\uddf3\ufe0f Store It allows to pass you custom fields from helmwave.yml to values. It works when you call $ helmwave build example \ud83d\udd16 Tags It allows you to choose releases for build It works with next options when you call $ helmwave build : --tags value, -t value It allows you choose releases for build. Example: -t tag1 -t tag3,tag4 [ $HELMWAVE_TAGS ] --match-all-tags Match all provided tags ( default: false ) [ $HELMWAVE_MATCH_ALL_TAGS ] Matching with tags Suppose we have next helmwave.yml with 4 releases. redis-a redis-b memcached-a memcached-b repositories : - name : bitnami url : https://charts.bitnami.com/bitnami releases : - name : redis-a namespace : test chart : name : bitnami/redis tags : - a - redis - name : redis-b namespace : test chart : name : bitnami/redis tags : - b - redis - name : memcached-a namespace : test chart : name : bitnami/redis tags : - a - memcached - name : memcached-b namespace : test chart : name : bitnami/memcached tags : - b - memcached Match all redis helmwave build -t redis [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - redis-b@test Match the group a helmwave build -t a [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - memcached-a@test Match multiply group. If you know SQL. It looks like that: SELECT * FROM releases WHERE tag = \"redis\" OR tag = \"a\" helmwave build -t redis -t a [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - redis-b@test - memcached-a@test All that was above, we used the logical OR operator. If you need strongly logic with AND you should use --match-all-tags flag. This flag changes logic for query releases. If you know SQL. It looks like that: SELECT * FROM releases WHERE tag = \"redis\" AND tag = \"a\" helmwave build -t redis -t a --match-all-tags [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan releases: - redis-a@test depends_on & allow_failure It allows waiting releases It works when you call $ helmwave up Example for 3-tier application graph LR frontend --> backend --> db; Your helmwave.yml will releases : - name : frontend depends_on : backend@test namespace : test - name : backend depends_on : db@test namespace : test - name : db allow_failure : false namespace : test When allow_failure is set true. It allows the installation to proceed. name Release name I hope you know what it is. namespace Kubernetes namespace create_namespace if true Helmwave will create the release namespace if not present timeout time to wait for any individual Kubernetes operation","title":"Yaml"},{"location":"yaml/#yaml","text":"works on helm v3.8.1 Sample: <WIP>","title":"Yaml"},{"location":"yaml/#project","text":"Reserved for future.","title":"Project"},{"location":"yaml/#version","text":"Helmwave will check current version and project version. In the future it is planned to be used for major compatibility.","title":"Version"},{"location":"yaml/#repositories","text":"field required type default name \u2705 string \"\" url \u2705 url \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" certfile \ud83d\ude45 string \"\" keyfile \ud83d\ude45 string \"\" cafile \ud83d\ude45 string \"\" insecureskiptlsverify \ud83d\ude45 bool false force \ud83d\ude45 bool false","title":"Repositories[]"},{"location":"yaml/#name","text":"Local name alias","title":"name"},{"location":"yaml/#url","text":"URL for chart repository","title":"url"},{"location":"yaml/#force","text":"Don't skip if repository exists.","title":"force"},{"location":"yaml/#releases","text":"field required type default helmwave build helmwave up name \u2705 string \"\" \u2705 \u2705 namespace \u2705 string \"\" \u2705 \u2705 chart.name \u2705 string \"\" \u2705 \u2705 chart.username \ud83d\ude45 string \"\" chart.password \ud83d\ude45 string \"\" chart.certfile \ud83d\ude45 string \"\" chart.keyfile \ud83d\ude45 string \"\" chart.cafile \ud83d\ude45 string \"\" chart.insecureskiptlsverify \ud83d\ude45 bool false description \ud83d\ude45 string \"\" depends_on \ud83d\ude45 array [] \u2705 allow_failure \ud83d\ude45 bool false \u2705 values \ud83d\ude45 array [] \u2705 \u2705 tags \ud83d\ude45 array [] \u2705 store \ud83d\ude45 object {} \u2705 timeout \ud83d\ude45 interval 0s \u2705 maxhistory \ud83d\ude45 int 0 \u2705 createnamespace \ud83d\ude45 bool false \u2705 resetvalues \ud83d\ude45 bool false \u2705 recreate \ud83d\ude45 bool false \u2705 force \ud83d\ude45 bool false \u2705 atomic \ud83d\ude45 bool false \u2705 cleanuponfail \ud83d\ude45 bool false \u2705 subnotes \ud83d\ude45 bool false \u2705 disablehooks \ud83d\ude45 bool false \u2705 disableopenapivalidation \ud83d\ude45 bool false \u2705 waitforjobs \ud83d\ude45 bool false \u2705 wait \ud83d\ude45 bool false \u2705 skipcrds \ud83d\ude45 bool false \u2705 devel \ud83d\ude45 bool false \u2705 reusevalues \ud83d\ude45 bool false \u2705","title":"Releases[]"},{"location":"yaml/#store","text":"It allows to pass you custom fields from helmwave.yml to values. It works when you call $ helmwave build example","title":"\ud83d\uddf3\ufe0f Store"},{"location":"yaml/#tags","text":"It allows you to choose releases for build It works with next options when you call $ helmwave build : --tags value, -t value It allows you choose releases for build. Example: -t tag1 -t tag3,tag4 [ $HELMWAVE_TAGS ] --match-all-tags Match all provided tags ( default: false ) [ $HELMWAVE_MATCH_ALL_TAGS ] Matching with tags Suppose we have next helmwave.yml with 4 releases. redis-a redis-b memcached-a memcached-b repositories : - name : bitnami url : https://charts.bitnami.com/bitnami releases : - name : redis-a namespace : test chart : name : bitnami/redis tags : - a - redis - name : redis-b namespace : test chart : name : bitnami/redis tags : - b - redis - name : memcached-a namespace : test chart : name : bitnami/redis tags : - a - memcached - name : memcached-b namespace : test chart : name : bitnami/memcached tags : - b - memcached Match all redis helmwave build -t redis [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - redis-b@test Match the group a helmwave build -t a [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - memcached-a@test Match multiply group. If you know SQL. It looks like that: SELECT * FROM releases WHERE tag = \"redis\" OR tag = \"a\" helmwave build -t redis -t a [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - redis-b@test - memcached-a@test All that was above, we used the logical OR operator. If you need strongly logic with AND you should use --match-all-tags flag. This flag changes logic for query releases. If you know SQL. It looks like that: SELECT * FROM releases WHERE tag = \"redis\" AND tag = \"a\" helmwave build -t redis -t a --match-all-tags [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan releases: - redis-a@test","title":"\ud83d\udd16 Tags"},{"location":"yaml/#depends_on-allow_failure","text":"It allows waiting releases It works when you call $ helmwave up Example for 3-tier application graph LR frontend --> backend --> db; Your helmwave.yml will releases : - name : frontend depends_on : backend@test namespace : test - name : backend depends_on : db@test namespace : test - name : db allow_failure : false namespace : test When allow_failure is set true. It allows the installation to proceed.","title":"depends_on &amp; allow_failure"},{"location":"yaml/#name_1","text":"Release name I hope you know what it is.","title":"name"},{"location":"yaml/#namespace","text":"Kubernetes namespace","title":"namespace"},{"location":"yaml/#create_namespace","text":"if true Helmwave will create the release namespace if not present","title":"create_namespace"},{"location":"yaml/#timeout","text":"time to wait for any individual Kubernetes operation","title":"timeout"},{"location":"examples/apps-per-ns/","text":"Apps per namespace Source If you want to install each application in your own namespace. Create the project Project structure \u251c\u2500\u2500 README.md \u251c\u2500\u2500 helmwave.yml.tpl \u251c\u2500\u2500 values \u2502 \u251c\u2500\u2500 harbor.yml \u2502 \u251c\u2500\u2500 minio.yml \u2502 \u251c\u2500\u2500 plantuml.yml \u2502 \u2514\u2500\u2500 renovate.yml \u2514\u2500\u2500 vars.yaml Step 1. Create helmwave.yml.tpl version : 0.19.0 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami - name : renovate url : https://docs.renovatebot.com/helm-charts - name : stevehipwell url : https://stevehipwell.github.io/helm-charts # General options .options : &options wait : true wait_for_jobs : true force : false timeout : 10m atomic : false max_history : 3 create_namespace : true releases : {{ - with readFile \"vars.yaml\" | fromYaml | get \"releases\" }} {{ range $v : = . }} ################################# # # # {{ $v | get \"name\" }} # # ################################# - name : {{ $v | get \"name\" }} chart : name : {{ $v | get \"repo\" }} /{{ $v | get \"name\" }} version : {{ $v | get \"version\" }} namespace : {{ $v | get \"name\" }} tags : [{{ $v | get \"name\" }}] values : - values/{{ $v | get \"name\" }}.yml << : *options {{ end }} {{ - end }} Step 2. Create vars.yaml We will manage list apps with additional vars.yaml file releases : - name : harbor repo : bitnami version : 11.0.5 - name : minio repo : bitnami version : 9.0.2 - name : plantuml repo : stevehipwell version : 3.3.0 - name : renovate repo : renovate version : 25.76.1 Step 3. Render helmwave.yml.tpl -> helmwave.yml helmwave yml You will get it version : 0.19.0 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami - name : renovate url : https://docs.renovatebot.com/helm-charts - name : stevehipwell url : https://stevehipwell.github.io/helm-charts # General options .options : &options wait : true waitforjobs : true force : false timeout : 10m atomic : false maxhistory : 3 createnamespace : true releases : ################################# # # # harbor # # ################################# - name : harbor chart : name : bitnami/harbor version : 11.0.5 namespace : harbor tags : [ harbor ] values : - values/harbor.yml << : *options ################################# # # # minio # # ################################# - name : minio chart : name : bitnami/minio version : 9.0.2 namespace : minio tags : [ minio ] values : - values/minio.yml << : *options ################################# # # # plantuml # # ################################# - name : plantuml chart : name : stevehipwell/plantuml version : 3.3.0 namespace : plantuml tags : [ plantuml ] values : - values/plantuml.yml << : *options ################################# # # # renovate # # ################################# - name : renovate chart : name : renovate/renovate version : 25.76.1 namespace : renovate tags : [ renovate ] values : - values/renovate.yml << : *options Step 4. Build plan helmwave build Step 5. Deploy plan if we want to deploy only plantuml helmwave build -t plantuml helmwave up looks how to work HELMWAVE_TAGS CI/CD with Gitlab-CI variables : HELMWAVE_LOG_LEVEL : debug deploy to prod : stage : deploy when : manual environment : name : prod image : name : ghcr.io/helmwave/helmwave:0.17.2 entrypoint : [ \"\" ] before_script : - printenv | grep HELMWAVE script : - helmwave yml - helmwave build - helmwave up artifacts : paths : - .helmwave expire_in : 2 week if you want to deploy only plantuml via CI.","title":"Apps per namespace"},{"location":"examples/apps-per-ns/#apps-per-namespace","text":"Source If you want to install each application in your own namespace.","title":"Apps per namespace"},{"location":"examples/apps-per-ns/#create-the-project","text":"Project structure \u251c\u2500\u2500 README.md \u251c\u2500\u2500 helmwave.yml.tpl \u251c\u2500\u2500 values \u2502 \u251c\u2500\u2500 harbor.yml \u2502 \u251c\u2500\u2500 minio.yml \u2502 \u251c\u2500\u2500 plantuml.yml \u2502 \u2514\u2500\u2500 renovate.yml \u2514\u2500\u2500 vars.yaml Step 1. Create helmwave.yml.tpl version : 0.19.0 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami - name : renovate url : https://docs.renovatebot.com/helm-charts - name : stevehipwell url : https://stevehipwell.github.io/helm-charts # General options .options : &options wait : true wait_for_jobs : true force : false timeout : 10m atomic : false max_history : 3 create_namespace : true releases : {{ - with readFile \"vars.yaml\" | fromYaml | get \"releases\" }} {{ range $v : = . }} ################################# # # # {{ $v | get \"name\" }} # # ################################# - name : {{ $v | get \"name\" }} chart : name : {{ $v | get \"repo\" }} /{{ $v | get \"name\" }} version : {{ $v | get \"version\" }} namespace : {{ $v | get \"name\" }} tags : [{{ $v | get \"name\" }}] values : - values/{{ $v | get \"name\" }}.yml << : *options {{ end }} {{ - end }} Step 2. Create vars.yaml We will manage list apps with additional vars.yaml file releases : - name : harbor repo : bitnami version : 11.0.5 - name : minio repo : bitnami version : 9.0.2 - name : plantuml repo : stevehipwell version : 3.3.0 - name : renovate repo : renovate version : 25.76.1 Step 3. Render helmwave.yml.tpl -> helmwave.yml helmwave yml You will get it version : 0.19.0 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami - name : renovate url : https://docs.renovatebot.com/helm-charts - name : stevehipwell url : https://stevehipwell.github.io/helm-charts # General options .options : &options wait : true waitforjobs : true force : false timeout : 10m atomic : false maxhistory : 3 createnamespace : true releases : ################################# # # # harbor # # ################################# - name : harbor chart : name : bitnami/harbor version : 11.0.5 namespace : harbor tags : [ harbor ] values : - values/harbor.yml << : *options ################################# # # # minio # # ################################# - name : minio chart : name : bitnami/minio version : 9.0.2 namespace : minio tags : [ minio ] values : - values/minio.yml << : *options ################################# # # # plantuml # # ################################# - name : plantuml chart : name : stevehipwell/plantuml version : 3.3.0 namespace : plantuml tags : [ plantuml ] values : - values/plantuml.yml << : *options ################################# # # # renovate # # ################################# - name : renovate chart : name : renovate/renovate version : 25.76.1 namespace : renovate tags : [ renovate ] values : - values/renovate.yml << : *options Step 4. Build plan helmwave build Step 5. Deploy plan if we want to deploy only plantuml helmwave build -t plantuml helmwave up looks how to work HELMWAVE_TAGS","title":"Create the project"},{"location":"examples/apps-per-ns/#cicd-with-gitlab-ci","text":"variables : HELMWAVE_LOG_LEVEL : debug deploy to prod : stage : deploy when : manual environment : name : prod image : name : ghcr.io/helmwave/helmwave:0.17.2 entrypoint : [ \"\" ] before_script : - printenv | grep HELMWAVE script : - helmwave yml - helmwave build - helmwave up artifacts : paths : - .helmwave expire_in : 2 week if you want to deploy only plantuml via CI.","title":"CI/CD with Gitlab-CI"},{"location":"examples/aws-sm/","text":"AWS secret manager Source Project structure \u251c\u2500\u2500 README.md \u251c\u2500\u2500 helmwave.yml \u2514\u2500\u2500 vaules-secret.yaml Step 1. Create next secret aws secretsmanager create-secret --name hello/foobar --secret-string '{\"foo\":\"bar\"}' Step 2. Create helmwave.yml repositories : - name : bitnami url : https://charts.bitnami.com/bitnami template : gomplate : enabled : true data : sources : secret : url : scheme : aws+sm path : 'hello/foobar' releases : - name : app chart : name : bitnami/nginx namespace : test values : - vaules-secret.yaml Step 3. Create vaules-secret.yaml secret : {{ datasource \"secret\" }} Step 4. Run helmwave build You will get secret: {\"foo\":\"bar\"}","title":"AWS secret manager"},{"location":"examples/aws-sm/#aws-secret-manager","text":"Source Project structure \u251c\u2500\u2500 README.md \u251c\u2500\u2500 helmwave.yml \u2514\u2500\u2500 vaules-secret.yaml Step 1. Create next secret aws secretsmanager create-secret --name hello/foobar --secret-string '{\"foo\":\"bar\"}' Step 2. Create helmwave.yml repositories : - name : bitnami url : https://charts.bitnami.com/bitnami template : gomplate : enabled : true data : sources : secret : url : scheme : aws+sm path : 'hello/foobar' releases : - name : app chart : name : bitnami/nginx namespace : test values : - vaules-secret.yaml Step 3. Create vaules-secret.yaml secret : {{ datasource \"secret\" }} Step 4. Run helmwave build You will get secret: {\"foo\":\"bar\"}","title":"AWS secret manager"},{"location":"examples/oci/","text":"OCI Just add oci:// to your chart name and define a registry. version : 0.19.x registries : - host : localhost:5000 username : <pass_username_here> password : <pass_password_here> releases : - name : my chart : name : oci://localhost:5000/my-chart version : 0.2.0 # required","title":"OCI"},{"location":"examples/oci/#oci","text":"Just add oci:// to your chart name and define a registry. version : 0.19.x registries : - host : localhost:5000 username : <pass_username_here> password : <pass_password_here> releases : - name : my chart : name : oci://localhost:5000/my-chart version : 0.2.0 # required","title":"OCI"},{"location":"examples/pass-git-commit/","text":"Restart pods via git-commit Source Project Structure . \u251c\u2500\u2500 helmwave.yml \u2514\u2500\u2500 values.yml helmwave.yml version : 0.19.0 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami releases : - name : my-app chart : name : bitnami/nginx values : - values.yml namespace : my-namespace createnamespace : true nginx/template/deployment.yaml looks like that: ... metadata : {{ - with .Values.podAnnotations }} annotations : {{ - toYaml . | nindent 8 }} {{ - end }} ... We will pass pod annotations with values values.yml podAnnotations : gitCommit : {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }} Run helmwave build helmwave up or helmwave up --build","title":"Restart pods via git-commit"},{"location":"examples/pass-git-commit/#restart-pods-via-git-commit","text":"Source Project Structure . \u251c\u2500\u2500 helmwave.yml \u2514\u2500\u2500 values.yml helmwave.yml version : 0.19.0 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami releases : - name : my-app chart : name : bitnami/nginx values : - values.yml namespace : my-namespace createnamespace : true nginx/template/deployment.yaml looks like that: ... metadata : {{ - with .Values.podAnnotations }} annotations : {{ - toYaml . | nindent 8 }} {{ - end }} ... We will pass pod annotations with values values.yml podAnnotations : gitCommit : {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }} Run helmwave build helmwave up or helmwave up --build","title":"Restart pods via git-commit"},{"location":"examples/pass-git-tag/","text":"Git tag -> Docker image tag Source Source Suppose my-chart has default values.yaml : image : repository : registry.gitlab.local/example/app tag : v1.0.0 ... If we need to create CI/CD pipeline, we need use next script helm upgrade --instal my-release my-chart-repo/my-chart-app --set = \"image.tag= $CI_COMMIT_TAG \" -n my-namespace HelmWave allows use declarative way to approach this goal. Project Structure . \u251c\u2500\u2500 helmwave.yml \u2514\u2500\u2500 values.yml helmwave.yml.tpl version : 0.19.0 releases : - name : my-release chart : name : my-chart-repo/my-chart-app values : - values.yml namespace : my-namespace create_namespace : true values.yml This values will override default values image : tag : {{ env \"CI_COMMIT_TAG\" }} Run helmwave build helmwave up or helmwave up --build","title":"Git tag -> Docker image tag"},{"location":"examples/pass-git-tag/#git-tag-docker-image-tag","text":"Source Source Suppose my-chart has default values.yaml : image : repository : registry.gitlab.local/example/app tag : v1.0.0 ... If we need to create CI/CD pipeline, we need use next script helm upgrade --instal my-release my-chart-repo/my-chart-app --set = \"image.tag= $CI_COMMIT_TAG \" -n my-namespace HelmWave allows use declarative way to approach this goal. Project Structure . \u251c\u2500\u2500 helmwave.yml \u2514\u2500\u2500 values.yml helmwave.yml.tpl version : 0.19.0 releases : - name : my-release chart : name : my-chart-repo/my-chart-app values : - values.yml namespace : my-namespace create_namespace : true values.yml This values will override default values image : tag : {{ env \"CI_COMMIT_TAG\" }} Run helmwave build helmwave up or helmwave up --build","title":"Git tag -&gt; Docker image tag"},{"location":"examples/private-github-repo/","text":"Private GitHub repo Source . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 helmwave.yml \u2514\u2500\u2500 helmwave.yml.tpl Suppose the helmwave.yml.tpl looks like version : 0.19.0 repositories : - name : your-private-git-repo-hosted-charts url : https://{{ requiredEnv \"GITHUB_TOKEN\"}}@raw.githubusercontent.com/foo/bar/master/ .options : &options namespace : {{ requiredEnv \"NS\" }} createnamespace : true releases : - name : hello chart : name : foo/bar << : *options This command will render helmwave.yml.tpl to helmwave.yml $ export NS = stage $ export GITHUB_TOKEN = my-secret-token $ helmwave yml [ \ud83d\ude43 aka INFO ] : \ud83d\udcc4 YML is ready! build plan with next command: helmwave build -f helmwave.yml Once applied, your helmwave.yml will look like version : 0.19.0 repositories : - name : your-private-git-repo-hosted-charts url : https://my-secret-token@raw.githubusercontent.com/foo/bar/master/ .options : &options namespace : ips create_namespace : true releases : - name : hello chart : name : foo/bar << : *options","title":"Private GitHub repo"},{"location":"examples/private-github-repo/#private-github-repo","text":"Source . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 helmwave.yml \u2514\u2500\u2500 helmwave.yml.tpl Suppose the helmwave.yml.tpl looks like version : 0.19.0 repositories : - name : your-private-git-repo-hosted-charts url : https://{{ requiredEnv \"GITHUB_TOKEN\"}}@raw.githubusercontent.com/foo/bar/master/ .options : &options namespace : {{ requiredEnv \"NS\" }} createnamespace : true releases : - name : hello chart : name : foo/bar << : *options This command will render helmwave.yml.tpl to helmwave.yml $ export NS = stage $ export GITHUB_TOKEN = my-secret-token $ helmwave yml [ \ud83d\ude43 aka INFO ] : \ud83d\udcc4 YML is ready! build plan with next command: helmwave build -f helmwave.yml Once applied, your helmwave.yml will look like version : 0.19.0 repositories : - name : your-private-git-repo-hosted-charts url : https://my-secret-token@raw.githubusercontent.com/foo/bar/master/ .options : &options namespace : ips create_namespace : true releases : - name : hello chart : name : foo/bar << : *options","title":"Private GitHub repo"},{"location":"examples/quick-start/","text":"\ud83d\udd30 Quick Start 1) install helmwave 2) create helmwave.yml Suppose the helmwave.yml representing the desired state of your helm releases looks like: version : 0.19.0 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .options : &options namespace : my-namespace wait : true releases : - name : redis-a << : *options chart : name : bitnami/redis - name : redis-b << : *options chart : name : bitnami/redis 3) build plan helmwave build this steps generate plan 4) if everything is ok , deploy plan helmwave up Output will be like that: [ \ud83d\ude43 aka INFO ] : \u2705 redis-a@my-namespace [ \ud83d\ude43 aka INFO ] : \u2705 redis-b@my-namespace [ \ud83d\ude43 aka INFO ] : Success 2 / 2 6) check $ helm list -n my-namespace NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION redis-a my-namespace 1 2020 -10-31 17 :05:35.829766 +0300 MSK deployed redis-11.2.3 6 .0.9 redis-b my-namespace 1 2020 -10-31 17 :05:39.437556 +0300 MSK deployed redis-11.2.3 6 .0.9 $ k get po -n my-namespace NAME READY STATUS RESTARTS AGE redis-a-master-0 1 /1 Running 0 64s redis-a-slave-0 1 /1 Running 0 31s redis-a-slave-1 1 /1 Running 0 62s redis-b-master-0 1 /1 Running 0 59s redis-b-slave-0 1 /1 Running 0 32s redis-b-slave-1 1 /1 Running 0 51s Congratulations! Live mode !!! Ascinema cast is too old.","title":"\ud83d\udd30 Quick Start"},{"location":"examples/quick-start/#quick-start","text":"1) install helmwave 2) create helmwave.yml Suppose the helmwave.yml representing the desired state of your helm releases looks like: version : 0.19.0 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .options : &options namespace : my-namespace wait : true releases : - name : redis-a << : *options chart : name : bitnami/redis - name : redis-b << : *options chart : name : bitnami/redis 3) build plan helmwave build this steps generate plan 4) if everything is ok , deploy plan helmwave up Output will be like that: [ \ud83d\ude43 aka INFO ] : \u2705 redis-a@my-namespace [ \ud83d\ude43 aka INFO ] : \u2705 redis-b@my-namespace [ \ud83d\ude43 aka INFO ] : Success 2 / 2 6) check $ helm list -n my-namespace NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION redis-a my-namespace 1 2020 -10-31 17 :05:35.829766 +0300 MSK deployed redis-11.2.3 6 .0.9 redis-b my-namespace 1 2020 -10-31 17 :05:39.437556 +0300 MSK deployed redis-11.2.3 6 .0.9 $ k get po -n my-namespace NAME READY STATUS RESTARTS AGE redis-a-master-0 1 /1 Running 0 64s redis-a-slave-0 1 /1 Running 0 31s redis-a-slave-1 1 /1 Running 0 62s redis-b-master-0 1 /1 Running 0 59s redis-b-slave-0 1 /1 Running 0 32s redis-b-slave-1 1 /1 Running 0 51s Congratulations!","title":"\ud83d\udd30 Quick Start"},{"location":"examples/quick-start/#live-mode","text":"!!! Ascinema cast is too old.","title":"Live mode"},{"location":"examples/single-app-multi-envs/","text":"Single app multi envs [source] When we work with helm sometimes we need dynamics chose environment. export CI_ENVIRONMENT_NAME = stage helm upgrade --install my-release my-chart-repo/my-chart-app -f values/_.yml -f values/ $CI_ENVIRONMENT_NAME .yaml Project structure . \u251c\u2500\u2500 helmwave.yml.tpl \u2514\u2500\u2500 values \u251c\u2500\u2500 _.yml \u251c\u2500\u2500 prod.yml \u251c\u2500\u2500 qa.yml \u2514\u2500\u2500 stage.yml helmwave.yml.tpl version : 0.19.0 releases : - name : my-release chart : name : my-chart-repo/my-chart-app # yaml says \"Who is the last one is right.\" values : # Default - values/_.yml # For specific ENVIRONMENT - values/{{ requiredEnv \"CI_ENVIRONMENT_NAME\" }}.yml create_namespace : true _.yml image : tag : {{ env \"pass-git-tag\" }} podAnnotations : gitCommit : {{ requiredEnv \"pass-git-commit\" | quote }} prod.yml replicaCount : 6 qa.yml replicaCount : 2 stage.yml replicaCount : 4 Run export CI_ENVIRONMENT_NAME = stage helmwave yml helmwave build helmwave up or one command helmwave up --build --yml","title":"Single app multi envs"},{"location":"examples/single-app-multi-envs/#single-app-multi-envs","text":"[source] When we work with helm sometimes we need dynamics chose environment. export CI_ENVIRONMENT_NAME = stage helm upgrade --install my-release my-chart-repo/my-chart-app -f values/_.yml -f values/ $CI_ENVIRONMENT_NAME .yaml Project structure . \u251c\u2500\u2500 helmwave.yml.tpl \u2514\u2500\u2500 values \u251c\u2500\u2500 _.yml \u251c\u2500\u2500 prod.yml \u251c\u2500\u2500 qa.yml \u2514\u2500\u2500 stage.yml helmwave.yml.tpl version : 0.19.0 releases : - name : my-release chart : name : my-chart-repo/my-chart-app # yaml says \"Who is the last one is right.\" values : # Default - values/_.yml # For specific ENVIRONMENT - values/{{ requiredEnv \"CI_ENVIRONMENT_NAME\" }}.yml create_namespace : true _.yml image : tag : {{ env \"pass-git-tag\" }} podAnnotations : gitCommit : {{ requiredEnv \"pass-git-commit\" | quote }} prod.yml replicaCount : 6 qa.yml replicaCount : 2 stage.yml replicaCount : 4 Run export CI_ENVIRONMENT_NAME = stage helmwave yml helmwave build helmwave up or one command helmwave up --build --yml","title":"Single app multi envs"},{"location":"examples/store-greeting-hello/","text":"How to use Store [source] Project Structure . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 a.yml \u251c\u2500\u2500 b.yml \u2514\u2500\u2500 helmwave.yml helmwave.yml releases : - name : a chart : name : my/a store : msg : hello values : - a.yml - name : b chart : name : my/b store : msg : hello values : - b.yml a.yml image : repository : nginx greeting : {{ .Release.Store.msg }} b.yml image : tag : v1.0.0 message : {{ .Release.Store.msg }} world After run helmwave build you get a.yml image : repository : nginx greeting : hello b.yml image : tag : v1.0.0 message : hello world","title":"Store"},{"location":"examples/store-greeting-hello/#how-to-use-store","text":"[source] Project Structure . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 a.yml \u251c\u2500\u2500 b.yml \u2514\u2500\u2500 helmwave.yml helmwave.yml releases : - name : a chart : name : my/a store : msg : hello values : - a.yml - name : b chart : name : my/b store : msg : hello values : - b.yml a.yml image : repository : nginx greeting : {{ .Release.Store.msg }} b.yml image : tag : v1.0.0 message : {{ .Release.Store.msg }} world After run helmwave build you get a.yml image : repository : nginx greeting : hello b.yml image : tag : v1.0.0 message : hello world","title":"How to use Store"}]}