{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"anno/","title":"\ud83d\udcd4 Annotations","text":""},{"location":"anno/#how-to-use","title":"How to use?","text":"<p>You should add an annotation to your <code>Deployment</code> / <code>StatefulSet</code> / <code>Jobs</code> / <code>DaemonSet</code></p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: api\nannotations:\nhelmwave.dev/show-service-messages: \"true\"\n</code></pre>"},{"location":"anno/#helmwaves-annotations","title":"Helmwave's annotations","text":""},{"location":"anno/#helmwavedevskip-diff","title":"<code>helmwave.dev/skip-diff</code>","text":"<p>Skip resource for <code>helm diff</code> function.</p> <p>This is very useful for secret or sensitive data.</p> <p>mention with <code>--show-secret</code> flag.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-secret\nannotations:\nhelmwave.dev/show-service-messages: \"true\"\n</code></pre>"},{"location":"anno/#kubedogs-annotations","title":"kubedog's annotations \ud83d\udc36","text":"<p>Kubedog can't be enabled when there are releases in multiple contexts.</p> <p> example</p> <p>inspired by werf annotations</p>"},{"location":"anno/#helmwavedevtrack-termination-mode","title":"<code>helmwave.dev/track-termination-mode</code>","text":"<p>Defines a condition when helmwave should stop tracking of the resource:</p> <ul> <li><code>WaitUntilResourceReady</code> (default) \u2014 the entire deployment process would monitor and wait for the readiness of the   resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all   resources to be ready.</li> <li><code>NonBlocking</code> \u2014 the resource is tracked only if there are other resources that are not yet ready.</li> </ul>"},{"location":"anno/#helmwavedevfail-mode","title":"<code>helmwave.dev/fail-mode</code>","text":"<p>Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process:</p> <ul> <li><code>FailWholeDeployProcessImmediately</code> (default) \u2014 the entire deploy process will fail with an error if an error occurs   for some resource.</li> <li><code>HopeUntilEndOfDeployProcess</code> \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and   continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource   back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again.</li> <li><code>IgnoreAndContinueDeployProcess</code> \u2014 resource errors do not affect the deployment process.</li> </ul>"},{"location":"anno/#helmwavedevfailures-allowed-per-replica","title":"<code>helmwave.dev/failures-allowed-per-replica</code>","text":"<p>By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode.</p> <ul> <li>NUMBER</li> </ul>"},{"location":"anno/#helmwavedevlog-regex","title":"<code>helmwave.dev/log-regex</code>","text":"<p>Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwavedevlog-regex-for-container","title":"<code>helmwave.dev/log-regex-for-{container}</code>","text":"<p>Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwavedevskip-logs","title":"<code>helmwave.dev/skip-logs</code>","text":"<p>Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"anno/#helmwavedevskip-logs-for-containers","title":"<code>helmwave.dev/skip-logs-for-containers</code>","text":"<p>Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwavedevshow-logs-only-for-containers","title":"<code>helmwave.dev/show-logs-only-for-containers</code>","text":"<p>Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwavedevshow-service-messages","title":"<code>helmwave.dev/show-service-messages</code>","text":"<p>Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"ci/","title":"\ud83e\uddcb Continuous Integration","text":"<p>Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind.</p> <p>Let's see how we can get it working on popular CI software.</p>"},{"location":"ci/#github-action","title":"GitHub action","text":"<p>You can use official github action</p> <pre><code>name: Deploy\non:\npush:\n\n\njobs:\nexternal:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\n- uses: helmwave/setup-action@v0.2.0\nname: Install helmwave\nwith:\nversion: '0.27.3'\n- name: templating helmwave.yml.tpl  run: helmwave yml\n- name: plan\nrun: helmwave build\n- name: deploy\nrun: helmwave up\n</code></pre>"},{"location":"ci/#gitlab-ci","title":"Gitlab-CI","text":"<pre><code>variables:\nHELMWAVE_LOG_LEVEL: debug\n\nhelmwave:\nstage: deploy\nenvironment:\nname: \"ref/$CI_COMMIT_REF_SLUG\"\nimage:\nname: diamon/helmwave:0.27.3\nentrypoint: [\"\"]\nbefore_script:\n- printenv | grep HELMWAVE\nscript:\n- helmwave yml\n- helmwave build\n- helmwave up\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 week\n</code></pre> <p>See  the  example</p>"},{"location":"ci/#kube-linter-and-helmwave","title":"Kube-Linter and Helmwave","text":"<pre><code>stages:\n- build\n- lint\n- deploy\n\n\nvariables:\nHELMWAVE_PLAN: $CI_PROJECT_DIR/.helmwave\n\n\n.helmwave: &amp;helmwave\nbefore_script:\n- printenv | grep HELMWAVE\n- ls -la $HELMWAVE_PLAN || true\nafter_script:\n- ls -la $HELMWAVE_PLAN\nimage:\nname: ghcr.io/helmwave/helmwave:0.27.3\nentrypoint: [ '' ]\n\n###############  BUILD  ################\nplan:\nstage: build\nextends: .helmwave\nartifacts:\npaths:\n- .helmwave\nexpire_in: 1 week\nscript:\n- '[[ -f \"helmwave.yml.tpl\" ]] &amp;&amp; helmwave yml'\n- cat helmwave.yml\n- helmwave build\n\n###############  LINT  ################\nkube-linter:\nstage: lint\nimage:\nname: stackrox/kube-linter:0.2.5-alpine\nentrypoint: [ '' ]\nscript:\n- /kube-linter lint $HELMWAVE_PLAN\n\n\nkubeval:\nstage: lint\nimage:\nname: garethr/kubeval\nentrypoint: [ '' ]\nscript:\n- /kubeval --force-color $HELMWAVE_PLAN/manifest/*.yml\n\n\npluto:\nstage: lint\nimage:\nname: quay.io/fairwinds/pluto:v5.1\nentrypoint: [ '' ]\nscript:\n- /pluto detect-files -d $HELMWAVE_PLAN\n\n###############  Deploy  ################\nup:\nstage: deploy\nextends: .helmwave\nwhen: manual\nscript:\n- helmwave up\n</code></pre>"},{"location":"cli/","title":"\ud83d\udee0 CLI Reference","text":"<pre><code>NAME:\n   helmwave - is like docker-compose for helm\n\nUSAGE:\n   helmwave [global options] command [command options] [arguments...]\n\nVERSION:\n   0.27.3\n\nDESCRIPTION:\n   This tool helps you compose your :simple-helm: helm releases!\n   0. $ helmwave yml\n   1. $ helmwave build\n   2. $ helmwave up\n\n\nCOMMANDS:\n   build         \ud83c\udfd7 Build a plan\n   diff, vs      \ud83c\udd9a Show Differences\n   up            \ud83d\udea2 Apply your plan\n   list, ls      \ud83d\udc40 List of deployed releases\n   rollback      \u23ee Rollback your plan\n   status        \ud83d\udc41\ufe0f Status of deployed releases\n   down          \ud83d\udd2a Delete all\n   validate      \ud83d\udec2 validate your plan\n   yml           \ud83d\udcc4 render helmwave.yml.tpl -&gt; helmwave.yml\n   schema        generate json schema\n   graph         show graph\n   version, ver  show shorts version\n   completion    generate completion script\n   help, h       Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --log-format value  You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT]\n   --log-level value   You can set: [ debug | info | warn  | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL]\n   --log-color         Force color (default: true) [$HELMWAVE_LOG_COLOR]\n   --log-timestamps    Add timestamps to log messages (default: false) [$HELMWAVE_LOG_TIMESTAMPS]\n   --help, -h          show help\n   --version, -v       print the version\n</code></pre> <p>workflow</p> <p>flowchart TD     helmwave.yml.tpl -- yml --&gt; helmwave.yml -- build --&gt; .helmwave/planfile     .helmwave/planfile --&gt; up(up)     .helmwave/planfile --&gt; down(down)     .helmwave/planfile --&gt; ls(ls)     .helmwave/planfile --&gt; s(status)     .helmwave/planfile --&gt; r(rollback)     .helmwave/planfile --&gt; g(graph)     .helmwave/planfile --&gt; v(validate)     .helmwave/planfile --&gt; diff(diff)  If you don't see a graph, please reload the page.</p>"},{"location":"cli/#step-0-templating","title":"step 0: templating","text":""},{"location":"cli/#yml","title":"<code>yml</code>","text":"<p>This command renders <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code>.</p> <p>Flags</p> <pre><code>--tpl value             Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--file value, -f value  Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n</code></pre>"},{"location":"cli/#step-1-building-a-plan","title":"step 1: building a plan","text":"<p>Helmwave builds plan in complete plan directory (<code>.helmwave</code> by default) that other commands use.</p> <p>A plan includes:</p> <ul> <li>Downloaded remote charts</li> <li>Downloaded and templated all used values files</li> <li>Rendered manifests for each release</li> <li>Markdown file with dependency graph as mermaid diagram</li> <li>Rendered <code>helmwave.yml</code> that uses plan files (e.g., downloaded chart and values)</li> </ul>"},{"location":"cli/#build","title":"<code>build</code>","text":"<p>This command generates a plan.</p> <p>As you can see, <code>build</code> command includes <code>yml</code> command flags.  You can pass <code>--yml</code> flag into <code>build</code> command for launching <code>yml</code> command before building a plan.</p> <p>Flags</p> <pre><code>--plandir value, -p value                          path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--graph-width value                                set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--skip-unchanged                                   skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--diff-mode value                                  You can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--charts-cache-dir value                           enable caching of :simple-helm: helm charts in specified directory [$HELMWAVE_CHARTS_CACHE]\n--yml                                              auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n--wide value                                       show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--show-secret                                      show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--3-way-merge                                      show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--tpl value                                        main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--file value, -f value                             main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value                                  select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--help, -h                                         show help\n</code></pre>"},{"location":"cli/#step-2-working-with-plan","title":"step 2: working with plan","text":"<p>When the plan is ready, you can use it for other commands.</p> <p>Any commands below has <code>--build</code> flag that builds a plan before executing command.  And you can also use <code>--yml</code> flag that renders <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code> before running <code>--build</code> command.</p>"},{"location":"cli/#up","title":"<code>up</code>","text":"<p>Helmwave will install repositories and  helm releases from a plan.</p> <p>Flags</p> <pre><code>--build                                            auto build (default: false) [$HELMWAVE_AUTO_BUILD]\n--kubedog                                          enable/disable kubedog (default: false) [$HELMWAVE_KUBEDOG_ENABLED, $HELMWAVE_KUBEDOG]\n--kubedog-status-interval value                    interval of kubedog status messages (default: 5s) [$HELMWAVE_KUBEDOG_STATUS_INTERVAL]\n--kubedog-start-delay value                        delay kubedog start, don't make it too late (default: 1s) [$HELMWAVE_KUBEDOG_START_DELAY]\n--kubedog-timeout value                            timeout of kubedog multitrackers (default: 5m0s) [$HELMWAVE_KUBEDOG_TIMEOUT]\n--kubedog-log-width value                          Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH]\n--progress                                         Enable progress logs of :simple-helm: helm (INFO log level) (default: false) [$HELMWAVE_PROGRESS]\n--parallel-limit value                             Limit amount of parallel releases (default: 0) [$HELMWAVE_PARALLEL_LIMIT]\n--plandir value, -p value                          path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--graph-width value                                set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--skip-unchanged                                   skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--diff-mode value                                  You can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--charts-cache-dir value                           enable caching of :simple-helm: helm charts in specified directory [$HELMWAVE_CHARTS_CACHE]\n--yml                                              auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n--wide value                                       show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--show-secret                                      show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--3-way-merge                                      show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--tpl value                                        main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--file value, -f value                             main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value                                  select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--help, -h                                         show help\n</code></pre>"},{"location":"cli/#down","title":"<code>down</code>","text":"<p>Helmwave will uninstall helm-releases from plan.</p> <pre><code>$ helmwave down      [\ud83d\ude43 aka INFO]: \u2705 frontend@test uninstalled!\n[\ud83d\ude43 aka INFO]: \u2705 database@test uninstalled!\n[\ud83d\ude43 aka INFO]: \u2705 backend@test uninstalled!\n</code></pre>"},{"location":"cli/#ls","title":"<code>ls</code>","text":"<p>Helmwave will get a list of  helm releases from a plan.</p> <pre><code>$ helmwave ls      [\ud83d\ude43 aka INFO]: Should be 3 releases\n   NAME    | NAMESPACE | REVISION |            UPDATED             |  STATUS  | CHART | VERSION  \n-----------+-----------+----------+--------------------------------+----------+-------+----------\n  frontend | test      |        1 | 2021-11-10 04:41:23.330989     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |          database | test      |        1 | 2021-11-10 04:41:23.353473     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |          backend  | test      |        1 | 2021-11-10 04:41:23.270076     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |\n</code></pre>"},{"location":"cli/#status","title":"<code>status</code>","text":"<p>Helmwave try getting status of  helm releases from a plan.</p> <pre><code>$ helmwave status      [\ud83d\ude43 aka INFO]: Status of frontend@test\n        status: deployed\n        revision: 1\nname: frontend\n        namespace: test\nchart: frontend-0.1.0\n        last deployed: 2021-11-10 04:41:23.330989 +0300 MSK\n[\ud83d\ude43 aka INFO]: Status of database@test\n        status: deployed\n        revision: 1\nname: database\n        namespace: test\nchart: database-0.1.0\n        last deployed: 2021-11-10 04:41:23.353473 +0300 MSK\n[\ud83d\ude43 aka INFO]: Status of backend@test\n        name: backend\n        namespace: test\nchart: backend-0.1.0\n        last deployed: 2021-11-10 04:41:23.270076 +0300 MSK\n        status: deployed\n        revision: 1\n</code></pre>"},{"location":"cli/#rollback","title":"<code>rollback</code>","text":"<p>Rollback  helm releases from a plan.</p> <p>Flags</p> <pre><code>--revision value  rollback all releases to this revision (default: -1)\n</code></pre> <pre><code>$ helmwave rollback      [\ud83d\ude43 aka INFO]: \u2705 frontend@test rollback!\n[\ud83d\ude43 aka INFO]: \u2705 database@test rollback!\n[\ud83d\ude43 aka INFO]: \u2705 backend@test rollback!\n</code></pre>"},{"location":"cli/#graph","title":"<code>graph</code>","text":"<p>Show only  graph of  helm releases from plan.</p> <p>Flags</p> <pre><code>--graph-width value  set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n</code></pre> <p>Graph draws with  helmwave/asciigraph</p>"},{"location":"cli/#validate","title":"<code>validate</code>","text":"<p>Helmwave will validate plan.</p> <p>You should know that helmwave always validate plan before any command.</p>"},{"location":"cli/#diff","title":"<code>diff</code>","text":"<p>Diff has 2 subcommands </p> <ul> <li><code>helmwave diff live</code> will diff with manifests in the  kubernetes cluster </li> <li><code>helmwave diff plan</code> will diff with your another local plan.</li> </ul> <p>Flags</p> <pre><code>--wide value   show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--show-secret  show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--3-way-merge  show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n</code></pre>"},{"location":"cli/#logs","title":"Logs","text":"<p>Helmwave uses  sirupsen/logrus as internal logger.</p> <p>Flags</p> <pre><code>--log-format value  You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT]\n--log-level value   You can set: [ debug | info | warn  | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL]\n--log-color         Force color (default: true) [$HELMWAVE_LOG_COLOR]\n--log-timestamps    Add timestamps to log messages (default: false) [$HELMWAVE_LOG_TIMESTAMPS]\n</code></pre>"},{"location":"cli/#log-format","title":"Log Format","text":"<p>Helmwave supports several log-format</p> features <code>text</code> <code>json</code> <code>pad</code> <code>emoji</code> (default) Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built <code>logrus</code> formatter) JSONFormatter (in-built <code>logrus</code> formatter) TextFormatter (in-built <code>logrus</code> formatter) logrus-emoji-formatter special for helmwave"},{"location":"cli/#log-level","title":"Log Level","text":"_ <code>info</code> (default) <code>warn</code> <code>debug</code> <code>fatal</code> <code>panic</code> <code>trace</code> general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705  helm manifests, bug report \u274c \u274c \u274c \u274c \u274c \u2705 <p><code>info</code> is preferred loglevel.</p> <p>You can enable <code>--progress</code> flag for helm-debug output.</p>"},{"location":"cli/#how-to-use","title":"How to use?","text":"<pre><code>helmwave --log-color=true --log-level=debug --log-format=pad &lt;cmd&gt;\n</code></pre> <p>or</p> <pre><code>export HELMWAVE_LOG_FORMAT=pad\nexport HELMWAVE_LOG_LEVEL=debug\nexport HELMWAVE_LOG_COLOR=true\nhelmwave &lt;cmd&gt;\n</code></pre>"},{"location":"cli/#get-version","title":"Get Version","text":"Long versionShort version <pre><code>$ helmwave --version  \nhelmwave version 0.27.3\n\n$ helmwave -v\nhelmwave version 0.27.3\n</code></pre> <pre><code>$ helmwave version\n0.27.3\n\n$ helmwave ver\n0.27.3\n</code></pre>"},{"location":"cli/#completion","title":"Completion","text":"bash zsh <p>Add this code to your ~/.bashrc</p> <pre><code>source &lt;(helmwave completion bash)\n</code></pre> <pre><code>echo \"source &lt;(helmwave completion bash)\" &gt;&gt; ~/.bashrc\n</code></pre> <p></p> <p>Add this code to your ~/.zshrc</p> <pre><code>source &lt;(helmwave completion zsh)\n</code></pre> <pre><code>echo \"source &lt;(helmwave completion zsh)\" &gt;&gt; ~/.zshrc\n</code></pre> <p></p>"},{"location":"cli/#schema","title":"schema","text":"<p>You can generate json schema for autocomplete and validate <code>helmwave.yml</code> in your IDE.</p> <pre><code>helmwave schema &gt; helmwave.schema.json\n</code></pre>"},{"location":"ide/","title":"\ud83d\udd0c IDE supports","text":"<p>Currently, we don't have any plugins for popular IDEs. You can help us with it \ud83e\ude75.</p> <p>We can suggest you to use json schema for autocomplete and validate <code>helmwave.yml</code> in your IDE.</p> <p>You can generate schema with cli command <code>helmwave schema</code> and use it in your IDE.</p> <pre><code>helmwave schema &gt; helmwave.schema.json\n</code></pre> <p>Or you can get it from  github</p> <pre><code>wget -L https://github.com/helmwave/helmwave/releases/download/v0.27.3/schema.json -o helmwave.schema.json\n</code></pre>  VScode IntelliJ IDEA <p> settings.json</p> <pre><code>{\n\"yaml.schemas\": [\n{\n\"fileMatch\": [\n\"helmwave.yml\"\n],\n\"url\": \"https://github.com/helmwave/helmwave/releases/download/v0.27.3/schema.json\"\n}\n]\n}\n</code></pre> <p></p> <p> </p> <p>set file pattern: helmwave.yml</p> <p></p> <p>restart idea.</p> <p> original ticket</p>"},{"location":"install/","title":"\ud83d\udce5 Installation","text":"<p>You can install the pre-compiled binary from  releases,  packages, use Docker or compile from the source.</p> <p>Here are the steps for each of them:</p>"},{"location":"install/#mac-os","title":"\ud83c\udf4f Mac OS","text":"<p>Download one of releases</p> <p>Install with  brew</p> <pre><code>brew install helmwave/tap/helmwave\n</code></pre> <p>or use wget <pre><code>export VERSION=0.27.3\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_darwin_amd64.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre></p>"},{"location":"install/#linux","title":"\ud83d\udc27 Linux","text":"<p>Download one of releases</p> <pre><code>export VERSION=0.27.3\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_linux_amd64.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#windows","title":"\ud83e\ude9f Windows","text":"<p>We haven't tried running this on Windows.</p> <p>Download one of releases</p>"},{"location":"install/#run-as-a-container","title":"Run as a container","text":"<p>We use 2 docker registries. </p> Registry URL project page Docker hub https://hub.docker.com view Github Container registry https://ghcr.io view <pre><code>docker pull diamon/helmwave\ndocker pull ghcr.io/helmwave/helmwave\n</code></pre> <p>Use specific version</p> <pre><code>docker pull diamon/helmwave:0.27.3\ndocker pull ghcr.io/helmwave/helmwave:0.27.3\n\ndocker run --entrypoint=ash -it --rm --name helmwave ghcr.io/helmwave/helmwave:0.27.3\n# helmwave version\n0.27.3\n#\n</code></pre> <p>Use scratch image</p> <p>scratch image run with nobody user.</p> <pre><code>docker pull diamon/helmwave:scratch\ndocker pull ghcr.io/helmwave/helmwave:scratch\n\ndocker run ghcr.io/helmwave/helmwave:0.27.3-scratch version\n0.27.3\n</code></pre> <p>Use scratch image with specific helmwave version</p> <pre><code>docker pull diamon/helmwave:0.27.3-scratch\ndocker pull ghcr.io/helmwave/helmwave:0.27.3-scratch\n</code></pre>"},{"location":"install/#install-with-go-get","title":"Install with go get","text":"<pre><code>export VERSION=0.27.3\nGO111MODULE=on go get github.com/helmwave/helmwave/cmd/helmwave@$VERSION\n</code></pre>"},{"location":"install/#compile-from-source","title":"Compile from source","text":"<pre><code>git clone git@github.com:helmwave/helmwave.git\ncd helmwave\ngo build ./cmd/helmwave\nmv -f helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#install-with-marcosnilsbin","title":"Install with marcosnils/bin","text":"<pre><code>bin install github.com/helmwave/helmwave\n</code></pre>"},{"location":"intro/","title":"Intro","text":"<p>\ud83c\udf0a Helmwave is helm-native tool for deploy your  helm Charts.</p>"},{"location":"intro/#features","title":"\ud83d\ude80 Features","text":"<p>We focus on speed execution, tiny size, pretty debugging.</p> <p>With \ud83c\udf0a helmwave you will become a superhero:</p> <ul> <li>Deploy multiple environments by one step</li> <li>Separate values for environments</li> <li>Common values for apps</li> <li>Keep a directory of chart value files</li> <li>Maintain changes in version control</li> <li>Template values</li> <li>Manage deploy behavior (<code>pending_release_strategy</code>, <code>depends_on</code>, <code>allow_failure</code>)</li> <li>Live tracking  kubernetes resources with kubedog</li> <li>Fetch data from external datasource like vault, aws ssm</li> <li>... and much more!</li> </ul>"},{"location":"intro/#comparison-to-alternatives","title":"Comparison to alternatives","text":"<p>Some comparisons may be outdated. If any of the tools have improved, please open a PR.</p> \ud83c\udf0a Helmwave Helmfile Helmsman Syntax YAML + sprig/gomplate YAML + sprig TOML/YAML Code style snake_case camelCase camelCase Requirements No <code>kubectl</code>, <code>helm</code> <code>helm-diff</code> (optional: <code>helm-secrets</code>, <code>helm-s3</code>, <code>helm-git</code>) <code>kubectl</code>, <code>helm</code> <code>helm-diff</code> Helm execution function call of bundled  helm <code>os.Exec</code> <code>os.Exec</code>  helm diff function call of bundled helm-diff <code>os.Exec</code> <code>os.Exec</code> Live-tracking  k8s resources Kubedog No No Get application logs Kubedog No No Get k8s events Kubedog and  helm progress No No Labels <code>tags</code> <code>labels</code> ? Manage kube-context via iac Yes Yes Yes Parallel releases Yes Yes Releases with the same priority can be executed in parallel. Parallel limitations Smart DAG goroutine count with concurrency limitation concurrent  helm processes max number of concurrent  helm releases to run Releases dependencies <code>depends_on</code> <code>needs</code> Kind of (<code>priority</code>) Dependencies cross namespaces via <code>@</code> via <code>/</code> No Manage pending strategy Yes No No Explain graph dependencies Yes No No Latest image size Compatible with  helm v2 No Yes Yes OCI <code>registries</code> option in <code>repositories</code> only <code>pull</code>, not <code>login</code> Sub-main config No Yes ? manage render values <code>render</code> option and options for setting delimiters by file extension ? Remote values HTTP/HTTPS only <code>go-getter</code> ? Planfile Yes No No Vault / AWS SSM via <code>gomplate</code> datasources custom functions ? <p>\ud83c\udf0a Helmwave was inspired by docker-compose, terraform and helmfile.</p> <p>Here I would like to express our gratitude to all contributors for their commits, authors of third-party dependencies and all open source communities \u2764\ufe0f</p>"},{"location":"pub/","title":"\ud83d\udcfa Publications","text":""},{"location":"pub/#devoops-conference","title":"\ud83d\udcfa DevOops conference","text":""},{"location":"pub/#new-wave-for-helm","title":"New Wave for Helm!","text":"<p>https://medium.com/wriketechclub/new-wave-for-helm-b9800733587f</p>"},{"location":"pub/#helmwave-is-true-release-manager","title":"\ud83d\udcc4 HelmWave is true release manager","text":"<p>https://diamon.medium.com/helmwave-is-true-release-manager-e7d085a6bd2d</p>"},{"location":"pub/#helmwave-v0193","title":"\ud83d\udcc4 HelmWave v0.19.3","text":"<p>https://habr.com/ru/post/575646/</p>"},{"location":"pub/#part-3-deployment","title":"\ud83d\udcfa Part 3. Deployment.","text":"<p>\u041d\u0430 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0435\u0431\u0438\u043d\u0430\u0440\u0435 \u0441\u043f\u0438\u043a\u0435\u0440\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0443\u0442 \u043e\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u0439 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u043e\u0442\u0435\u043d \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u044d\u0442\u0438\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e HelmWave.</p>"},{"location":"pub/#helmwave-v018","title":"\ud83d\udcc4 HelmWave v0.18+","text":"<p>https://habr.com/ru/post/650963/</p>"},{"location":"pub/#helmwave-v0128","title":"\ud83d\udcc4 HelmWave v0.12.8","text":"<p>https://habr.com/ru/post/575646/</p>"},{"location":"pub/#sberdevconf-smartdev-conference","title":"\ud83d\udcfa SberDevConf / SmartDev conference","text":"<p>\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u043e\u0434\u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438: \u043e\u0442 CI/CD \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u044b\u0445 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0434\u043e \u0432\u0441\u0435\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0432 \u043e\u0431\u043b\u0430\u043a\u0435. \u0417\u0430\u0447\u0435\u043c \u0438 \u043a\u0430\u043a \u043c\u044b \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u043e\u043e\u0431\u0449\u0435 \u0432\u0441\u0451 \u0438 \u043f\u0440\u0438 \u0447\u0451\u043c \u0437\u0434\u0435\u0441\u044c \u0431\u043e\u0442\u044b? \u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f open-source-\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f helm-\u0440\u0435\u043b\u0438\u0437\u043e\u0432 \u2014 helmwave</p>"},{"location":"pub/#helmwave-v050","title":"\ud83d\udcc4 HelmWave v0.5.0","text":"<p>https://habr.com/ru/post/532596/</p>"},{"location":"tpl/","title":"\ud83d\udcc4 Templating","text":"<p>Helmwave using go templates for templating.</p> <p>Helmwave supports all built-in functions / <code>sprig</code> / <code>gomplate</code> and several custom functions. We recommend using <code>gomplate</code>.</p> <p>Flags</p> <pre><code>--templater value   Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]`\n</code></pre> <p>Explain context  helm vs helmwave</p> <p>There is a different context between <code>helm</code> and <code>helmwave</code>. You can't pass variables from helmwave to your  helm chart templates. You should use helmwave to render values of your chart.</p>"},{"location":"tpl/#sprig","title":"Sprig","text":"<ul> <li>  masterminds/sprig</li> <li> documentations</li> </ul> <p>If you've ever written  helm charts, then you're already familiar with it.</p>"},{"location":"tpl/#gomplate","title":"Gomplate","text":"<ul> <li>  hairyhenderson/gomplate</li> <li> documentations</li> </ul> <p><code>Gomplate</code> is a template renderer which supports a growing list of datasources, such as JSON (including EJSON - encrypted JSON), YAML,  AWS EC2 metadata, BoltDB,  Hashicorp Consul and  Hashicorp Vault secrets.</p>"},{"location":"tpl/#custom","title":"Custom","text":"<p>Custom functions will work with any template engine.</p>"},{"location":"tpl/#env","title":"<code>env</code>","text":"<p>The <code>env</code> function allows you to declare a particular environment variable as an optional for template rendering. If the environment variable is unset or empty, the template rendering will continue with an empty string as a value.</p> <pre><code>{{ $envValue := env \"envName\" }}\n</code></pre>"},{"location":"tpl/#requiredenv","title":"<code>requiredEnv</code>","text":"<p>The <code>requiredEnv</code> function allows you to declare a particular environment variable as required for template rendering. If the environment variable is unset or empty, the template rendering will fail with an error message.</p> <pre><code>{{ $envValue := requiredEnv \"envName\" }}\n</code></pre> <p>If the environment variable value starts with '/' (forward slash) and Git for Windows is used, you must set <code>MSYS_NO_PATHCONV=1</code> to preserve values as-is, or the environment variable value will be prefixed with the <code>C:\\Program Files\\Git</code>. Reference</p>"},{"location":"tpl/#exec","title":"<code>exec</code>","text":"<p>The <code>exec</code> function allows you to run a command, returning the stdout of the command. When the command fails, the template rendering will fail with an error message.</p> <pre><code>{{ $cmdOutpot := exec \"./mycmd\" (list \"arg1\" \"arg2\" \"--flag1\") }}\n</code></pre>"},{"location":"tpl/#readfile","title":"<code>readFile</code>","text":"<p>The <code>readFile</code> function allows you to read a file and return its content as the function output. On failure, the template rendering will fail with an error message.</p> <pre><code>{{ $fileContent := readFile \"./myfile\" }}\n</code></pre>"},{"location":"tpl/#toyaml","title":"<code>toYaml</code>","text":"<p>The  <code>toYaml</code> function allows you to convert a value to YAML string. When has failed, the template rendering will fail with an error message.</p> <pre><code>{{ $yaml :=  $value | toYaml }}\n</code></pre>"},{"location":"tpl/#fromyaml","title":"<code>fromYaml</code>","text":"<p>The <code>fromYaml</code> function allows you to convert a YAML string to a value. When has failed, the template rendering will fail with an error message.</p> <pre><code>{{ $value :=  $yamlString | fromYaml }}\n</code></pre>"},{"location":"tpl/#setvalueatpath","title":"<code>setValueAtPath</code>","text":"<p>The <code>setValueAtPath</code> function allows you to set a value at a path. When has failed, the template rendering will fail with an error message.</p> <pre><code>{{ $value | setValueAtPath \"path.key\" $newValue }}\n</code></pre>"},{"location":"tpl/#get","title":"<code>get</code>","text":"<p>The <code>get</code> function allows you to get a value at a path. when defaultValue not set. It will return nil. When has failed, the template rendering will fail with an error message.</p> <pre><code>{{ $Getvalue :=  $value | get \"path.key\" \"defaultValue\" }}\n</code></pre>"},{"location":"tpl/#required","title":"<code>required</code>","text":"<p>The <code>required</code> function returns the second argument as-is only if it is not empty. If empty, the template rendering will fail with an error message containing the first argument.</p> <pre><code>{{ $requiredValue :=  $value | required \"value not set\" }}\n</code></pre>"},{"location":"yaml/","title":"\ud83e\uddec helmwave.yml","text":"<p>This documentation describes all entities inside a <code>helmwave.yml</code></p> field required type default project \ud83d\ude45 string \"\" version \ud83d\ude45 string \"\" repositories \ud83d\ude45 array [] registries \ud83d\ude45 array [] releases \ud83d\ude45 array [] Short <code>helmwave.yml</code>Full <code>helmwave.yml</code> <pre><code>project: \"HelloWorld\"\nversion: \"0.27.3\"\nrepositories: []\nregistries: []\nreleases: []\n</code></pre> <pre><code>project: \"HelloWorld\"\nversion: \"0.27.3\"\n\nrepositories:\n- name: stable\nurl: https://localhost:8080\n# private repositories\nusername: user\npassword: 12345679\n\n# cert\ncertFile: ./cert.pem\nkeyFile: ./key.pem\ncaFile: ./ca.pem\n\nregistries:\n- host: https://localhost:5000\n# private registries\nusername: oci_user\npassword: 98765431\ninsecure: false\n\n\nreleases:\n- name: my\nnamespace: prod\nchart:\nname: stable/my-chart\nversion: \"0.2.0\"\ncafile: \"\"\ncertfile: \"\"\nkeyfile: \"\"\ninsecureskiptlsverify: false\nkeyring: \"\"\npassword: \"\"\npasscredentialsall: false\nrepourl: \"\"\nusername: \"\"\nverify: false\n\nstore:\ngreeting: \"HelloWorld\"\n\ndepends_on:\n- name: db@prod\ntag: prod\noptional: false\n\nvalues:\n- src: values.yml\ndelimiter_left: \"[[\"\ndelimiter_right: \"]]\"\nrender: false\nstrict: true\n\ntags:\n- my\n- product\n\npost_renderer: \"./gomplate\"\noffline_kube_version: \"1.22.0\"\ntimeout: \"5m\"\nmax_history: 3\ncontext: prod\ndescription: \"my chart\"\npending_release_strategy: rollback\nallow_failure: false\natomic: true\ncleanup_on_fail: false\ncreate_namespace: false\ndevel: false\ndisable_hooks: false\ndisable_openapi_validation: false\nforce: false\nenable_dns: false\nrecreate: false\nreset_values: false\nreuse_values: false\nskip_crds: false\nsub_notes: false\nwait: true\nwait_for_jobs: true\n</code></pre>"},{"location":"yaml/#project","title":"project","text":"<p>Reserved for the future.</p>"},{"location":"yaml/#version","title":"version","text":"<p>Helmwave will check the current version and project version.</p> <p>In the future, it is planned to check major compatibility. </p>"},{"location":"yaml/#registries","title":"registries[]","text":"<p>Describe which OCI registries need to be added.</p> field required type default host \u2705 string \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" insecure \ud83d\ude45 bool false  private oci public oci <pre><code>version: 0.27.3\n\nregistries:\n- host: localhost:5000\nusername: &lt;pass_username_here&gt;\npassword: &lt;pass_password_here&gt;\n\nreleases:\n- name: my\nchart:\nname: oci://localhost:5000/my-chart\nversion: 0.2.0 # best practice\n</code></pre> <pre><code>version: 0.27.3\n\nregistries:\n- host: ghcr.io\n\nreleases:\n- name: my\nchart:\nname: oci://ghcr.io/helmwave/unit-test-oci\nversion: 0.1.0 # best practice\n</code></pre>"},{"location":"yaml/#host","title":"host","text":"<p>Host of the registry.</p>"},{"location":"yaml/#username","title":"username","text":"<p>Username for the registry.</p> <p>only if registry is private</p>"},{"location":"yaml/#password","title":"password","text":"<p>Password for the registry.</p> <p>only if registry is private</p>"},{"location":"yaml/#repositories","title":"repositories[]","text":"<p> helm repositories also know as <code>helm repo add</code></p> field required type default name \u2705 string \"\" url \u2705 url \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" force \ud83d\ude45 bool false certFile \ud83d\ude45 string \"\" keyFile \ud83d\ude45 string \"\" caFile \ud83d\ude45 string \"\" insecure_skip_tls_verify \ud83d\ude45 bool false pass_credentials_all \ud83d\ude45 bool false <p>This repository will be stored in a local  helm repositories database.</p>"},{"location":"yaml/#name","title":"name","text":"<p>Local name alias.</p>"},{"location":"yaml/#url","title":"url","text":"<p>URL of the repository.</p>"},{"location":"yaml/#username_1","title":"username","text":"<p>Username for the repository.</p>"},{"location":"yaml/#password_1","title":"password","text":"<p>Password for the repository.</p>"},{"location":"yaml/#force","title":"force","text":"<p>Update existing repository exists if settings differ.</p>"},{"location":"yaml/#releases","title":"releases[]","text":"<p>Almost all options that are here are native  helm options.</p> field required type default <code>helmwave build</code> helm option name \u2705 string \"\" \u2705 namespace \u2705 string \"\" \u2705 chart \u2705 string or object {} \u2705 create_namespace \ud83d\ude45 bool false values \ud83d\ude45 array [] \u2705 tags \ud83d\ude45 array [] \u2705 offline_kube_version \ud83d\ude45 string \"\" \u2705 store \ud83d\ude45 object {} \u2705 depends_on \ud83d\ude45 array [] \u2705 allow_failure \ud83d\ude45 bool false pending_release_strategy \ud83d\ude45 string \"\" wait \ud83d\ude45 bool false wait_for_jobs \ud83d\ude45 bool false timeout \ud83d\ude45 interval 5m max_history \ud83d\ude45 int 0 context \ud83d\ude45 string \"\" description \ud83d\ude45 string \"\" atomic \ud83d\ude45 bool false cleanup_on_fail \ud83d\ude45 bool false devel \ud83d\ude45 bool false disable_hooks \ud83d\ude45 bool false disable_open_api_validation \ud83d\ude45 bool false force \ud83d\ude45 bool false enable_dns \ud83d\ude45 bool false recreate \ud83d\ude45 bool false reset_values \ud83d\ude45 bool false reuse_values \ud83d\ude45 bool false skip_crds \ud83d\ude45 bool false sub_notes \ud83d\ude45 bool false post_renderer \ud83d\ude45 array [] \u2705"},{"location":"yaml/#name_1","title":"name","text":"<p>Release name. I hope you know what it is.</p>"},{"location":"yaml/#namespace","title":"namespace","text":"<p> kubernetes namespace.</p>"},{"location":"yaml/#chart","title":"chart","text":"<p><code>chart</code> can be an object or a string. If it's a string, it will be treated as a <code>name</code>.</p> field required type default name \u2705 string \"\" version \ud83d\ude45 string \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" cafile \ud83d\ude45 string \"\" certfile \ud83d\ude45 string \"\" keyfile \ud83d\ude45 string \"\" insecureskiptlsverify \ud83d\ude45 bool false keyring \ud83d\ude45 string \"\" passcredentialsall \ud83d\ude45 bool false verify \ud83d\ude45 bool false <p>If chart is remote it will be downloaded into <code>.helmwave/charts</code> and downloaded archive will be used during deploy.</p>"},{"location":"yaml/#create_namespace","title":"create_namespace","text":"<p>If set to <code>true</code> Helmwave will create the release namespace if not present.</p>"},{"location":"yaml/#values","title":"values[]","text":"<p><code>values</code> can be an object or a string. If it's a string, it will be treated as a <code>src</code> field.</p> field required type default src \u2705 string \"\" delimiter_left \ud83d\ude45 string \"{{\" delimiter_right \ud83d\ude45 string \"}}\" strict \ud83d\ude45 bool false render \ud83d\ude45 bool true"},{"location":"yaml/#src","title":"src","text":"<p>Path to values file. It can be local or remote.</p>"},{"location":"yaml/#delimiter_left-delimiter_right","title":"delimiter_left, delimiter_right","text":"<p>You can change the delimiter that helmwave uses to render values.</p> <p> example</p>"},{"location":"yaml/#render","title":"render","text":"<p>Allows disabling templating values at all.</p> <p> example</p>"},{"location":"yaml/#strict","title":"strict","text":"<p>Allows to fail if values file doesn't exist.</p> <p> example</p>"},{"location":"yaml/#tags","title":"tags[]","text":"<p>It allows you to choose releases for build.</p> <p>It works with next options for <code>build</code> command</p> <p>Flags</p> <pre><code>--tags value, -t value  It allows you choose releases for build. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--match-all-tags        Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n</code></pre>"},{"location":"yaml/#how-to-work-with-tags-and-match-all-tags","title":"How to work with <code>--tags</code> and <code>--match-all-tags</code>?","text":"<p>Suppose we have next <code>helmwave.yml</code> with 4 releases</p> <ol> <li>redis-a</li> <li>redis-b</li> <li>memcached-a</li> <li>memcached-b</li> </ol> <p></p> <p> example of <code>helmwave.yml</code> for this case.</p> <pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: redis-a\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- a\n- redis\n\n- name: redis-b\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- b\n- redis\n\n- name: memcached-a\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- a\n- memcached\n\n- name: memcached-b\nnamespace: test\nchart:\nname: bitnami/memcached\ntags:\n- b\n- memcached\n</code></pre> Match all redisesMatch the group <code>a</code>Match the group <code>b</code>Match any tagsMatch all tags <pre><code>helmwave build -t redis\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - redis-b@test\n</code></pre> <pre><code>helmwave build -t a [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - memcached-a@test\n</code></pre> <pre><code>helmwave build -t ab\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-b@test\n          - memcached-b@test\n</code></pre> <p>If you know SQL. It looks like that:</p> <pre><code>SELECT * FROM releases WHERE tag = \"redis\" OR tag = \"a\"\n</code></pre> <pre><code>helmwave build -t redis -t a [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - redis-b@test\n          - memcached-a@test\n</code></pre> <p>All that was above, we used the logical <code>OR</code> operator. If you need strongly logic with <code>AND</code> you should use <code>--match-all-tags</code> flag.  This flag changes logic for query releases.</p> <pre><code>helmwave build --match-all-tags -t redis -t a [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n</code></pre>"},{"location":"yaml/#offline_kube_version","title":"offline_kube_version","text":"<p>If <code>offline_kube_version</code> set helmwave will use this version to build plan. Without this option, helmwave will ask  kubernetes for a version.</p> <p><code>offline_kube_version</code> also can help you if you want to use different environments for <code>helmwave build</code> and <code>helmwave up</code>.</p> <p> example</p>"},{"location":"yaml/#store","title":"store","text":"<p>It allows passing your custom fields from <code>helmwave.yml</code> to values.</p> <p> example</p>"},{"location":"yaml/#depends_on","title":"depends_on[]","text":"<p><code>depends_on</code> can be an object or a string. If it's a string, it will be treated as a <code>name</code>.</p> field required type default name \ud83d\ude45 string \"\" tag \ud83d\ude45 string \"\" optional \ud83d\ude45 bool false <p><code>depends_on</code> is a list of releases that allow you to deploy a sequence.</p> <p>Example for 3-tier application</p> <p>graph LR     frontend --&gt; backend --&gt; db;  If you don't see a graph, please reload the page.</p> <p>Your <code>helmwave.yml</code> should look like this:</p> <pre><code>releases:\n- name: frontend\ndepends_on:\n- backend\nnamespace: test\n\n- name: backend\ndepends_on:\n- db\nnamespace: test\n\n- name: db\nallow_failure: false\nnamespace: test\n</code></pre>"},{"location":"yaml/#name_2","title":"name","text":"<p>Name of release (dependency) that has to be installed/upgraded before this release (dependant). If dependency is not in a plan, it will be added to a plan.</p> <p>Name support 2 kind of definitions: uniq name <code>&lt;release-name&gt;@&lt;namespace&gt;</code> or just <code>&lt;release-name&gt;</code>. If namespace is not specified, it will be taken from namespace filed of release.</p> <p>The same configuration can be written in 2 ways:</p> <code>&lt;release-name&gt;</code><code>&lt;release-name&gt;@&lt;namespace&gt;</code> <pre><code>releases:\n- name: backend\nnamespace: test\ndepends_on:\n- name: redis\n\n- name: redis\nnamespace: test\n</code></pre> <pre><code>releases:\n- name: backend\nnamespace: test\ndepends_on:\n- name: redis@test\n\n- name: redis\nnamespace: test\n</code></pre> <p>Both of them will be normalized to <code>redis@test</code> in a planfile.</p>"},{"location":"yaml/#tag","title":"tag","text":"<p>You can include all releases that match this tag to be added as dependencies. If a tag is not in a plan, it will be added to a plan.</p> <p>The planfile (<code>.helmwave/planfile</code> by default) will have a normalized list of releases instead of tags.</p>"},{"location":"yaml/#optional","title":"optional","text":"<p>If dependency is not found in all available releases, helmwave will not fail due to missing dependency.</p> <p>It allows setting explicit dependencies between releases. Dependant release will start upgrading only after all its dependencies finished upgrading</p>"},{"location":"yaml/#allow_failure","title":"allow_failure","text":"<p>Allows all dependant releases to proceed even if release failed.</p>"},{"location":"yaml/#pending_release_strategy","title":"pending_release_strategy","text":"<p>Strategy to handle releases in pending statuses (<code>pending-install</code>, <code>pending-upgrade</code>, <code>pending-rollback</code>)</p> <p>If helmwave tries to upgrade release that is currently in one of the pending statuses, it will follow specified strategy:</p> <ul> <li><code>\"\"</code> (or not specified) - do nothing.  helm will fail in this case;</li> <li><code>rollback</code> - rollback release to a previous version. Upgrade will happen after <code>rollback</code> is complete;</li> <li><code>uninstall</code> - uninstall release. Upgrade will happen after <code>uninstall</code> is complete.</li> </ul>"},{"location":"yaml/#wait","title":"wait","text":"<p>We recommend using <code>wait</code> for all releases. It will wait for all resources to be ready.</p>"},{"location":"yaml/#wait_for_jobs","title":"wait_for_jobs","text":"<p>We recommend using <code>wait_for_jobs</code> for all releases. It will wait for all jobs to be completed.</p>"},{"location":"yaml/#timeout","title":"timeout","text":"<p>Time to wait for release to install.</p> <p>if you enable <code>kubedog</code> this option will be required.</p>"},{"location":"yaml/#max_history","title":"max_history","text":"<p>Limit the maximum number of revisions saved per release. Use 0 for no limit (default 0)</p> Recommendation is using <code>3</code> for this option. <p><code>previous release</code> + <code>current release</code> + <code>next release</code> = <code>3</code></p>"},{"location":"yaml/#context","title":"context","text":"<p>Allows using custom  kubecontext for release.</p> <p>Kubedog can't be enabled when there are releases in multiple contexts.</p>"},{"location":"yaml/#description","title":"description","text":"<p>Additional information about release.</p>"},{"location":"yaml/#atomic","title":"atomic","text":"<p>if set, upgrade process rolls back changes made in case of failed upgrade.</p>"},{"location":"yaml/#cleanup_on_fail","title":"cleanup_on_fail","text":"<p>Allow deletion of new resources created in this upgrade when upgrade fails.</p>"},{"location":"yaml/#devel","title":"devel","text":"<p>Use development versions, too. Equivalent to version '&gt;0.0.0-0'.</p>"},{"location":"yaml/#disable_hooks","title":"disable_hooks","text":"<p>Disable pre/post upgrade hooks</p>"},{"location":"yaml/#disable_open_api_validation","title":"disable_open_api_validation","text":"<p>If set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema</p>"},{"location":"yaml/#force_1","title":"force","text":"<p>Force resource updates through a replacement strategy</p> <p>We don't recommend using this option.</p>"},{"location":"yaml/#enable_dns","title":"enable_dns","text":"<p>Enable DNS resolution in templates.</p>"},{"location":"yaml/#recreate","title":"recreate","text":"<p>Allows deleting and then creating resources (pods) when needed instead of updating.</p> <p>We don't recommend using this option.</p>"},{"location":"yaml/#reset_values","title":"reset_values","text":"<p>When upgrading, reset the values to the ones built into the chart.</p>"},{"location":"yaml/#reuse_values","title":"reuse_values","text":"<p>When upgrading, reuse the last release's values and merge it into the new configuration.</p> <p>We don't recommend using this option.</p>"},{"location":"yaml/#skip_crds","title":"skip_crds","text":"<p>If set, no CRDs will be installed. By default, CRDs are installed if not already present.</p> <p>Be careful with this option.</p> <ul> <li>If you have a release that depends on CRDs, it will fail.</li> <li>Sometimes you should enable <code>installCRD: true</code> in your chart like cert-manager.</li> </ul>"},{"location":"yaml/#sub_notes","title":"sub_notes","text":"<p>If set, render sub chart notes along with the parent. This option determines whether sub-notes are rendered in the chart.</p>"},{"location":"yaml/#post_renderer","title":"post_renderer","text":"<p>You can use custom commands to change rendered manifests.</p>"},{"location":"examples/apps-per-ns/","title":"Apps per namespace","text":"<p>If you want to install each application in your own namespace. </p>"},{"location":"examples/apps-per-ns/#create-the-project","title":"Create the project","text":"<p>Project structure</p> <pre><code>\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u251c\u2500\u2500 values\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 harbor.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 minio.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plantuml.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 renovate.yml\n\u2514\u2500\u2500 vars.yaml\n</code></pre> <p>Step 1. Create <code>helmwave.yml.tpl</code></p> <pre><code>version: 0.27.3\n\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n- name: renovate\nurl: https://docs.renovatebot.com/helm-charts\n- name: stevehipwell\nurl: https://stevehipwell.github.io/helm-charts\n\n\n\n# General options\n.options: &amp;options\nwait: true\nwait_for_jobs: true\nforce: false\ntimeout: 10m\natomic: false\nmax_history: 3\ncreate_namespace: true\n\n\nreleases:\n{{- with readFile \"vars.yaml\" | fromYaml | get \"releases\" }}\n{{ range $v := . }}\n\n#################################\n#                               #\n#      {{ $v | get \"name\" }}\n#                               #\n#################################\n- name: {{ $v | get \"name\" }}\nchart:\nname: {{ $v | get \"repo\" }}/{{ $v | get \"name\" }}\nversion: {{ $v | get \"version\" }}\nnamespace: {{ $v | get \"name\" }}\ntags: [{{ $v | get \"name\" }}]\nvalues:\n- values/{{ $v | get \"name\" }}.yml\n&lt;&lt;: *options\n\n{{ end }}\n{{- end }}\n</code></pre> <p>Step 2. Create <code>vars.yaml</code></p> <p>We will manage list apps with additional <code>vars.yaml</code> file</p> <pre><code>releases:\n- name: harbor\nrepo: bitnami\nversion: 11.0.5\n\n- name: minio\nrepo: bitnami\nversion: 9.0.2\n\n- name: plantuml\nrepo: stevehipwell\nversion: 3.3.0\n\n- name: renovate\nrepo: renovate\nversion: 25.76.1\n</code></pre> <p>Step 3. Render <code>helmwave.yml.tpl</code> -&gt;  <code>helmwave.yml</code></p> <pre><code>helmwave yml\n</code></pre> <p>You will get it</p> <pre><code>version: 0.27.3\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n- name: renovate\nurl: https://docs.renovatebot.com/helm-charts\n- name: stevehipwell\nurl: https://stevehipwell.github.io/helm-charts\n\n# General options\n.options: &amp;options\nwait: true\nwait_for_jobs: true\nforce: false\ntimeout: 10m\natomic: false\nmax_history: 3\ncreate_namespace: true\n\nreleases:\n#################################\n#                               #\n#      harbor\n#                               #\n#################################\n- name: harbor\nchart:\nname: bitnami/harbor\nversion: 11.0.5\nnamespace: harbor\ntags: [harbor]\nvalues:\n- values/harbor.yml\n&lt;&lt;: *options\n\n#################################\n#                               #\n#      minio\n#                               #\n#################################\n- name: minio\nchart:\nname: bitnami/minio\nversion: 9.0.2\nnamespace: minio\ntags: [minio]\nvalues:\n- values/minio.yml\n&lt;&lt;: *options\n\n#################################\n#                               #\n#      plantuml\n#                               #\n#################################\n- name: plantuml\nchart:\nname: stevehipwell/plantuml\nversion: 3.3.0\nnamespace: plantuml\ntags: [plantuml]\nvalues:\n- values/plantuml.yml\n&lt;&lt;: *options\n\n#################################\n#                               #\n#      renovate\n#                               #\n#################################\n- name: renovate\nchart:\nname: renovate/renovate\nversion: 25.76.1\nnamespace: renovate\ntags: [renovate]\nvalues:\n- values/renovate.yml\n&lt;&lt;: *options\n</code></pre> <p>Step 4. Build plan</p> <pre><code>helmwave build\n</code></pre> <p>Step 5. Deploy plan</p> <p>if we want to deploy only <code>plantuml</code></p> <pre><code>helmwave build -t plantuml\nhelmwave up\n</code></pre> <p>looks how to work HELMWAVE_TAGS</p>"},{"location":"examples/apps-per-ns/#cicd-with-gitlab-ci","title":"CI/CD with Gitlab-CI","text":"<pre><code>variables:\nHELMWAVE_LOG_LEVEL: debug\n\ndeploy to prod:\nstage: deploy\nwhen: manual\nenvironment:\nname: prod\nimage:\nname: ghcr.io/helmwave/helmwave:0.27.3\nentrypoint: [\"\"]\nbefore_script:\n- printenv | grep HELMWAVE\nscript:\n- helmwave yml\n- helmwave build\n- helmwave up\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 week\n</code></pre> <p>if you want to deploy only <code>plantuml</code> via CI.</p> <p></p> <p></p>"},{"location":"examples/aws-sm/","title":"AWS secret manager","text":"<p>Project structure</p> <pre><code>\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values-secret.yaml\n</code></pre> <p>Step 1. Create next secret</p> <pre><code>aws secretsmanager create-secret --name hello/foobar --secret-string '{\"foo\":\"bar\"}'\n</code></pre> <p>Step 2. Create <code>helmwave.yml</code></p> <pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: app\nchart: bitnami/nginx\nnamespace: test\nvalues:\n- values-secret.yaml\n</code></pre> <p>Step 3. Create <code>values-secret.yaml</code></p> <pre><code>{{ defineDatasource \"aws\" \"aws+sm:///hello/foobar\" }}\n\nsecret: {{ datasource \"aws\" }}\n</code></pre> <p>Step 4. Run <code>helmwave build --templater gomplate</code></p> <p>You will get <code>secret: {\"foo\":\"bar\"}</code></p>"},{"location":"examples/built-in-release/","title":"Release object","text":"<p>This an example is demonstrating how to use the <code>release</code> object.</p> <p>Project Structure</p> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 _.yml\n\u2514\u2500\u2500 helmwave.yml\n</code></pre> <p>Create <code>helmwave.yml</code></p> <pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: a\nchart: bitnami/nginx\nnamespace: test\nvalues:\n- _.yml\n\n- name: b\nchart: bitnami/nginx\nnamespace: test\nvalues:\n- _.yml\n</code></pre> <p>Create <code>_.yml</code></p> <pre><code>release: {{- toYaml .Release | nindent 2 }}\n</code></pre> <p>Run build</p> <pre><code>helmwave build\n</code></pre> <p>Show rendered values</p> <pre><code>tree .helmwave \n.helmwave\n\u251c\u2500\u2500 manifest\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a@test.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 b@test.yml\n\u251c\u2500\u2500 planfile\n\u2514\u2500\u2500 values\n    \u251c\u2500\u2500 a@test\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml\n    \u2514\u2500\u2500 b@test\n        \u2514\u2500\u2500 454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml\n</code></pre> <code>a</code> values<code>b</code> values <pre><code>release:\nchart:\nname: bitnami/nginx\nname: a\nnamespace: test\nvalues:\n- src: _.yml\ndst: /var/folders/jn/gs32zb3s5939nf71b3836nq40000gr/T/values/a@test/454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml\n</code></pre> <pre><code>release:\nchart:\nname: bitnami/nginx\nname: b\nnamespace: test\nvalues:\n- src: _.yml\ndst: /var/folders/jn/gs32zb3s5939nf71b3836nq40000gr/T/values/b@test/454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml\n</code></pre>"},{"location":"examples/hate-umbrella/","title":"\u2602\ufe0f Umbrella chart is evil","text":"<p>Helmwave is only what you actually need.</p> <p>Why is Umbrella chart evil?</p> <ul> <li>You must keep extra chart.</li> <li>You have new layer for conventional values.</li> <li>Umbrella chart doesn't provide separate your environments.</li> <li>When sub-chart is modified, you need to fix it twice.</li> </ul> <p>Suppose that you need to describe the next architecture.</p> <p>graph LR   frontend --&gt; api --&gt; rabbitmq &amp; minio_s3   consumer --&gt; rabbitmq &amp; minio_s3 &amp; postgresql  If you don't see a graph, please reload the page.</p> <p>Example of helmwave.yml for this architecture.</p> <pre><code>version: 0.27.3\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: stage\nwait: true\nmax_history: 5\n\nreleases:\n- name: frontend\n&lt;&lt;: *options\nchart: charts/frontend\ndepends_on:\n- api\n\n- name: api\n&lt;&lt;: *options\nchart: charts/api\ndepends_on:\n- rabbitmq\n- minio\n\n- name: consumer\n&lt;&lt;: *options\nchart: charts/consumer\ndepends_on:\n- rabbitmq\n- minio\n- postgresql\n\n- name: rabbitmq\n&lt;&lt;: *options\nchart: bitnami/rabbitmq\n\n- name: minio\n&lt;&lt;: *options\nchart: bitnami/minio\n\n- name: postgresql\n&lt;&lt;: *options\nchart: bitnami/postgresql\n</code></pre>"},{"location":"examples/kubedog/","title":"\ud83d\udc36 Kubedog","text":"<p>The first thing you need to do is turn on <code>kubedog</code></p> <pre><code>export HELMWAVE_KUBEDOG_ENABLED=true\n</code></pre> <p>Kubedog will track all your resources by default. For more information, see the annotation's documentation.</p> <p>Project Structure</p> <pre><code>.\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values.yml\n</code></pre> <p>Create <code>helmwave.yml</code></p> <pre><code>version: 0.27.3\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: my1\nchart:\nname: bitnami/redis\nversion: 16.8.5\nvalues:\n- values.yml\nnamespace: my-redis\ncreate_namespace: true\nwait: true\ntimeout: 3m\n</code></pre> <p>Then you should create <code>values.yml</code></p> <pre><code># Uncommented it if you need\n#commonAnnotations:\n#  helmwave.dev/show-service-messages: \"true\"\n#  helmwave.dev/show-logs-only-for-containers: \"redis\"\n\npodAnnotations:\ndatetime: {{ now }}\nblame: {{ env \"USER\" }}\n\nreplicaCount: 1\n\nauth:\nenabled: false\n\nmaster:\npersistence:\nenabled: false\n\nreplica:\npersistence:\nenabled: false\n</code></pre> <p>We are going to use <code>commonAnnotations</code>. </p> <p><code>commonAnnotations</code> is a part of bitnami common library chart.</p> <p>Run</p> <p>You can combine <code>--kubedog</code> and <code>--progress</code></p> <pre><code>helmwave up --build --kubedog\n</code></pre> <p>or </p> <pre><code>export HELMWAVE_KUBEDOG_ENABLED=true\nexport HELMWAVE_AUTO_BUILD=true\nhelmwave up\n</code></pre> <p>Output</p> <p></p>"},{"location":"examples/oci-private/","title":"OCI private","text":"<p>Just add <code>oci://</code> to your chart name and define a registry.</p> <p><code>cat helmwave.yml</code></p> <pre><code>version: 0.27.3\n\nregistries:\n- host: localhost:5000\nusername: &lt;pass_username_here&gt;\npassword: &lt;pass_password_here&gt;\n\nreleases:\n- name: my\nchart:\nname: oci://localhost:5000/my-chart\nversion: 0.2.0 # best practice\n</code></pre>"},{"location":"examples/oci-public/","title":"OCI public","text":"<p>This example demonstrates how to use public repositories with <code>ghcr.io</code></p> <p><code>cat helmwave.yml</code></p> <pre><code>version: 0.27.3\n\nregistries:\n- host: ghcr.io\n\nreleases:\n- name: my\nchart:\nname: oci://ghcr.io/helmwave/unit-test-oci\nversion: 0.1.0 # best practice\n</code></pre>"},{"location":"examples/pass-git-commit/","title":"Restart pods via git-commit","text":"<p>Project Structure</p> <pre><code>.\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values.yml\n</code></pre> <p><code>cat helmwave.yml</code></p> <pre><code>version: 0.27.3\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: my-app\nchart: bitnami/nginx\nvalues:\n- values.yml\nnamespace: my-namespace\ncreate_namespace: true\n</code></pre> <p><code>nginx/template/deployment.yaml</code> looks like that:</p> <pre><code>    ...\nmetadata:  {{- with .Values.podAnnotations }}  annotations:  {{- toYaml . | nindent 8 }}  {{- end }}\n...\n</code></pre> <p>We will pass pod annotations with  <code>values</code></p> <p>Suppose that <code>CI_COMMIT_SHORT_SHA</code> contains commit short sha hash.</p> <p><code>values.yml</code></p> <pre><code>podAnnotations:\ngitCommit: {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}\n</code></pre> <p>Run</p> <pre><code>helmwave build\nhelmwave up\n</code></pre> <p>or <code>helmwave up --build</code></p>"},{"location":"examples/pass-git-tag/","title":"Git tag -&gt; image tag","text":"<p>Suppose <code>my-chart</code> has default <code>values.yaml</code>:</p> <pre><code>image:\nrepository: registry.gitlab.local/example/app\ntag: v1.0.0\n...\n</code></pre> <p>If we need to create CI/CD pipeline, we need use next script</p> <pre><code>helm upgrade --instal my-release my-chart-repo/my-chart-app --set=\"image.tag=$CI_COMMIT_TAG\" -n my-namespace\n</code></pre> <p>HelmWave allows use declarative way to approach this goal.</p> <p>Project Structure</p> <pre><code>.\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values.yml\n</code></pre> <p><code>cat helmwave.yml</code></p> <pre><code>version: 0.27.3\n\nreleases:\n- name: my-release\nchart: my-chart-repo/my-chart-app\nvalues:\n- values.yml\nnamespace: my-namespace\ncreate_namespace: true\n</code></pre> <p><code>cat values.yml</code></p> <p>This values will override default values</p> <pre><code>image:\ntag: {{ env \"CI_COMMIT_TAG\" }}\n</code></pre> <p>Run</p> <pre><code>helmwave build\nhelmwave up\n</code></pre> <p>or <code>helmwave up --build</code></p>"},{"location":"examples/private-env/","title":"Private environment","text":"<p><code>helmwave.yml</code></p> <pre><code>repositories:\n- name: jetstack\nurl: https://charts.jetstack.io\n\nreleases:\n- name: cert-manager\nchart:\nname: jetstack/cert-manager\nversion: v1.12.1\noffline_kube_version: 1.22.2\nnamespace: cert-manager\n</code></pre> <p>Disable diff</p> <p>You can also use <code>local</code></p> <pre><code>export HELMWAVE_DIFF_MODE=none\n</code></pre> <p>build a plan</p> <p>you can also use <code>--charts-cache-dir</code>.</p> <pre><code>helmwave build\n</code></pre> <p>upload plan to private environment</p> <pre><code>whatever you want\n</code></pre> <p>on the private environment</p> <pre><code>helmwave up\n</code></pre>"},{"location":"examples/private-github-repo/","title":"Private GitHub repo","text":"<pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 helmwave.yml.tpl\n</code></pre> <p>Suppose the <code>helmwave.yml.tpl</code> looks like</p> <pre><code>version: 0.27.3\n\nrepositories:\n- name: your-private-git-repo-hosted-charts\nurl: https://{{ requiredEnv \"GITHUB_TOKEN\"}}@raw.githubusercontent.com/foo/bar/main/\n\n\n.options: &amp;options\nnamespace: {{ requiredEnv \"NS\" }}\ncreate_namespace: true\nwait: true\n\n\nreleases:\n- name: hello\nchart:\nname: foo/bar\n&lt;&lt;: *options\n</code></pre> <p>This command will render <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code></p> <pre><code>$ export NS=stage\n$ export GITHUB_TOKEN=my-secret-token\n$ helmwave yml\n[\ud83d\ude43 aka INFO]: \ud83d\udcc4 YML is ready!\n        build plan with next command: helmwave build -f helmwave.yml\n</code></pre> <p>Once applied, your <code>helmwave.yml</code> will look like</p> <pre><code>version: 0.27.3\n\nrepositories:\n- name: your-private-git-repo-hosted-charts\nurl: https://my-secret-token@raw.githubusercontent.com/foo/bar/main/\n\n.options: &amp;options\nnamespace: ips\ncreate_namespace: true\nwait: true\n\nreleases:\n- name: hello\nchart: foo/bar\n&lt;&lt;: *options\n</code></pre>"},{"location":"examples/private-gitlab-repo/","title":"Private GitLab repo","text":"<p>Learn more about GitLab  helm Registry here</p> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 helmwave.yml.tpl\n</code></pre> <p>Suppose the <code>helmwave.yml.tpl</code> looks like</p> <pre><code>version: 0.27.3\n\nrepositories:\n# Docs: https://docs.gitlab.com/ee/user/packages/helm_repository/\n- url: {{ env \"CI_API_V4_URL\" }}/projects/{{env \"CI_PROJECT_ID\" }}/packages/helm/stable\nname: {{ env \"CI_PROJECT_TITLE\" }}\nusername: gitlab-ci-token\npassword: {{ env \"CI_JOB_TOKEN\" }}\n\n\nreleases:\n- name: hello\nchart: {{ env \"CI_PROJECT_TITLE\" }}/my-chart\nnamespace: test\ncreate_namespace: true\n</code></pre> <p>Your <code>.gitlab-ci.yml</code> </p> <pre><code>helmwave:\nstage: deploy\nimage:\nname: ghcr.io/helmwave/helmwave:0.27.3\nentrypoint: [\"\"]\nbefore_script:\n- printenv | grep HELMWAVE\nscript:\n- helmwave yml\n- helmwave build\n- helmwave up\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 week\n</code></pre>"},{"location":"examples/quick-start/","title":"\ud83d\udd30 Quick Start","text":"<ol> <li>\ud83d\udce5 Install helmwave </li> <li> <p>Create <code>helmwave.yml</code></p> <p>Suppose the <code>helmwave.yml</code> representing the desired state of your  helm releases looks like:</p> <pre><code>project: QuickStart\nversion: 0.27.3\n\n# OCI: modern way to get chart from registry\nregistries:\n- host: registry-1.docker.io\n\n.options: &amp;options\nnamespace: my-namespace\ncreate_namespace: true\nwait: true\ntimeout: 1m\nmax_history: 3 # best practice\nchart:\n# For example, we will use bitnami/nats chart, because it's small and fast\nname: oci://registry-1.docker.io/bitnamicharts/nats\nversion: 7.8.3 # best practice\n\n# We will install 2 releases with the same options\nreleases:\n- name: a\n&lt;&lt;: *options\n\n- name: b\n&lt;&lt;: *options\n</code></pre> </li> <li> <p>Build plan</p> <pre><code>helmwave build\n</code></pre> <p>This step generates plan</p> </li> <li> <p>Deploy plan</p> <pre><code>helmwave up\n</code></pre> <p>Output will be like that:</p> <pre><code>[\ud83d\ude43 aka INFO]: \u2705\n    release: a@my-namespace\n[\ud83d\ude43 aka INFO]: \u2705\n    release: b@my-namespace\n[\ud83d\ude43 aka INFO]: Success 2 / 2\n</code></pre> </li> <li> <p>Check \u2714\ufe0f</p> <pre><code>$ :simple-helm: helm list -n my-namespace\nNAME    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION\na       my-namespace    1               2023-06-13 16:25:42.446056 +0400 +04    deployed        nats-7.8.3      2.9.17     \nb       my-namespace    1               2023-06-13 16:25:42.444662 +0400 +04    deployed        nats-7.8.3      2.9.17\n\n$ k get po -n my-namespace                                                                                                                         \nNAME       READY   STATUS    RESTARTS   AGE\na-nats-0   1/1     Running   0          37s\nb-nats-0   1/1     Running   0          36s\n</code></pre> </li> <li> <p>Congratulations! \ud83e\udd73</p> </li> </ol>"},{"location":"examples/single-app-multi-envs/","title":"Single app multi envs","text":"<p>When we work with helm, sometimes we need dynamics chose environment.</p> <pre><code>export CI_ENVIRONMENT_NAME=stage\nhelm upgrade --install my-release my-chart-repo/my-chart-app -f values/_.yml -f values/$CI_ENVIRONMENT_NAME.yaml\n</code></pre> <p>Project structure</p> <pre><code>.\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u2514\u2500\u2500 values\n    \u251c\u2500\u2500 _.yml\n    \u251c\u2500\u2500 prod.yml\n    \u251c\u2500\u2500 qa.yml\n    \u2514\u2500\u2500 stage.yml\n</code></pre> <p><code>cat helmwave.yml.tpl</code></p> <pre><code>version: 0.27.3\n\nreleases:\n- name: my-release\nchart:\nname: my-chart-repo/my-chart-app\n# yaml says \"Who is the last one is right.\"\nvalues:\n# Default\n- values/_.yml\n# For specific ENVIRONMENT\n- values/{{ requiredEnv \"CI_ENVIRONMENT_NAME\" }}.yml\ncreate_namespace: true\n</code></pre> <p><code>cat values/_.yml</code></p> <pre><code>image:\ntag: {{ env \"CI_COMMIT_TAG\" }}\n\npodAnnotations:\ngitCommit: {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}\n</code></pre> <p><code>cat values/prod.yml</code></p> <pre><code>replicaCount: 6\n</code></pre> <p><code>cat values/qa.yml</code></p> <pre><code>replicaCount: 2\n</code></pre> <p><code>cat values/stage.yml</code></p> <pre><code>replicaCount: 4\n</code></pre> <p>Run</p> <pre><code>export CI_ENVIRONMENT_NAME=stage\nhelmwave yml\nhelmwave build\nhelmwave up\n</code></pre> <p>or in one command </p> <pre><code>helmwave up --build --yml\n</code></pre>"},{"location":"examples/store-greeting-hello/","title":"How to use Store","text":"<p>Project Structure</p> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 a.yml\n\u251c\u2500\u2500 b.yml\n\u2514\u2500\u2500 helmwave.yml\n</code></pre> <p><code>cat helmwave.yml</code></p> <pre><code>releases:\n- name: a\nchart: my/a\nstore:\nmsg: hello\nvalues:\n- a.yml\n\n- name: b\nchart: my/b\nstore:\nmsg: hello\nvalues:\n- b.yml\n</code></pre> <p><code>cat a.yml</code></p> <pre><code>image:\nrepository: nginx\n\ngreeting: {{ .Release.Store.msg }}\n</code></pre> <p><code>cat b.yml</code></p> <pre><code>image:\ntag: v1.0.0\n\nmessage: {{ .Release.Store.msg }} world\n</code></pre> <p>After running <code>helmwave build</code> you get rendered values inside <code>.helmwave/values</code>:</p> <p><code>a.yml</code></p> <pre><code>image:\nrepository: nginx\n\ngreeting: hello\n</code></pre> <p><code>b.yml</code></p> <pre><code>image:\ntag: v1.0.0\n\nmessage: hello world\n</code></pre>"},{"location":"examples/values-delimiter-flags/","title":"Delimiter flags for values","text":"<p>Sometimes we need to include strings in values that will be templated by  helm itself (via <code>tpl</code> function). In this case we can change helmwave delimiters, so it won't render foreign expressions.</p> <p><code>cat values.yml</code></p> <pre><code>## Prometheus Exporter / Metrics\n##\nmetrics:\nservice:\nannotations:\nservice_name: [[.Release.Store.metadata | quote]]\nprometheus.io/scrape: \"true\"\nprometheus.io/port: \"{{ .Values.metrics.service.port }}\"\n</code></pre> <p><code>cat helmwave.yml</code> <pre><code>version: 0.27.3\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: nginx\n&lt;&lt;: *options\nchart: bitnami/nginx\nstore:\nmetadata: 123\nvalues:\n- src: values.yml\ndelimiter_left: \"[[\"\ndelimiter_right: \"]]\"\n</code></pre></p>"},{"location":"examples/values-render-flag/","title":"Render flag for values","text":"<p>Sometimes we need to disable render values. For example prometheus rules.</p> <p><code>cat values.yml</code></p> <pre><code>## Prometheus Exporter / Metrics\n##\nmetrics:\nservice:\nannotations:\nprometheus.io/scrape: \"true\"\nprometheus.io/port: \"{{ .Values.metrics.service.port }}\"\n</code></pre> <p><code>cat helmwave.yml</code> <pre><code>version: 0.27.3\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: nginx\n&lt;&lt;: *options\nchart: bitnami/nginx\nvalues:\n- src: values.yml\nrender: false\n</code></pre></p>"},{"location":"examples/values-strict-flag/","title":"Strict flag for values","text":"<p>Helmwave will fail when file does not exist.</p> <p><code>cat helmwave.yml</code></p> <pre><code>version: 0.27.3\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: nginx\n&lt;&lt;: *options\nchart: bitnami/nginx\nvalues:\n- src: this_file_does_not_exist.yml\nstrict: true\n</code></pre>"},{"location":"examples/vault/","title":"Vault","text":"<p>Project structure</p> <pre><code>\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values-secret.yaml\n</code></pre> <p>Step 1. Create next secret</p> <pre><code>vault kv put secret/test hello=world </code></pre> <p>Step 2. Create <code>helmwave.yml</code></p> <pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: app\nchart: bitnami/nginx\nnamespace: test\nwait: true\nvalues:\n- values-secret.yaml\n</code></pre> <p>Step 3. Create <code>values-secret.yaml</code></p> <pre><code>{{ defineDatasource \"vault\" \"vault:///secret/data/test\" }} # `data` is required for vault kv2\n\nsecret: {{ (ds \"vault\").data.hello }}\nrevesion_of_secret: {{ (ds \"vault\").metadata.version }}\n</code></pre> <p>Step 4. Run <code>helmwave build --templater gomplate</code></p> <p>You will get </p> <pre><code>secret: world\nrevision_of_secret: 2\n</code></pre>"},{"location":"examples/vault/#debug-with-gomplate","title":"Debug with gomplate","text":"<ol> <li>install gomplate binary</li> <li>run it in your console</li> </ol> <pre><code>gomplate -d \"vault=vault+https:///secret/data/test\" -i '{{(ds \"vault\").metadata.version}}'\ngomplate -d \"vault=vault+https:///secret/data/test\" -i '{{(ds \"vault\").data.hello}}'\n</code></pre> <p>see gomplate docs here</p>"}]}