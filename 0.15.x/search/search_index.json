{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"anno/","title":"\ud83d\udcd4 Annotations","text":""},{"location":"anno/#how-to-use","title":"How to use?","text":"<p>You should add an annotation to your Deployment / StatefulSet / Jobs / DaemonSet</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: api\nspec:\n...\ntemplate:\nmetadata:\nannotations:\nhelmwave.dev/show-service-messages: \"true\"\n</code></pre>"},{"location":"anno/#annotations-for-the-kubedog","title":"Annotations for the kubedog \ud83d\udc36","text":"<p>Danger</p> <p>Kubedog currently in beta.</p> <p>inspired by werf annotations</p> <p>First step you need enable kubedog for helmwave.</p> <pre><code>export HELMWAVE_KUBEDOG_ENABLED=true\n</code></pre>"},{"location":"anno/#helmwavedevtrack-termination-mode","title":"<code>helmwave.dev/track-termination-mode</code>","text":"<p>Defines a condition when helmwave should stop tracking of the resource:</p> <ul> <li><code>WaitUntilResourceReady</code> (default) \u2014 the entire deployment process would monitor and wait for the readiness of the   resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all   resources to be ready.</li> <li><code>NonBlocking</code> \u2014 the resource is tracked only if there are other resources that are not yet ready.</li> </ul>"},{"location":"anno/#helmwavedevfail-mode","title":"<code>helmwave.dev/fail-mode</code>","text":"<p>Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process:</p> <ul> <li><code>FailWholeDeployProcessImmediately</code> (default) \u2014 the entire deploy process will fail with an error if an error occurs   for some resource.</li> <li><code>HopeUntilEndOfDeployProcess</code> \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and   continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource   back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again.</li> <li><code>IgnoreAndContinueDeployProcess</code> \u2014 resource errors do not affect the deployment process.</li> </ul>"},{"location":"anno/#helmwavedevfailures-allowed-per-replica","title":"<code>helmwave.dev/failures-allowed-per-replica</code>","text":"<p>By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode.</p> <ul> <li>NUMBER</li> </ul>"},{"location":"anno/#helmwavedevlog-regex","title":"<code>helmwave.dev/log-regex</code>","text":"<p>Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwavedevlog-regex-for-container","title":"<code>helmwave.dev/log-regex-for-{container}</code>","text":"<p>Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwavedevskip-logs","title":"<code>helmwave.dev/skip-logs</code>","text":"<p>Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"anno/#helmwavedevskip-logs-for-containers","title":"<code>helmwave.dev/skip-logs-for-containers</code>","text":"<p>Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwavedevshow-logs-only-for-containers","title":"<code>helmwave.dev/show-logs-only-for-containers</code>","text":"<p>Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwavedevshow-service-messages","title":"<code>helmwave.dev/show-service-messages</code>","text":"<p>Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"ci/","title":"\ud83e\uddcb Continuous Integration","text":"<p>Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind.</p> <p>Let's see how we can get it working on popular CI software.</p>"},{"location":"ci/#github-action","title":"GitHub action","text":"<ul> <li>official github action</li> </ul>"},{"location":"ci/#gitlab-ci","title":"Gitlab-CI","text":"<pre><code>variables:\nHELMWAVE_LOG_LEVEL: trace\n\nhelmwave:\nstage: deploy\nenvironment:\nname: \"ref/$CI_COMMIT_REF_SLUG\"\nimage:\nname: diamon/helmwave:0.15.1\nentrypoint: [\"\"]\nscript:\n- helmwave up --build\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 week\n</code></pre>"},{"location":"cli/","title":"\ud83d\udee0 CLI Reference","text":"<pre><code>NAME:\n   helmwave - is like docker-compose for helm\n\nUSAGE:\n   helmwave [global options] command [command options] [arguments...]\n\nVERSION:\n   0.15.1\n\nDESCRIPTION:\n   This tool helps you compose your helm releases!\n   0. $ helmwave yml\n   1. $ helmwave build\n   2. $ helmwave up\n\nCOMMANDS:\n   build, plan                                        \ud83c\udfd7 Build a plan\n   diff, vs                                           \ud83c\udd9a Differences between plan1 and plan2\n   up, install, apply, sync, deploy                   \ud83d\udea2 Apply your plan\n   list, ls                                           \ud83d\udc40 List of deployed releases\n   rollback                                           \u23ee  Rollback your plan\n   status                                             \ud83d\udc41\ufe0f Status of deployed releases\n   down, uninstall, destroy, delete, del, rm, remove  \ud83d\udd2a Delete all\n   validate, check, lint                              \ud83d\udec2 Validate your plan\n   yml                                                \ud83d\udcc4 Render helmwave.yml.tpl -&gt; helmwave.yml\n   version, ver                                       Show shorts version\n   completion                                         Generate completion script\n   help, h                                            Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --log-format value         You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT]\n   --log-level value          You can set: [ debug | info | warn  | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL]\n   --log-color                Force color (default: true) [$HELMWAVE_LOG_COLOR]\n   --kubedog-log-width value  Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH]\n   --help, -h                 show help (default: false)\n   --version, -v              print the version (default: false)\n</code></pre>"},{"location":"cli/#step-0-yml","title":"step #0: yml","text":"<p>It allows render <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code></p> <p>Options</p> <pre><code>--tpl value             Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--file value, -f value  Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML]\n</code></pre>"},{"location":"cli/#step-1-build","title":"step #1: build","text":"<p>This command generates <code>.helmwave/</code> </p> <pre><code>--plandir value         Path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR]\n--tags value, -t value  It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--match-all-tags        Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--file value, -f value  Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML]\n--diff-wide value       Show line around change (default: 5) [$HELMWAVE_DIFF_WIDE]\n</code></pre>"},{"location":"cli/#step-2-working-with-plan","title":"step #2: Working with plan","text":""},{"location":"cli/#up","title":"up","text":"<p>Helmwave will install repositories and helm-releases from plan.</p>"},{"location":"cli/#down","title":"down","text":"<p>Helmwave will uninstall helm-releases from plan.</p>"},{"location":"cli/#ls","title":"ls","text":"<p>Helmwave try getting list of helm-releases from plan.</p>"},{"location":"cli/#status","title":"status","text":"<p>Helmwave try getting status of helm-releases from plan.</p>"},{"location":"cli/#rollback","title":"rollback","text":"<p>Helmwave will rollback helm-releases from plan.</p>"},{"location":"cli/#validate","title":"validate","text":"<p>Helmwave will validate plan.</p>"},{"location":"cli/#logs","title":"Logs","text":"<p>Logs options. Helmwave use logrus as internal logger.</p>"},{"location":"cli/#log-format","title":"Log Format","text":"<p>Helmwave supports several log-format</p> features <code>text</code> <code>json</code> <code>pad</code> <code>emoji</code> (default) Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave"},{"location":"cli/#log-level","title":"Log Level","text":"_ <code>info</code> (default) <code>warn</code> <code>debug</code> <code>fatal</code> <code>panic</code> <code>trace</code> general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests, bug report \u274c \u274c \u274c \u274c \u274c \u2705 <p><code>info</code> or <code>debug</code> is preferred.</p>"},{"location":"cli/#how-to-use","title":"How to use?","text":"<pre><code>helmwave &lt;cmd&gt; --log-color=true --log-level=debug --log-format=pad\n</code></pre> <p>or</p> <pre><code>export HELMWAVE_LOG_FORMAT=pad\nexport HELMWAVE_LOG_LEVEL=debug\nexport HELMWAVE_LOG_COLOR=true\nhelmwave &lt;cmd&gt;\n</code></pre>"},{"location":"cli/#get-version","title":"Get Version","text":""},{"location":"cli/#long-version","title":"Long version","text":"<pre><code>$ helmwave --version  \nhelmwave version 0.15.1\n\n$ helmwave -v\nhelmwave version 0.15.1\n</code></pre>"},{"location":"cli/#short-version","title":"Short version","text":"<pre><code>$ helmwave version\n0.15.1\n\n$ helmwave ver\n0.15.1\n</code></pre>"},{"location":"cli/#completion","title":"Completion","text":""},{"location":"cli/#bash","title":"Bash","text":"<p>Add this code to your ~/.bashrc</p> <pre><code>source &lt;(helmwave completion bash)\n</code></pre> <pre><code>echo \"source &lt;(helmwave completion bash)\" &gt;&gt; ~/.bashrc\n</code></pre> <p></p>"},{"location":"cli/#zsh","title":"ZSH","text":"<p>Add this code to your ~/.zshrc</p> <pre><code>source &lt;(helmwave completion zsh)\n</code></pre> <pre><code>echo \"source &lt;(helmwave completion zsh)\" &gt;&gt; ~/.zshrc\n</code></pre> <p></p>"},{"location":"install/","title":"\ud83d\udce5 Installation","text":"<p>You can install the pre-compiled binary from  releases,  packages, use Docker or compile from the source.</p> <p>Here are the steps for each of them:</p>"},{"location":"install/#mac-os","title":"\ud83c\udf4f Mac OS","text":"<p>Download one of releases</p> <p>Install with  brew</p> <pre><code>brew install helmwave/tap/helmwave\n</code></pre> <p>or use wget <pre><code>export VERSION=0.15.1\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_darwin_amd64.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre></p>"},{"location":"install/#linux","title":"\ud83d\udc27 Linux","text":"<p>Download one of releases</p> <pre><code>export VERSION=0.15.1\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_linux_amd64.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#windows","title":"\ud83e\ude9f Windows","text":"<p>We haven't tried running this on Windows.</p> <p>Download one of releases</p>"},{"location":"install/#run-as-a-container","title":"Run as a container","text":"<p>We use 2 docker registries. </p> Registry URL project page Docker hub https://hub.docker.com view Github Container registry https://ghcr.io view <pre><code>docker pull diamon/helmwave\ndocker pull ghcr.io/helmwave/helmwave\n</code></pre> <p>Use specific version</p> <pre><code>docker pull diamon/helmwave:0.15.1\ndocker pull ghcr.io/helmwave/helmwave:0.15.1\n\ndocker run --entrypoint=ash -it --rm --name helmwave ghcr.io/helmwave/helmwave:0.15.1\n# helmwave version\n0.15.1\n#\n</code></pre> <p>Use scratch image</p> <p>scratch image run with nobody user.</p> <pre><code>docker pull diamon/helmwave:scratch\ndocker pull ghcr.io/helmwave/helmwave:scratch\n\ndocker run ghcr.io/helmwave/helmwave:0.15.1-scratch version\n0.15.1\n</code></pre> <p>Use scratch image with specific helmwave version</p> <pre><code>docker pull diamon/helmwave:0.15.1-scratch\ndocker pull ghcr.io/helmwave/helmwave:0.15.1-scratch\n</code></pre>"},{"location":"install/#install-with-go-get","title":"Install with go get","text":"<pre><code>export VERSION=0.15.1\nGO111MODULE=on go get github.com/helmwave/helmwave/cmd/helmwave@$VERSION\n</code></pre>"},{"location":"install/#compile-from-source","title":"Compile from source","text":"<pre><code>git clone git@github.com:helmwave/helmwave.git\ncd helmwave\ngo build ./cmd/helmwave\nmv -f helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#install-with-marcosnilsbin","title":"Install with marcosnils/bin","text":"<pre><code>bin install github.com/helmwave/helmwave\n</code></pre>"},{"location":"tpl/","title":"\ud83d\udcc4 Templating","text":"<p>Helmwave uses Go templates for templating.</p> <p>Helmwave supports all built-in functions / sprig / gomplate / custom.</p>"},{"location":"tpl/#sprig","title":"Sprig","text":"<p>If you've ever written helm charts, then you're already familiar with it.</p> <p>http://masterminds.github.io/sprig/</p>"},{"location":"tpl/#gomplate","title":"Gomplate","text":"<p>Since v0.14.0. Helmwave works with Gomplate.</p>"},{"location":"tpl/#how-to-enable-gomplate-for-v0140-helmwave","title":"How to enable gomplate for v0.14.0 helmwave","text":"<p>helmwave.yml</p> <pre><code>template:\ngomplate:\nenabled: true\n</code></pre>"},{"location":"tpl/#usage","title":"Usage","text":"<pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\ntemplate:\ngomplate:\nenabled: true\ndata:\nsources:\nsecret:\nurl:\nscheme: aws+sm\npath: 'hello/foobar'\n\nreleases:\n- name: app\nchart:\nname: bitnami/nginx\nnamespace: test\nvalues:\n- vaules-secret.yaml\n</code></pre>"},{"location":"tpl/#issues","title":"Issues","text":"<ul> <li>https://github.com/helmwave/helmwave/issues/159</li> <li>https://github.com/helmwave/helmwave/issues/103</li> </ul>"},{"location":"tpl/#custom","title":"Custom","text":"<ul> <li><code>toYaml</code> marshals a map into a string</li> <li><code>fromYaml</code> reads a golang string and generates a map</li> <li><code>readFile</code> get file as string</li> <li><code>hasKey</code> get true if field is exists</li> <li><code>get</code> (Sprig's original <code>get</code> is available as <code>sprigGet</code>)</li> <li><code>setValueAtPath</code> PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE</li> <li><code>requiredEnv</code> The requiredEnv function allows you to declare a particular environment variable as required for   template rendering. If the environment variable is unset or empty, the template rendering will fail with an error   message.</li> </ul>"},{"location":"yaml/","title":"Yaml","text":"<p>works on helm v3.7.1</p> <pre><code>project: Test07\nversion: dev\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\nusername: \"\"\npassword: \"\"\ncertfile: \"\"\nkeyfile: \"\"\ncafile: \"\"\ninsecureskiptlsverify: false\nforce: false\nallow_faulure: true\nreleases:\n- store:\npullPolicy: Always\nchart:\nname: bitnami/nginx\ncafile: \"\"\ncertfile: \"\"\nkeyfile: \"\"\ninsecureskiptlsverify: false\nkeyring: \"\"\npassword: \"\"\nrepourl: \"\"\nusername: \"\"\nverify: false\nversion: \"\"\nname: nginx\nnamespace: test\ndescription: \"\"\ndepends_on: []\nvalues: - .helmwave/values/nginx@test/5ae83192a2a53eec01dee5207fcf3cccbc5af87f.yml\n- tests/07_values.yaml\ntags: []\ntimeout: 0s\nmaxhistory: 0\ncreatenamespace: false\nresetvalues: false\nrecreate: false\nforce: false\natomic: false\ncleanuponfail: false\nsubnotes: false\ndisablehooks: false\ndisableopenapivalidation: false\nwaitforjobs: false\nwait: false\nskipcrds: false\ndevel: false\nreusevalues: false\n</code></pre>"},{"location":"yaml/#project","title":"Project","text":"<p>Reserved for future.</p>"},{"location":"yaml/#version","title":"Version","text":"<p>Check current version and project version.</p> <p>In the future it is planned to be used for major compatibility. </p>"},{"location":"yaml/#repositories","title":"Repositories[]","text":"field required type default name \u2705 string \"\" url \u2705 url \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" certfile \ud83d\ude45 string \"\" keyfile \ud83d\ude45 string \"\" cafile \ud83d\ude45 string \"\" insecureskiptlsverify \ud83d\ude45 bool false force \ud83d\ude45 bool false"},{"location":"yaml/#force","title":"force","text":"<p>Don't skip if repository exists.</p>"},{"location":"yaml/#releases","title":"Releases[]","text":"field required type default name \u2705 string \"\" namespace \u2705 string \"\" chart.name \u2705 string \"\" chart.username \ud83d\ude45 string \"\" chart.password \ud83d\ude45 string \"\" chart.certfile \ud83d\ude45 string \"\" chart.keyfile \ud83d\ude45 string \"\" chart.cafile \ud83d\ude45 string \"\" chart.insecureskiptlsverify \ud83d\ude45 bool false description \ud83d\ude45 string \"\" depends_on \ud83d\ude45 array [] values \ud83d\ude45 array [] tags \ud83d\ude45 array [] store \ud83d\ude45 object {} timeout \ud83d\ude45 interval 0s maxhistory \ud83d\ude45 int 0 createnamespace \ud83d\ude45 bool false resetvalues \ud83d\ude45 bool false recreate \ud83d\ude45 bool false force \ud83d\ude45 bool false atomic \ud83d\ude45 bool false cleanuponfail \ud83d\ude45 bool false subnotes \ud83d\ude45 bool false disablehooks \ud83d\ude45 bool false disableopenapivalidation \ud83d\ude45 bool false waitforjobs \ud83d\ude45 bool false wait \ud83d\ude45 bool false skipcrds \ud83d\ude45 bool false devel \ud83d\ude45 bool false reusevalues \ud83d\ude45 bool false"},{"location":"yaml/#store","title":"\ud83d\uddf3\ufe0f Store","text":"<p>It allows to pass you custom fields from helmwave.yml to values.</p> <p>It works when you call <code>$ helmwave build</code></p>"},{"location":"yaml/#depends_on","title":"depends_on","text":"<p>It allows waiting releases</p> <p>It works when you call <code>$ helmwave up</code></p> <p>Example for 3-tier application</p> graph LR;   frontend --&gt; backend --&gt; db;  <p>Your helmwave will</p> <pre><code>releases:\n- name: frontend\ndepends_on: backend\n\n- name: backend\ndepends_on: db\n\n- name: db\nallow_failure: false\n</code></pre> <p>When <code>allow_failure</code> is set true. It allows the installation to proceed.</p>"},{"location":"yaml/#tags","title":"\ud83d\udd16 Tags","text":"<p>It allows you to choose releases for build</p> <p>It works with next options when you call <code>$ helmwave build</code>:</p> <pre><code>--tags value, -t value  It allows you choose releases for build. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--match-all-tags        Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n</code></pre>"},{"location":"yaml/#matching-with-tags","title":"Matching with tags","text":"<p>Suppose we have next <code>helmwave.yml</code> with 4 releases.</p> <ol> <li>redis-a</li> <li>redis-b</li> <li>memcached-a</li> <li>memcached-b</li> </ol> <p></p> <pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: redis-a\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- a\n- redis\n\n- name: redis-b\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- b\n- redis\n\n- name: memcached-a\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- a\n- memcached\n\n\n- name: memcached-b\nnamespace: test\nchart:\nname: bitnami/memcached\ntags:\n- b\n- memcached\n</code></pre> <p>Match all redis</p> <pre><code>helmwave build -t redis\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - redis-b@test\n</code></pre> <p>Match the group <code>a</code></p> <pre><code>helmwave build -t a [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - memcached-b@test\n</code></pre> <p>Match multiply group.</p> <p>If you know SQL. It looks like that:</p> <pre><code>SELECT * FROM releases WHERE tag = \"redis\" OR tag = \"a\"\n</code></pre> <pre><code>helmwave build -t redis -t a\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - redis-b@test\n          - memcached-a@test\n</code></pre> <p>All that was above, we used the logical <code>OR</code> operator. If you need strongly logic with <code>AND</code> you should use <code>--match-all-tags</code> flag.  This flag changes logic for query releases.</p> <p>If you know SQL. It looks like that:</p> <pre><code>SELECT * FROM releases WHERE tag = \"redis\" AND tag = \"a\"\n</code></pre> <pre><code>helmwave build -t redis -t a --match-all-tags\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n</code></pre>"},{"location":"yaml/#createnamespace","title":"createnamespace","text":"<p>if <code>true</code> Helmwave will create namespace for release.</p>"},{"location":"examples/","title":"Index","text":""},{"location":"examples/#managed-environments-for-an-app","title":"Managed environments for an app","text":"<pre><code>version: 0.15.1\n\n.options: &amp;options\nwait: true\nnamespace: test\n\nreleases:\n- name: app\nchart:\nname: charts/backend\n&lt;&lt;: *options\ntags:\n- app\n- product\nvalues:\n# all products &amp; all envs\n- values/product/_/_.yml\n# all products &amp; an env\n- values/product/_/{{ requiredEnv \"CI_ENVIRONMENT\" }}.yml\n# a product &amp; all envs\n- values/product/app/_.yml\n# a product &amp; an env\n- values/product/app/{{ requiredEnv \"CI_ENVIRONMENT\" }}.yml\n</code></pre> <p>This example does something similar to this</p> <pre><code>export CI_ENVIRONMENT=stage\n\nhelm upgrade --install app charts/backend \\\n--namespace test --wait \\\n-f values/product/_/_.yml \\\n-f values/product/_/$CI_ENVIRONMENT.yml \\\n-f values/product/app/_.yml \\\n-f values/product/app/$CI_ENVIRONMENT.yml\n</code></pre>"},{"location":"examples/#how-to-use-secret-manager","title":"How to use secret manager?","text":"<p>Step 1. Create next secret</p> <pre><code>aws secretsmanager create-secret --name hello/foobar --secret-string '{\"foo\":\"bar\"}'\n</code></pre> <p>Step 2. Create <code>helmwave.yml</code></p> <pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\ntemplate:\ngomplate:\nenabled: true\ndata:\nsources:\nsecret:\nurl:\nscheme: aws+sm\npath: 'hello/foobar'\n\nreleases:\n- name: app\nchart:\nname: bitnami/nginx\nnamespace: test\nvalues:\n- vaules-secret.yaml\n</code></pre> <p>Step 3. Create <code>vaules-secret.yaml</code></p> <pre><code>secret: {{ datasource \"secret\" }}\n</code></pre> <p>Step 4. Run <code>helmwave build</code></p> <p>You will get <code>secret: {\"foo\":\"bar\"}</code></p>"}]}