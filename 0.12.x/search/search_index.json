{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"anno/","text":"\ud83d\udcd4 Annotations How to use? You should add annotation to your deployment / statefulset / jobs / daemonset apiVersion : apps/v1 kind : Deployment metadata : name : api spec : ... template : metadata : annotations : gitCommit : 5b4c2ff5 helmwave.dev/show-service-messages : \"true\" Annotations for the kubedog \ud83d\udc36 inspired by werf annotations First step you need enable kubedog for helmwave. export HELMWAVE_KUBEDOG_ENABLED = true helmwave.dev/track-termination-mode Defines a condition when helmwave should stop tracking of the resource: WaitUntilResourceReady (default) \u2014 the entire deployment process would monitor and wait for the readiness of the resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all resources to be ready. NonBlocking \u2014 the resource is tracked only if there are other resources that are not yet ready. helmwave.dev/fail-mode Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process: FailWholeDeployProcessImmediately (default) \u2014 the entire deploy process will fail with an error if an error occurs for some resource. HopeUntilEndOfDeployProcess \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again. IgnoreAndContinueDeployProcess \u2014 resource errors do not affect the deployment process. helmwave.dev/failures-allowed-per-replica By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode. NUMBER helmwave.dev/log-regex Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX helmwave.dev/log-regex-for-{container} Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX helmwave.dev/skip-logs Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. \"true\"|\"false\" helmwave.dev/skip-logs-for-containers Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator helmwave.dev/show-logs-only-for-containers Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator helmwave.dev/show-service-messages Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process. \"true\"|\"false\"","title":"\ud83d\udcd4 Annotations"},{"location":"anno/#annotations","text":"","title":"\ud83d\udcd4 Annotations"},{"location":"anno/#how-to-use","text":"You should add annotation to your deployment / statefulset / jobs / daemonset apiVersion : apps/v1 kind : Deployment metadata : name : api spec : ... template : metadata : annotations : gitCommit : 5b4c2ff5 helmwave.dev/show-service-messages : \"true\"","title":"How to use?"},{"location":"anno/#annotations-for-the-kubedog","text":"inspired by werf annotations First step you need enable kubedog for helmwave. export HELMWAVE_KUBEDOG_ENABLED = true","title":"Annotations for the kubedog \ud83d\udc36"},{"location":"anno/#helmwavedevtrack-termination-mode","text":"Defines a condition when helmwave should stop tracking of the resource: WaitUntilResourceReady (default) \u2014 the entire deployment process would monitor and wait for the readiness of the resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all resources to be ready. NonBlocking \u2014 the resource is tracked only if there are other resources that are not yet ready.","title":"helmwave.dev/track-termination-mode"},{"location":"anno/#helmwavedevfail-mode","text":"Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process: FailWholeDeployProcessImmediately (default) \u2014 the entire deploy process will fail with an error if an error occurs for some resource. HopeUntilEndOfDeployProcess \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again. IgnoreAndContinueDeployProcess \u2014 resource errors do not affect the deployment process.","title":"helmwave.dev/fail-mode"},{"location":"anno/#helmwavedevfailures-allowed-per-replica","text":"By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode. NUMBER","title":"helmwave.dev/failures-allowed-per-replica"},{"location":"anno/#helmwavedevlog-regex","text":"Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX","title":"helmwave.dev/log-regex"},{"location":"anno/#helmwavedevlog-regex-for-container","text":"Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX","title":"helmwave.dev/log-regex-for-{container}"},{"location":"anno/#helmwavedevskip-logs","text":"Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. \"true\"|\"false\"","title":"helmwave.dev/skip-logs"},{"location":"anno/#helmwavedevskip-logs-for-containers","text":"Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator","title":"helmwave.dev/skip-logs-for-containers"},{"location":"anno/#helmwavedevshow-logs-only-for-containers","text":"Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator","title":"helmwave.dev/show-logs-only-for-containers"},{"location":"anno/#helmwavedevshow-service-messages","text":"Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process. \"true\"|\"false\"","title":"helmwave.dev/show-service-messages"},{"location":"ci/","text":"\ud83e\uddcb Continuous Integration Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind. Let's see how we can get it working on popular CI software. Github action official github action Gitlab-CI variables : HELMWAVE_LOG_LEVEL : debug helmwave-deploy : stage : deploy environment : name : \"ref/$CI_COMMIT_REF_SLUG\" image : name : diamon/helmwave:0.9.3 entrypoint : [ \"\" ] script : - helmwave deploy stop environment : stage : deploy image : name : lachlanevenson/k8s-kubectl:v1.18.4 entrypoint : [ \"\" ] variables : GIT_STRATEGY : none script : - kubectl delete ns $CI_COMMIT_REF_SLUG when : manual environment : name : \"ref/$CI_COMMIT_REF_SLUG\" action : stop","title":"\ud83e\uddcb Continuous Integration"},{"location":"ci/#continuous-integration","text":"Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind. Let's see how we can get it working on popular CI software.","title":"\ud83e\uddcb Continuous Integration"},{"location":"ci/#github-action","text":"official github action","title":"Github action"},{"location":"ci/#gitlab-ci","text":"variables : HELMWAVE_LOG_LEVEL : debug helmwave-deploy : stage : deploy environment : name : \"ref/$CI_COMMIT_REF_SLUG\" image : name : diamon/helmwave:0.9.3 entrypoint : [ \"\" ] script : - helmwave deploy stop environment : stage : deploy image : name : lachlanevenson/k8s-kubectl:v1.18.4 entrypoint : [ \"\" ] variables : GIT_STRATEGY : none script : - kubectl delete ns $CI_COMMIT_REF_SLUG when : manual environment : name : \"ref/$CI_COMMIT_REF_SLUG\" action : stop","title":"Gitlab-CI"},{"location":"cli/","text":"\ud83d\udee0 CLI Reference NAME: helmwave - composer for helm USAGE: helmwave [global options] command [command options] [arguments...] VERSION: 0.11.0 DESCRIPTION: \ud83c\udfd6 This tool helps you compose your helm releases! COMMANDS: yml \ud83d\udcc4 Render helmwave.yml.tpl -> helmwave.yml planfile, plan \ud83d\udcdc Generate planfile to plandir deploy, apply, sync, release \ud83d\udee5 Deploy your helmwave! manifest, manifest \ud83d\udee5 Fake Deploy version Print helmwave version status Show release status ls, list List deployed releases help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL_FILE] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_FILE, $HELMWAVE_YAML_FILE, $HELMWAVE_YML_FILE] --plan-dir value It keeps your state via planfile (default: \".helmwave/\") [$HELMWAVE_PLAN_DIR] --tags value, -t value It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS] --parallel helm install It allows you call helm install in parallel mode (default: true) [$HELMWAVE_PARALLEL] --log-format value You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT] --log-level value You can set: [ debug | info | warn | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL] --log-color Force color (default: true) [$HELMWAVE_LOG_COLOR] --kubedog Enable/Disable kubedog (default: false) [$HELMWAVE_KUBEDOG, $HELMWAVE_KUBEDOG_ENABLED] --kubedog-status-interval value Interval of kubedog status messages (default: 5s) [$HELMWAVE_KUBEDOG_STATUS_INTERVAL] --kubedog-start-delay value Delay kubedog start, don't make it too late (default: 1s) [$HELMWAVE_KUBEDOG_START_DELAY] --kubedog-timeout value Timout of kubedog multitrackers (default: 5m0s) [$HELMWAVE_KUBEDOG_TIMEOUT] --kubedog-log-width value Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH] --enable-dependencies Enable dependencies (default: false) [$HELMWAVE_ENABLE_DEPENDENCIES] --plan-dependencies Automatically add dependencies to plan (default: false) [$HELMWAVE_PLAN_DEPENDENCIES] --match-all-tags Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS] --help, -h show help (default: false) --version, -v print the version (default: false) yml Templating helmwave.yml.tpl to helmwave.yml We added the ability to template itself. To make the tool even more flexible. You can change path to helmwave.yml.tpl use $HELMWAVE_TPL_FILE or --tpl You can change path to helmwave.yml use $HELMWAVE_YML_FILE or --file Best practice add helmwave.yml to your .gitignore planfile, plan This command will generate planfile Default it will be .helmwave/ . You can change it use --plan-dir option or $HELMWAVE_PLAN_DIR Plan contents 2 part. Rendered values. Save as .helmwave/<path_to_file>.<release_name>@<namespace>.plan . Rendered helm manifests. Save as .helmwave/.manifest/<release_name>@<namespace>.yml Plan use tags for choose releases deploy This command will deploy your planfile Generate plan. Deploy plan. manifest This command generates helm manifests of your planfile . This is accomplished with --dry-run option for deploy command. status This command shows release status of your helmwave.yml similar to helm status command list, ls This command shows list of deployed releases of your helmwave.yml similar to helm list command Logs Options for logs. Helmwave use logrus as internal logger. Log Format Helmwave supports several log-format features text json pad emoji Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave Log Level _ info (default) warn debug fatal panic trace general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests \u274c \u274c \u274c \u274c \u274c \u2705 info or debug is prefer. How to use? helmwave <cmd> --log-color = true --log-level = debug --log-format = pad or export HELMWAVE_LOG_FORMAT = pad export HELMWAVE_LOG_LEVEL = debug export HELMWAVE_LOG_COLOR = true helmwave <cmd>","title":"\ud83d\udee0 CLI Reference"},{"location":"cli/#cli-reference","text":"NAME: helmwave - composer for helm USAGE: helmwave [global options] command [command options] [arguments...] VERSION: 0.11.0 DESCRIPTION: \ud83c\udfd6 This tool helps you compose your helm releases! COMMANDS: yml \ud83d\udcc4 Render helmwave.yml.tpl -> helmwave.yml planfile, plan \ud83d\udcdc Generate planfile to plandir deploy, apply, sync, release \ud83d\udee5 Deploy your helmwave! manifest, manifest \ud83d\udee5 Fake Deploy version Print helmwave version status Show release status ls, list List deployed releases help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL_FILE] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_FILE, $HELMWAVE_YAML_FILE, $HELMWAVE_YML_FILE] --plan-dir value It keeps your state via planfile (default: \".helmwave/\") [$HELMWAVE_PLAN_DIR] --tags value, -t value It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS] --parallel helm install It allows you call helm install in parallel mode (default: true) [$HELMWAVE_PARALLEL] --log-format value You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT] --log-level value You can set: [ debug | info | warn | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL] --log-color Force color (default: true) [$HELMWAVE_LOG_COLOR] --kubedog Enable/Disable kubedog (default: false) [$HELMWAVE_KUBEDOG, $HELMWAVE_KUBEDOG_ENABLED] --kubedog-status-interval value Interval of kubedog status messages (default: 5s) [$HELMWAVE_KUBEDOG_STATUS_INTERVAL] --kubedog-start-delay value Delay kubedog start, don't make it too late (default: 1s) [$HELMWAVE_KUBEDOG_START_DELAY] --kubedog-timeout value Timout of kubedog multitrackers (default: 5m0s) [$HELMWAVE_KUBEDOG_TIMEOUT] --kubedog-log-width value Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH] --enable-dependencies Enable dependencies (default: false) [$HELMWAVE_ENABLE_DEPENDENCIES] --plan-dependencies Automatically add dependencies to plan (default: false) [$HELMWAVE_PLAN_DEPENDENCIES] --match-all-tags Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS] --help, -h show help (default: false) --version, -v print the version (default: false)","title":"\ud83d\udee0 CLI Reference"},{"location":"cli/#yml","text":"Templating helmwave.yml.tpl to helmwave.yml We added the ability to template itself. To make the tool even more flexible. You can change path to helmwave.yml.tpl use $HELMWAVE_TPL_FILE or --tpl You can change path to helmwave.yml use $HELMWAVE_YML_FILE or --file","title":"yml"},{"location":"cli/#best-practice","text":"add helmwave.yml to your .gitignore","title":"Best practice"},{"location":"cli/#planfile-plan","text":"This command will generate planfile Default it will be .helmwave/ . You can change it use --plan-dir option or $HELMWAVE_PLAN_DIR Plan contents 2 part. Rendered values. Save as .helmwave/<path_to_file>.<release_name>@<namespace>.plan . Rendered helm manifests. Save as .helmwave/.manifest/<release_name>@<namespace>.yml Plan use tags for choose releases","title":"planfile, plan"},{"location":"cli/#deploy","text":"This command will deploy your planfile Generate plan. Deploy plan.","title":"deploy"},{"location":"cli/#manifest","text":"This command generates helm manifests of your planfile . This is accomplished with --dry-run option for deploy command.","title":"manifest"},{"location":"cli/#status","text":"This command shows release status of your helmwave.yml similar to helm status command","title":"status"},{"location":"cli/#list-ls","text":"This command shows list of deployed releases of your helmwave.yml similar to helm list command","title":"list, ls"},{"location":"cli/#logs","text":"Options for logs. Helmwave use logrus as internal logger.","title":"Logs"},{"location":"cli/#log-format","text":"Helmwave supports several log-format features text json pad emoji Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave","title":"Log Format"},{"location":"cli/#log-level","text":"_ info (default) warn debug fatal panic trace general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests \u274c \u274c \u274c \u274c \u274c \u2705 info or debug is prefer.","title":"Log Level"},{"location":"cli/#how-to-use","text":"helmwave <cmd> --log-color = true --log-level = debug --log-format = pad or export HELMWAVE_LOG_FORMAT = pad export HELMWAVE_LOG_LEVEL = debug export HELMWAVE_LOG_COLOR = true helmwave <cmd>","title":"How to use?"},{"location":"cookbooks/","text":"\ud83e\uddfe Cookbooks Articles \ud83c\uddf7\ud83c\uddfa HelmWave v0.5.0 \u2013 GitOps \u0434\u043b\u044f \u0442\u0432\u043e\u0435\u0433\u043e Kubernetes Conference","title":"\ud83e\uddfe Cookbooks"},{"location":"cookbooks/#cookbooks","text":"","title":"\ud83e\uddfe Cookbooks"},{"location":"cookbooks/#articles","text":"\ud83c\uddf7\ud83c\uddfa HelmWave v0.5.0 \u2013 GitOps \u0434\u043b\u044f \u0442\u0432\u043e\u0435\u0433\u043e Kubernetes","title":"Articles"},{"location":"cookbooks/#conference","text":"","title":"Conference"},{"location":"install/","text":"\ud83d\udce5 Installation You can install the pre-compiled binary from releases , packages , use Docker or compile from the source. Here are the steps for each of them: \ud83c\udf4f Mac OS Download one of releases brew install helmwave/tap/helmwave \ud83d\udc27 Linux Download one of releases wget -c https://github.com/helmwave/helmwave/releases/download/0.9.1/helmwave_0.9.1_linux_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/ \ud83e\ude9f Windows Download one of releases Install with go get GO111MODULE = on go get github.com/helmwave/helmwave/cmd/helmwave@0.9.1 Compile from source git clone git@github.com:helmwave/helmwave.git cd helmwave go build ./cmd/helmwave mv helmwave /usr/local/bin/ Install with marcosnils/bin bin install github.com/helmwave/helmwave Run as a container docker run diamon/helmwave docker run --entrypoint=ash -it --rm --name helmwave diamon/helmwave","title":"\ud83d\udce5 Installation"},{"location":"install/#installation","text":"You can install the pre-compiled binary from releases , packages , use Docker or compile from the source. Here are the steps for each of them:","title":"\ud83d\udce5 Installation"},{"location":"install/#mac-os","text":"Download one of releases brew install helmwave/tap/helmwave","title":"\ud83c\udf4f Mac OS"},{"location":"install/#linux","text":"Download one of releases wget -c https://github.com/helmwave/helmwave/releases/download/0.9.1/helmwave_0.9.1_linux_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/","title":"\ud83d\udc27 Linux"},{"location":"install/#windows","text":"Download one of releases","title":"\ud83e\ude9f Windows"},{"location":"install/#install-with-go-get","text":"GO111MODULE = on go get github.com/helmwave/helmwave/cmd/helmwave@0.9.1","title":"Install with go get"},{"location":"install/#compile-from-source","text":"git clone git@github.com:helmwave/helmwave.git cd helmwave go build ./cmd/helmwave mv helmwave /usr/local/bin/","title":"Compile from source"},{"location":"install/#install-with-marcosnilsbin","text":"bin install github.com/helmwave/helmwave","title":"Install with marcosnils/bin"},{"location":"install/#run-as-a-container","text":"docker run diamon/helmwave docker run --entrypoint=ash -it --rm --name helmwave diamon/helmwave","title":"Run as a container"},{"location":"tpl/","text":"\ud83d\udcc4 Templating Helmwave uses Go templates for templating. Helmwave supports all built-in functions, Sprig library , and several advanced functions: toYaml marshals a map into a string fromYaml reads a golang string and generates a map readFile get file as string hasKey get true if field is exists get (Sprig's original get is available as sprigGet ) setValueAtPath PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE requiredEnv The requiredEnv function allows you to declare a particular environment variable as required for template rendering. If the environment variable is unset or empty, the template rendering will fail with an error message. readFile my-releases.yml releases : - name : redis repo : bitnami - name : memcached repo : bitnami helmwave.yml.tpl project : my version : 0.9.1 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .global : &global install : true releases : {{ - with readFile \"my-releases.yml\" | fromYaml | get \"releases\" }} {{ - range $v : = . }} - name : {{ $v | get \"name\" }} chart : {{ $v | get \"repo\" }} /{{ $v | get \"name\" }} options : << : *global {{ - end }} {{ - end }} helmwave yml helmwave.yml project : my version : 0.9.1 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .global : &global install : true releases : - name : redis chart : bitnami/redis options : << : *global - name : memcached chart : bitnami/memcached options : << : *global","title":"\ud83d\udcc4 Templating"},{"location":"tpl/#templating","text":"Helmwave uses Go templates for templating. Helmwave supports all built-in functions, Sprig library , and several advanced functions: toYaml marshals a map into a string fromYaml reads a golang string and generates a map readFile get file as string hasKey get true if field is exists get (Sprig's original get is available as sprigGet ) setValueAtPath PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE requiredEnv The requiredEnv function allows you to declare a particular environment variable as required for template rendering. If the environment variable is unset or empty, the template rendering will fail with an error message.","title":"\ud83d\udcc4 Templating"},{"location":"tpl/#readfile","text":"my-releases.yml releases : - name : redis repo : bitnami - name : memcached repo : bitnami helmwave.yml.tpl project : my version : 0.9.1 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .global : &global install : true releases : {{ - with readFile \"my-releases.yml\" | fromYaml | get \"releases\" }} {{ - range $v : = . }} - name : {{ $v | get \"name\" }} chart : {{ $v | get \"repo\" }} /{{ $v | get \"name\" }} options : << : *global {{ - end }} {{ - end }} helmwave yml helmwave.yml project : my version : 0.9.1 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .global : &global install : true releases : - name : redis chart : bitnami/redis options : << : *global - name : memcached chart : bitnami/memcached options : << : *global","title":"readFile"},{"location":"examples/CI_COMMIT_SHORT_SHA/","text":"CI_COMMIT_SHORT_SHA [source] deployment looks like that: ... metadata : {{ - with .Values.podAnnotations }} annotations : {{ - toYaml . | nindent 8 }} {{ - end }} ... Project Structure . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 helmwave.yml.tpl \u2514\u2500\u2500 values.yml helmwave.yml.tpl project : my-project # \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 version : 0.1.6 # \u0412\u0435\u0440\u0441\u0438\u044f helmwave releases : - name : my-release chart : my-chart-repo/my-app values : - values.yml options : install : true namespace : my-namespace values.yml image : tag : {{ env \"CI_COMMIT_TAG\" }} podAnnotations : gitCommit : {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}","title":"Passing gitCommit"},{"location":"examples/CI_COMMIT_SHORT_SHA/#ci_commit_short_sha-source","text":"deployment looks like that: ... metadata : {{ - with .Values.podAnnotations }} annotations : {{ - toYaml . | nindent 8 }} {{ - end }} ...","title":"CI_COMMIT_SHORT_SHA  [source]"},{"location":"examples/CI_COMMIT_SHORT_SHA/#project-structure","text":". \u251c\u2500\u2500 README.md \u251c\u2500\u2500 helmwave.yml.tpl \u2514\u2500\u2500 values.yml","title":"Project Structure"},{"location":"examples/CI_COMMIT_SHORT_SHA/#helmwaveymltpl","text":"project : my-project # \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 version : 0.1.6 # \u0412\u0435\u0440\u0441\u0438\u044f helmwave releases : - name : my-release chart : my-chart-repo/my-app values : - values.yml options : install : true namespace : my-namespace","title":"helmwave.yml.tpl"},{"location":"examples/CI_COMMIT_SHORT_SHA/#valuesyml","text":"image : tag : {{ env \"CI_COMMIT_TAG\" }} podAnnotations : gitCommit : {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}","title":"values.yml"},{"location":"examples/CI_COMMIT_TAG/","text":"CI_COMMIT_TAG [source] Receipt Suppose my-chart has default values.yaml : image : repository : registry.gitlab.local/example/app tag : v1.0.0 ... Project Structure . \u251c\u2500\u2500 helmwave.yml.tpl \u2514\u2500\u2500 values.yml helmwave.yml.tpl project : my-project # \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 version : 0.1.6 # \u0412\u0435\u0440\u0441\u0438\u044f helmwave releases : - name : my-release chart : my-chart-repo/my-app values : - values.yml options : install : true namespace : my-namespace values.yml This values will override default values image : tag : {{ env \"CI_COMMIT_TAG\" }} Deploy helmwave deploy CLI analog via helm3 helm upgrade --instal my-release my-chart-repo/my-app --set = \"image.tag= $CI_COMMIT_TAG \" -n my-namespace","title":"Passing image.tag"},{"location":"examples/CI_COMMIT_TAG/#ci_commit_tag-source","text":"","title":"CI_COMMIT_TAG   [source]"},{"location":"examples/CI_COMMIT_TAG/#receipt","text":"Suppose my-chart has default values.yaml : image : repository : registry.gitlab.local/example/app tag : v1.0.0 ...","title":"Receipt"},{"location":"examples/CI_COMMIT_TAG/#project-structure","text":". \u251c\u2500\u2500 helmwave.yml.tpl \u2514\u2500\u2500 values.yml","title":"Project Structure"},{"location":"examples/CI_COMMIT_TAG/#helmwaveymltpl","text":"project : my-project # \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 version : 0.1.6 # \u0412\u0435\u0440\u0441\u0438\u044f helmwave releases : - name : my-release chart : my-chart-repo/my-app values : - values.yml options : install : true namespace : my-namespace","title":"helmwave.yml.tpl"},{"location":"examples/CI_COMMIT_TAG/#valuesyml","text":"This values will override default values image : tag : {{ env \"CI_COMMIT_TAG\" }}","title":"values.yml"},{"location":"examples/CI_COMMIT_TAG/#deploy","text":"helmwave deploy","title":"Deploy"},{"location":"examples/CI_COMMIT_TAG/#cli-analog-via-helm3","text":"helm upgrade --instal my-release my-chart-repo/my-app --set = \"image.tag= $CI_COMMIT_TAG \" -n my-namespace","title":"CLI analog via helm3"},{"location":"examples/CI_ENVIRONMENT_NAME/","text":"CI_ENVIRONMENT_NAME [source] Project structure . \u251c\u2500\u2500 helmwave.yml.tpl \u2514\u2500\u2500 values \u251c\u2500\u2500 _.yml \u251c\u2500\u2500 prod.yml \u2514\u2500\u2500 stage.yml helmwave.yml.tpl project : my-project version : 0.1.6 releases : - name : my-release chart : my-chart-repo/{{ env \"CI_PROJECT_NAME\" }} values : # Default - values/_.yml # For specific ENVIRONMENT - values/{{ env \"CI_ENVIRONMENT_NAME\" }}.yml options : install : true namespace : {{ env \"CI_ENVIRONMENT_NAME\" }} _.yml image : tag : {{ env \"CI_COMMIT_TAG\" }} podAnnotations : gitCommit : {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }} prod.yml replicaCount : 6 stage.yml replicaCount : 2","title":"Multiple environments"},{"location":"examples/CI_ENVIRONMENT_NAME/#ci_environment_name-source","text":"","title":"CI_ENVIRONMENT_NAME  [source]"},{"location":"examples/CI_ENVIRONMENT_NAME/#project-structure","text":". \u251c\u2500\u2500 helmwave.yml.tpl \u2514\u2500\u2500 values \u251c\u2500\u2500 _.yml \u251c\u2500\u2500 prod.yml \u2514\u2500\u2500 stage.yml","title":"Project structure"},{"location":"examples/CI_ENVIRONMENT_NAME/#helmwaveymltpl","text":"project : my-project version : 0.1.6 releases : - name : my-release chart : my-chart-repo/{{ env \"CI_PROJECT_NAME\" }} values : # Default - values/_.yml # For specific ENVIRONMENT - values/{{ env \"CI_ENVIRONMENT_NAME\" }}.yml options : install : true namespace : {{ env \"CI_ENVIRONMENT_NAME\" }}","title":"helmwave.yml.tpl"},{"location":"examples/CI_ENVIRONMENT_NAME/#_yml","text":"image : tag : {{ env \"CI_COMMIT_TAG\" }} podAnnotations : gitCommit : {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}","title":"_.yml"},{"location":"examples/CI_ENVIRONMENT_NAME/#prodyml","text":"replicaCount : 6","title":"prod.yml"},{"location":"examples/CI_ENVIRONMENT_NAME/#stageyml","text":"replicaCount : 2","title":"stage.yml"},{"location":"examples/GITHUB_TOKEN/","text":"GITHUB_TOKEN [source] Suppose the helmwave.yml.tpl looks like project : {{ env \"CI_PROJECT_NAME\" }} version : 0.9.1 repositories : - name : your-private-git-repo-hosted-charts url : https://{{ env \"GITHUB_TOKEN\"}}@raw.githubusercontent.com/foo/bar/master/ .options : &options install : true namespace : {{ env \"NS\" }} releases : - name : hello chart : foo/bar options : << : *options This command will render helmwave.yml.tpl to helmwave.yml $ export NS = stage $ export CI_PROJECT_NAME = my-project $ export GITHUB_TOKEN = my-secret-token $ helmwave yml [ \ud83d\ude43 aka INFO ] : \ud83d\udee0 Your planfile is .helmwave/planfile [ \ud83d\ude43 aka INFO ] : \ud83d\udcc4 Render file from: helmwave.yml.tpl to: helmwave.yml Once applied, your helmwave.yml will look like project : my-project version : 0.9.1 repositories : - name : your-private-git-repo-hosted-charts url : https://my-secret-token@raw.githubusercontent.com/foo/bar/master/ .options : &options install : true namespace : stage releases : - name : hello chart : foo/bar options : << : *options","title":"Private github helm repostories"},{"location":"examples/GITHUB_TOKEN/#github_token-source","text":"","title":"GITHUB_TOKEN  [source]"},{"location":"examples/GITHUB_TOKEN/#suppose-the-helmwaveymltpl-looks-like","text":"project : {{ env \"CI_PROJECT_NAME\" }} version : 0.9.1 repositories : - name : your-private-git-repo-hosted-charts url : https://{{ env \"GITHUB_TOKEN\"}}@raw.githubusercontent.com/foo/bar/master/ .options : &options install : true namespace : {{ env \"NS\" }} releases : - name : hello chart : foo/bar options : << : *options This command will render helmwave.yml.tpl to helmwave.yml $ export NS = stage $ export CI_PROJECT_NAME = my-project $ export GITHUB_TOKEN = my-secret-token $ helmwave yml [ \ud83d\ude43 aka INFO ] : \ud83d\udee0 Your planfile is .helmwave/planfile [ \ud83d\ude43 aka INFO ] : \ud83d\udcc4 Render file from: helmwave.yml.tpl to: helmwave.yml","title":"Suppose the helmwave.yml.tpl looks like"},{"location":"examples/GITHUB_TOKEN/#once-applied-your-helmwaveyml-will-look-like","text":"project : my-project version : 0.9.1 repositories : - name : your-private-git-repo-hosted-charts url : https://my-secret-token@raw.githubusercontent.com/foo/bar/master/ .options : &options install : true namespace : stage releases : - name : hello chart : foo/bar options : << : *options","title":"Once applied, your helmwave.yml will look like"},{"location":"examples/quick-start/","text":"\ud83d\udd30 Quick Start 1) install helmwave 2) create helmwave.yml.tpl Suppose the helmwave.yml.tpl representing the desired state of your helm releases looks like: project : my-project version : 0.9.1 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .options : &options install : true namespace : my-namespace releases : - name : redis-a chart : bitnami/redis options : << : *options - name : redis-b chart : bitnami/redis options : << : *options 3) run helmwave helmwave deploy Output will be like that: [ \ud83d\ude43 aka INFO ] : \u2705 redis-a@my-namespace [ \ud83d\ude43 aka INFO ] : \u2705 redis-b@my-namespace [ \ud83d\ude43 aka INFO ] : Success 2 / 2 4) check $ helm list -n my-namespace NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION redis-a my-namespace 1 2020 -10-31 17 :05:35.829766 +0300 MSK deployed redis-11.2.3 6 .0.9 redis-b my-namespace 1 2020 -10-31 17 :05:39.437556 +0300 MSK deployed redis-11.2.3 6 .0.9 $ k get po -n my-namespace NAME READY STATUS RESTARTS AGE redis-a-master-0 1 /1 Running 0 64s redis-a-slave-0 1 /1 Running 0 31s redis-a-slave-1 1 /1 Running 0 62s redis-b-master-0 1 /1 Running 0 59s redis-b-slave-0 1 /1 Running 0 32s redis-b-slave-1 1 /1 Running 0 51s Congratulations! Live mode","title":"\ud83d\udd30 Quick Start"},{"location":"examples/quick-start/#quick-start","text":"1) install helmwave 2) create helmwave.yml.tpl Suppose the helmwave.yml.tpl representing the desired state of your helm releases looks like: project : my-project version : 0.9.1 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .options : &options install : true namespace : my-namespace releases : - name : redis-a chart : bitnami/redis options : << : *options - name : redis-b chart : bitnami/redis options : << : *options 3) run helmwave helmwave deploy Output will be like that: [ \ud83d\ude43 aka INFO ] : \u2705 redis-a@my-namespace [ \ud83d\ude43 aka INFO ] : \u2705 redis-b@my-namespace [ \ud83d\ude43 aka INFO ] : Success 2 / 2 4) check $ helm list -n my-namespace NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION redis-a my-namespace 1 2020 -10-31 17 :05:35.829766 +0300 MSK deployed redis-11.2.3 6 .0.9 redis-b my-namespace 1 2020 -10-31 17 :05:39.437556 +0300 MSK deployed redis-11.2.3 6 .0.9 $ k get po -n my-namespace NAME READY STATUS RESTARTS AGE redis-a-master-0 1 /1 Running 0 64s redis-a-slave-0 1 /1 Running 0 31s redis-a-slave-1 1 /1 Running 0 62s redis-b-master-0 1 /1 Running 0 59s redis-b-slave-0 1 /1 Running 0 32s redis-b-slave-1 1 /1 Running 0 51s Congratulations!","title":"\ud83d\udd30 Quick Start"},{"location":"examples/quick-start/#live-mode","text":"","title":"Live mode"},{"location":"yml/","text":"\ud83e\uddec Full yaml See options for more details. project : my-project version : 0.9.3 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami username : \"\" password : \"\" certfile : \"\" keyfile : \"\" cafile : \"\" insecureskiptlsverify : false force : false releases : - name : \"\" chart : \"\" tags : [] values : [] store : {} options : chartpathoptions : cafile : \"\" certfile : \"\" keyfile : \"\" insecureskiptlsverify : false keyring : \"\" password : \"\" repourl : \"\" username : \"\" verify : false version : 1.0.0 install : true devel : false namespace : test1 skipcrds : false timeout : 15m0s wait : true waitforjobs : false disablehooks : false dryrun : false force : false resetvalues : false reusevalues : false recreate : false maxhistory : 10 atomic : false cleanuponfail : false subnotes : false description : \"\" postrenderer : null disableopenapivalidation : false","title":"\ud83e\uddec Full yaml"},{"location":"yml/#full-yaml","text":"See options for more details. project : my-project version : 0.9.3 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami username : \"\" password : \"\" certfile : \"\" keyfile : \"\" cafile : \"\" insecureskiptlsverify : false force : false releases : - name : \"\" chart : \"\" tags : [] values : [] store : {} options : chartpathoptions : cafile : \"\" certfile : \"\" keyfile : \"\" insecureskiptlsverify : false keyring : \"\" password : \"\" repourl : \"\" username : \"\" verify : false version : 1.0.0 install : true devel : false namespace : test1 skipcrds : false timeout : 15m0s wait : true waitforjobs : false disablehooks : false dryrun : false force : false resetvalues : false reusevalues : false recreate : false maxhistory : 10 atomic : false cleanuponfail : false subnotes : false description : \"\" postrenderer : null disableopenapivalidation : false","title":"\ud83e\uddec Full yaml"},{"location":"yml/depends_on/","text":"depends_on Nowadays, depends_on is unstable feature. You need enable it before v1.0.0 manually. export HELMWAVE_ENABLE_DEPENDENCIES = true Suppose we have application contains next services (of course, each service provide as helm-chart) : db backend frontend queue Sequence graph LR db --> backend queue --> backend backend --> frontend docker-compose will be look like that: services : db : image : some/db:latest queue : image : some/queue:latest backend : image : some/backend:latest depends_on : - db - queue frontend : image : some/frontend:latest depends_on : - backend Project Structure . \u2514\u2500\u2500 helmwave.yml.tpl helmwave.yml.tpl project : my-project version : 0.9.6 .options : &options install : true namespace : my-namespace releases : - name : queue chart : some/queue options : << : *options - name : db chart : some/db options : << : *options - name : backend chart : some/backend options : << : *options depends_on : - db@my-namespace - queue@my-namespace - name : frontend chart : some/frontend options : << : *options depends_on : - backend@my-namespace Deploy helmwave deploy","title":"depends_on"},{"location":"yml/depends_on/#depends_on","text":"Nowadays, depends_on is unstable feature. You need enable it before v1.0.0 manually. export HELMWAVE_ENABLE_DEPENDENCIES = true Suppose we have application contains next services (of course, each service provide as helm-chart) : db backend frontend queue Sequence graph LR db --> backend queue --> backend backend --> frontend docker-compose will be look like that: services : db : image : some/db:latest queue : image : some/queue:latest backend : image : some/backend:latest depends_on : - db - queue frontend : image : some/frontend:latest depends_on : - backend","title":"depends_on"},{"location":"yml/depends_on/#project-structure","text":". \u2514\u2500\u2500 helmwave.yml.tpl","title":"Project Structure"},{"location":"yml/depends_on/#helmwaveymltpl","text":"project : my-project version : 0.9.6 .options : &options install : true namespace : my-namespace releases : - name : queue chart : some/queue options : << : *options - name : db chart : some/db options : << : *options - name : backend chart : some/backend options : << : *options depends_on : - db@my-namespace - queue@my-namespace - name : frontend chart : some/frontend options : << : *options depends_on : - backend@my-namespace","title":"helmwave.yml.tpl"},{"location":"yml/depends_on/#deploy","text":"helmwave deploy","title":"Deploy"},{"location":"yml/options/","text":"Options Options provides action.upgrade type Upgrade struct { cfg * Configuration ChartPathOptions // Install is a purely informative flag that indicates whether this upgrade was done in \"install\" mode. // // Applications may use this to determine whether this Upgrade operation was done as part of a // pure upgrade (Upgrade.Install == false) or as part of an install-or-upgrade operation // (Upgrade.Install == true). // // Setting this to `true` will NOT cause `Upgrade` to perform an install if the release does not exist. // That process must be handled by creating an Install action directly. See cmd/upgrade.go for an // example of how this flag is used. Install bool // Devel indicates that the operation is done in devel mode. Devel bool // Namespace is the namespace in which this operation should be performed. Namespace string // SkipCRDs skips installing CRDs when install flag is enabled during upgrade SkipCRDs bool // Timeout is the timeout for this operation Timeout time . Duration // Wait determines whether the wait operation should be performed after the upgrade is requested. Wait bool // WaitForJobs determines whether the wait operation for the Jobs should be performed after the upgrade is requested. WaitForJobs bool // DisableHooks disables hook processing if set to true. DisableHooks bool // DryRun controls whether the operation is prepared, but not executed. // If `true`, the upgrade is prepared but not performed. DryRun bool // Force will, if set to `true`, ignore certain warnings and perform the upgrade anyway. // // This should be used with caution. Force bool // ResetValues will reset the values to the chart's built-ins rather than merging with existing. ResetValues bool // ReuseValues will re-use the user's last supplied values. ReuseValues bool // Recreate will (if true) recreate pods after a rollback. Recreate bool // MaxHistory limits the maximum number of revisions saved per release MaxHistory int // Atomic, if true, will roll back on failure. Atomic bool // CleanupOnFail will, if true, cause the upgrade to delete newly-created resources on a failed update. CleanupOnFail bool // SubNotes determines whether sub-notes are rendered in the chart. SubNotes bool // Description is the description of this operation Description string // PostRender is an optional post-renderer // // If this is non-nil, then after templates are rendered, they will be sent to the // post renderer before sending to the Kubernetes API server. PostRenderer postrender . PostRenderer // DisableOpenAPIValidation controls whether OpenAPI validation is enforced. DisableOpenAPIValidation bool }","title":"Options"},{"location":"yml/options/#options","text":"Options provides action.upgrade type Upgrade struct { cfg * Configuration ChartPathOptions // Install is a purely informative flag that indicates whether this upgrade was done in \"install\" mode. // // Applications may use this to determine whether this Upgrade operation was done as part of a // pure upgrade (Upgrade.Install == false) or as part of an install-or-upgrade operation // (Upgrade.Install == true). // // Setting this to `true` will NOT cause `Upgrade` to perform an install if the release does not exist. // That process must be handled by creating an Install action directly. See cmd/upgrade.go for an // example of how this flag is used. Install bool // Devel indicates that the operation is done in devel mode. Devel bool // Namespace is the namespace in which this operation should be performed. Namespace string // SkipCRDs skips installing CRDs when install flag is enabled during upgrade SkipCRDs bool // Timeout is the timeout for this operation Timeout time . Duration // Wait determines whether the wait operation should be performed after the upgrade is requested. Wait bool // WaitForJobs determines whether the wait operation for the Jobs should be performed after the upgrade is requested. WaitForJobs bool // DisableHooks disables hook processing if set to true. DisableHooks bool // DryRun controls whether the operation is prepared, but not executed. // If `true`, the upgrade is prepared but not performed. DryRun bool // Force will, if set to `true`, ignore certain warnings and perform the upgrade anyway. // // This should be used with caution. Force bool // ResetValues will reset the values to the chart's built-ins rather than merging with existing. ResetValues bool // ReuseValues will re-use the user's last supplied values. ReuseValues bool // Recreate will (if true) recreate pods after a rollback. Recreate bool // MaxHistory limits the maximum number of revisions saved per release MaxHistory int // Atomic, if true, will roll back on failure. Atomic bool // CleanupOnFail will, if true, cause the upgrade to delete newly-created resources on a failed update. CleanupOnFail bool // SubNotes determines whether sub-notes are rendered in the chart. SubNotes bool // Description is the description of this operation Description string // PostRender is an optional post-renderer // // If this is non-nil, then after templates are rendered, they will be sent to the // post renderer before sending to the Kubernetes API server. PostRenderer postrender . PostRenderer // DisableOpenAPIValidation controls whether OpenAPI validation is enforced. DisableOpenAPIValidation bool }","title":"Options"},{"location":"yml/store/","text":"\ud83d\uddf3\ufe0f Store It allows pass you custom values to render release. helmwave.yml.tpl : Please note that my-custom-values.yml file is common for both helm releases project : my-project version : 0.9.5 releases : - name : backend chart : my/backend options : install : true namespace : my-ns store : secret : type : vault path : secret/my/backend values : - my-custom-values.yml - name : frontend chart : my/frontend options : install : true namespace : my-ns store : secret : type : vault path : secret/my/frontend values : - my-custom-values.yml my-custom-values.yml : secretForApp : kind : {{ .Release.Store.secret.type }} path : {{ .Release.Store.secret.path | quote }} Let's generate plan helmwave plan Helmwave created plan! .helmwave/ \u251c\u2500\u2500 my-custom-values.yml.backend@my-ns.plan \u2514\u2500\u2500 my-custom-values.yml.frontend@my-ns.plan my-custom-values.yml.frontend@my-ns.plan secretForApp: kind: vault path: \"secret/my/frontend\" my-custom-values.yml.backend@my-ns.plan secretForApp: kind: vault path: \"secret/my/backend\"","title":"\ud83d\uddf3\ufe0f Store"},{"location":"yml/store/#store","text":"It allows pass you custom values to render release.","title":"\ud83d\uddf3\ufe0f Store"},{"location":"yml/store/#helmwaveymltpl","text":"Please note that my-custom-values.yml file is common for both helm releases project : my-project version : 0.9.5 releases : - name : backend chart : my/backend options : install : true namespace : my-ns store : secret : type : vault path : secret/my/backend values : - my-custom-values.yml - name : frontend chart : my/frontend options : install : true namespace : my-ns store : secret : type : vault path : secret/my/frontend values : - my-custom-values.yml","title":"helmwave.yml.tpl:"},{"location":"yml/store/#my-custom-valuesyml","text":"secretForApp : kind : {{ .Release.Store.secret.type }} path : {{ .Release.Store.secret.path | quote }} Let's generate plan helmwave plan Helmwave created plan! .helmwave/ \u251c\u2500\u2500 my-custom-values.yml.backend@my-ns.plan \u2514\u2500\u2500 my-custom-values.yml.frontend@my-ns.plan","title":"my-custom-values.yml:"},{"location":"yml/store/#my-custom-valuesymlfrontendmy-nsplan","text":"secretForApp: kind: vault path: \"secret/my/frontend\"","title":"my-custom-values.yml.frontend@my-ns.plan"},{"location":"yml/store/#my-custom-valuesymlbackendmy-nsplan","text":"secretForApp: kind: vault path: \"secret/my/backend\"","title":"my-custom-values.yml.backend@my-ns.plan"},{"location":"yml/tags/","text":"\ud83d\udd16 Tags It allows you to choose releases for sync Suppose the helmwave.yml.tpl looks like: project : my-project version : 0.9.3 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .options : &options install : true namespace : my-namespace releases : - name : redis-a chart : bitnami/redis tags : - a - redis options : << : *options - name : redis-b chart : bitnami/redis tags : - b - redis options : << : *options - name : memcached-a chart : bitnami/memcached tags : - a - memcached options : << : *options - name : memcached-b chart : bitnami/memcached tags : - b - memcached options : << : *options This command will deploy only redis-a & memcached-a helmwave -t a deploy This command will deploy only redis-a & redis-b helmwave -t redis deploy This command will deploy only redis-b helmwave -t redis,b deploy","title":"\ud83d\udd16 Tags"},{"location":"yml/tags/#tags","text":"It allows you to choose releases for sync Suppose the helmwave.yml.tpl looks like: project : my-project version : 0.9.3 repositories : - name : bitnami url : https://charts.bitnami.com/bitnami .options : &options install : true namespace : my-namespace releases : - name : redis-a chart : bitnami/redis tags : - a - redis options : << : *options - name : redis-b chart : bitnami/redis tags : - b - redis options : << : *options - name : memcached-a chart : bitnami/memcached tags : - a - memcached options : << : *options - name : memcached-b chart : bitnami/memcached tags : - b - memcached options : << : *options This command will deploy only redis-a & memcached-a helmwave -t a deploy This command will deploy only redis-a & redis-b helmwave -t redis deploy This command will deploy only redis-b helmwave -t redis,b deploy","title":"\ud83d\udd16 Tags"}]}