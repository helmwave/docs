{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"anno/","title":"\ud83d\udcd4 Annotations","text":""},{"location":"anno/#how-to-use","title":"How to use?","text":"<p>You should add annotation to your deployment / statefulset / jobs / daemonset</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: api\nspec:\n...\ntemplate:\nmetadata:\nannotations:\ngitCommit: 5b4c2ff5\nhelmwave.dev/show-service-messages: \"true\"\n</code></pre>"},{"location":"anno/#annotations-for-the-kubedog","title":"Annotations for the kubedog \ud83d\udc36","text":"<p>inspired by werf annotations</p> <p>First step you need enable kubedog for helmwave.</p> <pre><code>export HELMWAVE_KUBEDOG_ENABLED=true\n</code></pre>"},{"location":"anno/#helmwavedevtrack-termination-mode","title":"<code>helmwave.dev/track-termination-mode</code>","text":"<p>Defines a condition when helmwave should stop tracking of the resource:</p> <ul> <li><code>WaitUntilResourceReady</code> (default) \u2014 the entire deployment process would monitor and wait for the readiness of the   resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all   resources to be ready.</li> <li><code>NonBlocking</code> \u2014 the resource is tracked only if there are other resources that are not yet ready.</li> </ul>"},{"location":"anno/#helmwavedevfail-mode","title":"<code>helmwave.dev/fail-mode</code>","text":"<p>Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process:</p> <ul> <li><code>FailWholeDeployProcessImmediately</code> (default) \u2014 the entire deploy process will fail with an error if an error occurs   for some resource.</li> <li><code>HopeUntilEndOfDeployProcess</code> \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and   continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource   back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again.</li> <li><code>IgnoreAndContinueDeployProcess</code> \u2014 resource errors do not affect the deployment process.</li> </ul>"},{"location":"anno/#helmwavedevfailures-allowed-per-replica","title":"<code>helmwave.dev/failures-allowed-per-replica</code>","text":"<p>By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode.</p> <ul> <li>NUMBER</li> </ul>"},{"location":"anno/#helmwavedevlog-regex","title":"<code>helmwave.dev/log-regex</code>","text":"<p>Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwavedevlog-regex-for-container","title":"<code>helmwave.dev/log-regex-for-{container}</code>","text":"<p>Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwavedevskip-logs","title":"<code>helmwave.dev/skip-logs</code>","text":"<p>Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"anno/#helmwavedevskip-logs-for-containers","title":"<code>helmwave.dev/skip-logs-for-containers</code>","text":"<p>Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwavedevshow-logs-only-for-containers","title":"<code>helmwave.dev/show-logs-only-for-containers</code>","text":"<p>Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwavedevshow-service-messages","title":"<code>helmwave.dev/show-service-messages</code>","text":"<p>Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"ci/","title":"\ud83e\uddcb Continuous Integration","text":"<p>Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind.</p> <p>Let's see how we can get it working on popular CI software.</p>"},{"location":"ci/#github-action","title":"Github action","text":"<ul> <li>official github action</li> </ul>"},{"location":"ci/#gitlab-ci","title":"Gitlab-CI","text":"<pre><code>variables:\nHELMWAVE_LOG_LEVEL: debug\n\nhelmwave-deploy:\nstage: deploy\nenvironment:\nname: \"ref/$CI_COMMIT_REF_SLUG\"\nimage:\nname: diamon/helmwave:0.9.3\nentrypoint: [\"\"]\nscript:\n- helmwave deploy\n\n\nstop environment:\nstage: deploy\nimage:\nname: lachlanevenson/k8s-kubectl:v1.18.4\nentrypoint: [\"\"]\nvariables:\nGIT_STRATEGY: none\nscript:\n- kubectl delete ns $CI_COMMIT_REF_SLUG\nwhen: manual\nenvironment:\nname: \"ref/$CI_COMMIT_REF_SLUG\"\naction: stop\n</code></pre>"},{"location":"cli/","title":"\ud83d\udee0 CLI Reference","text":"<pre><code>NAME:\n   helmwave - composer for helm\n\nUSAGE:\n   helmwave [global options] command [command options] [arguments...]\n\nVERSION:\n   0.11.0\n\nDESCRIPTION:\n   \ud83c\udfd6 This tool helps you compose your helm releases!\n\nCOMMANDS:\n   yml                           \ud83d\udcc4 Render helmwave.yml.tpl -&gt; helmwave.yml\n   planfile, plan                \ud83d\udcdc Generate planfile to plandir\n   deploy, apply, sync, release  \ud83d\udee5 Deploy your helmwave!\n   manifest, manifest            \ud83d\udee5 Fake Deploy\n   version                       Print helmwave version\n   status                        Show release status\n   ls, list                      List deployed releases\n   help, h                       Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --tpl value                      Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL_FILE]\n   --file value, -f value           Main yml file (default: \"helmwave.yml\") [$HELMWAVE_FILE, $HELMWAVE_YAML_FILE, $HELMWAVE_YML_FILE]\n   --plan-dir value                 It keeps your state via planfile (default: \".helmwave/\") [$HELMWAVE_PLAN_DIR]\n   --tags value, -t value           It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n   --parallel helm install          It allows you call helm install in parallel mode  (default: true) [$HELMWAVE_PARALLEL]\n   --log-format value               You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT]\n   --log-level value                You can set: [ debug | info | warn  | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL]\n   --log-color                      Force color (default: true) [$HELMWAVE_LOG_COLOR]\n   --kubedog                        Enable/Disable kubedog (default: false) [$HELMWAVE_KUBEDOG, $HELMWAVE_KUBEDOG_ENABLED]\n   --kubedog-status-interval value  Interval of kubedog status messages (default: 5s) [$HELMWAVE_KUBEDOG_STATUS_INTERVAL]\n   --kubedog-start-delay value      Delay kubedog start, don't make it too late (default: 1s) [$HELMWAVE_KUBEDOG_START_DELAY]\n   --kubedog-timeout value          Timout of kubedog multitrackers (default: 5m0s) [$HELMWAVE_KUBEDOG_TIMEOUT]\n   --kubedog-log-width value        Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH]\n   --enable-dependencies            Enable dependencies (default: false) [$HELMWAVE_ENABLE_DEPENDENCIES]\n   --plan-dependencies              Automatically add dependencies to plan (default: false) [$HELMWAVE_PLAN_DEPENDENCIES]\n   --match-all-tags                 Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n   --help, -h                       show help (default: false)\n   --version, -v                    print the version (default: false)\n</code></pre>"},{"location":"cli/#yml","title":"yml","text":"<p>Templating <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code></p> <p>We added the ability to template itself. To make the tool even more flexible.</p> <ul> <li>You can change path to <code>helmwave.yml.tpl</code> use <code>$HELMWAVE_TPL_FILE</code> or <code>--tpl</code></li> <li>You can change path to <code>helmwave.yml</code> use <code>$HELMWAVE_YML_FILE</code> or <code>--file</code></li> </ul>"},{"location":"cli/#best-practice","title":"Best practice","text":"<ul> <li>add <code>helmwave.yml</code> to your <code>.gitignore</code></li> </ul>"},{"location":"cli/#planfile-plan","title":"planfile, plan","text":"<p>This command will generate <code>planfile</code></p> <p>Default it will be <code>.helmwave/</code>. You can change it use <code>--plan-dir</code> option or <code>$HELMWAVE_PLAN_DIR</code></p> <p>Plan contents 2 part.</p> <ol> <li>Rendered values. Save as <code>.helmwave/&lt;path_to_file&gt;.&lt;release_name&gt;@&lt;namespace&gt;.plan</code>. </li> <li>Rendered helm manifests. Save as <code>.helmwave/.manifest/&lt;release_name&gt;@&lt;namespace&gt;.yml</code></li> </ol> <p>Plan use tags for choose releases</p>"},{"location":"cli/#deploy","title":"deploy","text":"<p>This command will deploy your <code>planfile</code></p> <ol> <li>Generate plan.</li> <li>Deploy plan.</li> </ol>"},{"location":"cli/#manifest","title":"manifest","text":"<p>This command generates helm manifests of your <code>planfile</code>.</p> <p>This is accomplished with <code>--dry-run</code> option for <code>deploy</code> command.</p>"},{"location":"cli/#status","title":"status","text":"<p>This command shows release status of your <code>helmwave.yml</code> similar to <code>helm status</code> command</p>"},{"location":"cli/#list-ls","title":"list, ls","text":"<p>This command shows list of deployed releases of your <code>helmwave.yml</code> similar to <code>helm list</code> command</p>"},{"location":"cli/#logs","title":"Logs","text":"<p>Options for logs. Helmwave use logrus as internal logger.</p>"},{"location":"cli/#log-format","title":"Log Format","text":"<p>Helmwave supports several log-format</p> features <code>text</code> <code>json</code> <code>pad</code> <code>emoji</code> Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave"},{"location":"cli/#log-level","title":"Log Level","text":"_ <code>info</code> (default) <code>warn</code> <code>debug</code> <code>fatal</code> <code>panic</code> <code>trace</code> general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests \u274c \u274c \u274c \u274c \u274c \u2705 <p><code>info</code> or <code>debug</code> is prefer.</p>"},{"location":"cli/#how-to-use","title":"How to use?","text":"<pre><code>helmwave &lt;cmd&gt; --log-color=true --log-level=debug --log-format=pad\n</code></pre> <p>or</p> <pre><code>export HELMWAVE_LOG_FORMAT=pad\nexport HELMWAVE_LOG_LEVEL=debug\nexport HELMWAVE_LOG_COLOR=true\nhelmwave &lt;cmd&gt;\n</code></pre>"},{"location":"cookbooks/","title":"\ud83e\uddfe Cookbooks","text":""},{"location":"cookbooks/#articles","title":"Articles","text":"<ul> <li>\ud83c\uddf7\ud83c\uddfa HelmWave v0.5.0 \u2013 GitOps \u0434\u043b\u044f \u0442\u0432\u043e\u0435\u0433\u043e Kubernetes</li> </ul>"},{"location":"cookbooks/#conference","title":"Conference","text":""},{"location":"install/","title":"\ud83d\udce5 Installation","text":"<p>You can install the pre-compiled binary from  releases,  packages, use Docker or compile from the source.</p> <p>Here are the steps for each of them:</p>"},{"location":"install/#mac-os","title":"\ud83c\udf4f Mac OS","text":"<p>Download one of releases</p> <pre><code>brew install helmwave/tap/helmwave\n</code></pre>"},{"location":"install/#linux","title":"\ud83d\udc27 Linux","text":"<p>Download one of releases</p> <pre><code>wget -c https://github.com/helmwave/helmwave/releases/download/0.9.1/helmwave_0.9.1_linux_amd64.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#windows","title":"\ud83e\ude9f Windows","text":"<p>Download one of releases</p>"},{"location":"install/#install-with-go-get","title":"Install with go get","text":"<pre><code>GO111MODULE=on go get github.com/helmwave/helmwave/cmd/helmwave@0.9.1\n</code></pre>"},{"location":"install/#compile-from-source","title":"Compile from source","text":"<pre><code>git clone git@github.com:helmwave/helmwave.git\ncd helmwave\ngo build ./cmd/helmwave\nmv helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#install-with-marcosnilsbin","title":"Install with marcosnils/bin","text":"<pre><code>bin install github.com/helmwave/helmwave\n</code></pre>"},{"location":"install/#run-as-a-container","title":"Run as a container","text":"<pre><code>docker run diamon/helmwave\ndocker run --entrypoint=ash -it --rm --name helmwave diamon/helmwave\n</code></pre>"},{"location":"tpl/","title":"\ud83d\udcc4 Templating","text":"<p>Helmwave uses Go templates for templating.</p> <p>Helmwave supports all built-in functions, Sprig library, and several advanced functions:</p> <ul> <li><code>toYaml</code> marshals a map into a string</li> <li><code>fromYaml</code> reads a golang string and generates a map</li> <li><code>readFile</code> get file as string</li> <li><code>hasKey</code> get true if field is exists</li> <li><code>get</code> (Sprig's original <code>get</code> is available as <code>sprigGet</code>)</li> <li><code>setValueAtPath</code> PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE</li> <li><code>requiredEnv</code> The requiredEnv function allows you to declare a particular environment variable as required for   template rendering. If the environment variable is unset or empty, the template rendering will fail with an error   message.</li> </ul>"},{"location":"tpl/#readfile","title":"readFile","text":"my-releases.yml <pre><code>releases:\n- name: redis\nrepo: bitnami\n- name: memcached\nrepo: bitnami\n</code></pre> helmwave.yml.tpl <pre><code>project: my\nversion: 0.9.1\n\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n\n.global: &amp;global\ninstall: true\n\n\nreleases:\n{{- with readFile \"my-releases.yml\" | fromYaml | get \"releases\" }}\n{{- range $v := . }}\n- name: {{ $v | get \"name\" }}\nchart: {{ $v | get \"repo\" }}/{{ $v | get \"name\" }}\noptions:\n&lt;&lt;: *global\n{{- end }}\n{{- end }}\n</code></pre> <pre><code>helmwave yml\n</code></pre> helmwave.yml <pre><code>project: my\nversion: 0.9.1\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.global: &amp;global\ninstall: true\n\nreleases:\n- name: redis\nchart: bitnami/redis\noptions:\n&lt;&lt;: *global\n- name: memcached\nchart: bitnami/memcached\noptions:\n&lt;&lt;: *global\n</code></pre>"},{"location":"examples/CI_COMMIT_SHORT_SHA/","title":"CI_COMMIT_SHORT_SHA  [source]","text":"<p>deployment looks like that: <pre><code>    ...\nmetadata:  {{- with .Values.podAnnotations }}  annotations:  {{- toYaml . | nindent 8 }}  {{- end }}\n...\n</code></pre></p>"},{"location":"examples/CI_COMMIT_SHORT_SHA/#project-structure","title":"Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u2514\u2500\u2500 values.yml\n</code></pre>"},{"location":"examples/CI_COMMIT_SHORT_SHA/#helmwaveymltpl","title":"<code>helmwave.yml.tpl</code>","text":"<pre><code>project: my-project # \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\nversion: 0.1.6 # \u0412\u0435\u0440\u0441\u0438\u044f helmwave\n\nreleases:\n- name: my-release\nchart: my-chart-repo/my-app\nvalues:\n- values.yml\noptions:\ninstall: true\nnamespace: my-namespace\n</code></pre>"},{"location":"examples/CI_COMMIT_SHORT_SHA/#valuesyml","title":"<code>values.yml</code>","text":"<pre><code>image:\ntag: {{ env \"CI_COMMIT_TAG\" }}\n\npodAnnotations:\ngitCommit: {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}\n</code></pre>"},{"location":"examples/CI_COMMIT_TAG/","title":"CI_COMMIT_TAG   [source]","text":""},{"location":"examples/CI_COMMIT_TAG/#receipt","title":"Receipt","text":"<p>Suppose <code>my-chart</code> has default <code>values.yaml</code>:</p> <pre><code>image:\nrepository: registry.gitlab.local/example/app\ntag: v1.0.0\n...\n</code></pre>"},{"location":"examples/CI_COMMIT_TAG/#project-structure","title":"Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u2514\u2500\u2500 values.yml\n</code></pre>"},{"location":"examples/CI_COMMIT_TAG/#helmwaveymltpl","title":"<code>helmwave.yml.tpl</code>","text":"<pre><code>project: my-project # \u0418\u043c\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430\nversion: 0.1.6 # \u0412\u0435\u0440\u0441\u0438\u044f helmwave\n\nreleases:\n- name: my-release\nchart: my-chart-repo/my-app\nvalues:\n- values.yml\noptions:\ninstall: true\nnamespace: my-namespace\n</code></pre>"},{"location":"examples/CI_COMMIT_TAG/#valuesyml","title":"<code>values.yml</code>","text":"<p>This values will override default values </p> <pre><code>image:\ntag: {{ env \"CI_COMMIT_TAG\" }}\n</code></pre>"},{"location":"examples/CI_COMMIT_TAG/#deploy","title":"Deploy","text":"<pre><code>helmwave deploy\n</code></pre>"},{"location":"examples/CI_COMMIT_TAG/#cli-analog-via-helm3","title":"CLI analog via helm3","text":"<pre><code>helm upgrade --instal my-release my-chart-repo/my-app --set=\"image.tag=$CI_COMMIT_TAG\" -n my-namespace\n</code></pre>"},{"location":"examples/CI_ENVIRONMENT_NAME/","title":"CI_ENVIRONMENT_NAME  [source]","text":""},{"location":"examples/CI_ENVIRONMENT_NAME/#project-structure","title":"Project structure","text":"<pre><code>.\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u2514\u2500\u2500 values\n    \u251c\u2500\u2500 _.yml\n    \u251c\u2500\u2500 prod.yml\n    \u2514\u2500\u2500 stage.yml\n</code></pre>"},{"location":"examples/CI_ENVIRONMENT_NAME/#helmwaveymltpl","title":"<code>helmwave.yml.tpl</code>","text":"<pre><code>project: my-project\nversion: 0.1.6\n\nreleases:\n- name: my-release\nchart: my-chart-repo/{{ env \"CI_PROJECT_NAME\" }}\nvalues:\n# Default\n- values/_.yml\n# For specific ENVIRONMENT\n- values/{{ env \"CI_ENVIRONMENT_NAME\" }}.yml\noptions:\ninstall: true\nnamespace: {{ env \"CI_ENVIRONMENT_NAME\" }}\n</code></pre>"},{"location":"examples/CI_ENVIRONMENT_NAME/#_yml","title":"<code>_.yml</code>","text":"<pre><code>image:\ntag: {{ env \"CI_COMMIT_TAG\" }}\n\npodAnnotations:\ngitCommit: {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}\n</code></pre>"},{"location":"examples/CI_ENVIRONMENT_NAME/#prodyml","title":"<code>prod.yml</code>","text":"<pre><code>replicaCount: 6\n</code></pre>"},{"location":"examples/CI_ENVIRONMENT_NAME/#stageyml","title":"<code>stage.yml</code>","text":"<pre><code>replicaCount: 2\n</code></pre>"},{"location":"examples/GITHUB_TOKEN/","title":"GITHUB_TOKEN  [source]","text":""},{"location":"examples/GITHUB_TOKEN/#suppose-the-helmwaveymltpl-looks-like","title":"Suppose the <code>helmwave.yml.tpl</code> looks like","text":"<pre><code>project: {{ env \"CI_PROJECT_NAME\" }}\nversion: 0.9.1\n\n\nrepositories:\n- name: your-private-git-repo-hosted-charts\nurl: https://{{ env \"GITHUB_TOKEN\"}}@raw.githubusercontent.com/foo/bar/master/\n\n\n.options: &amp;options\ninstall: true\nnamespace: {{ env \"NS\" }}\n\n\nreleases:\n- name: hello\nchart: foo/bar\noptions:\n&lt;&lt;: *options\n</code></pre> <p>This command will render <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code></p> <pre><code>$ export NS=stage\n$ export CI_PROJECT_NAME=my-project\n$ export GITHUB_TOKEN=my-secret-token\n$ helmwave yml\n[\ud83d\ude43 aka INFO]: \ud83d\udee0 Your planfile is .helmwave/planfile\n[\ud83d\ude43 aka INFO]: \ud83d\udcc4 Render file\n        from: helmwave.yml.tpl\n        to: helmwave.yml\n</code></pre>"},{"location":"examples/GITHUB_TOKEN/#once-applied-your-helmwaveyml-will-look-like","title":"Once applied, your <code>helmwave.yml</code> will look like","text":"<pre><code>project: my-project\nversion: 0.9.1\n\n\nrepositories:\n- name: your-private-git-repo-hosted-charts\nurl: https://my-secret-token@raw.githubusercontent.com/foo/bar/master/\n\n\n.options: &amp;options\ninstall: true\nnamespace: stage\n\n\nreleases:\n- name: hello\nchart: foo/bar\noptions:\n&lt;&lt;: *options\n</code></pre>"},{"location":"examples/quick-start/","title":"\ud83d\udd30 Quick Start","text":"<p>1) install helmwave</p> <p>2) create helmwave.yml.tpl</p> <p>Suppose the <code>helmwave.yml.tpl</code> representing the desired state of your helm releases looks like:</p> <pre><code>project: my-project\nversion: 0.9.1\n\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n\n.options: &amp;options\ninstall: true\nnamespace: my-namespace\n\n\nreleases:\n- name: redis-a\nchart: bitnami/redis\noptions:\n&lt;&lt;: *options\n\n- name: redis-b\nchart: bitnami/redis\noptions:\n&lt;&lt;: *options\n</code></pre> <p>3) run helmwave</p> <pre><code>helmwave deploy\n</code></pre> <p>Output will be like that:</p> <pre><code>[\ud83d\ude43 aka INFO]: \u2705 redis-a@my-namespace\n[\ud83d\ude43 aka INFO]: \u2705 redis-b@my-namespace\n[\ud83d\ude43 aka INFO]: Success 2 / 2\n</code></pre> <p>4) check</p> <pre><code>$ helm list -n my-namespace\nNAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION\nredis-a                 my-namespace    1               2020-10-31 17:05:35.829766 +0300 MSK    deployed        redis-11.2.3            6.0.9      \nredis-b                 my-namespace    1               2020-10-31 17:05:39.437556 +0300 MSK    deployed        redis-11.2.3            6.0.9  \n\n$ k get po -n my-namespace                                                                                                                         \nNAME               READY   STATUS    RESTARTS   AGE\nredis-a-master-0   1/1     Running   0          64s\nredis-a-slave-0    1/1     Running   0          31s\nredis-a-slave-1    1/1     Running   0          62s\nredis-b-master-0   1/1     Running   0          59s\nredis-b-slave-0    1/1     Running   0          32s\nredis-b-slave-1    1/1     Running   0          51s\n</code></pre> <p>Congratulations!</p>"},{"location":"examples/quick-start/#live-mode","title":"Live mode","text":""},{"location":"yml/","title":"\ud83e\uddec Full yaml","text":"<p>See options for more details.</p> <pre><code>project: my-project\nversion: 0.9.3\n\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\nusername: \"\"\npassword: \"\"\ncertfile: \"\"\nkeyfile: \"\"\ncafile: \"\"\ninsecureskiptlsverify: false\nforce: false\n\nreleases:\n- name:  \"\"\nchart: \"\"\ntags: []\nvalues: []\nstore: {}\noptions:\nchartpathoptions:\ncafile: \"\"\ncertfile: \"\"\nkeyfile: \"\"\ninsecureskiptlsverify: false\nkeyring: \"\"\npassword: \"\"\nrepourl: \"\"\nusername: \"\"\nverify: false\nversion: 1.0.0\ninstall: true\ndevel: false\nnamespace: test1\nskipcrds: false\ntimeout: 15m0s\nwait: true\nwaitforjobs: false\ndisablehooks: false\ndryrun: false\nforce: false\nresetvalues: false\nreusevalues: false\nrecreate: false\nmaxhistory: 10\natomic: false\ncleanuponfail: false\nsubnotes: false\ndescription: \"\"\npostrenderer: null\ndisableopenapivalidation: false\n</code></pre>"},{"location":"yml/depends_on/","title":"depends_on","text":"<p>Nowadays, <code>depends_on</code> is unstable feature. You need enable it before v1.0.0 manually.</p> <pre><code>export HELMWAVE_ENABLE_DEPENDENCIES=true\n</code></pre> <p>Suppose we have application contains next services (of course, each service provide as helm-chart) :</p> <ol> <li>db</li> <li>backend</li> <li>frontend</li> <li>queue</li> </ol> <p>Sequence</p> graph LR     db --&gt; backend     queue --&gt; backend     backend --&gt; frontend  <p>docker-compose will be look like that:</p> <pre><code>services:\ndb:\nimage: some/db:latest\n\nqueue:\nimage: some/queue:latest\n\nbackend:\nimage: some/backend:latest\ndepends_on:\n- db\n- queue\n\nfrontend:\nimage: some/frontend:latest\ndepends_on:\n- backend\n</code></pre>"},{"location":"yml/depends_on/#project-structure","title":"Project Structure","text":"<pre><code>.\n\u2514\u2500\u2500 helmwave.yml.tpl\n</code></pre>"},{"location":"yml/depends_on/#helmwaveymltpl","title":"<code>helmwave.yml.tpl</code>","text":"<pre><code>project: my-project\nversion: 0.9.6\n\n.options: &amp;options\ninstall: true\nnamespace: my-namespace\n\n\nreleases:\n- name: queue\nchart: some/queue\noptions:\n&lt;&lt;: *options\n\n- name: db\nchart: some/db\noptions:\n&lt;&lt;: *options\n\n- name: backend\nchart: some/backend\noptions:\n&lt;&lt;: *options\ndepends_on:\n- db@my-namespace\n- queue@my-namespace\n\n- name: frontend\nchart: some/frontend\noptions:\n&lt;&lt;: *options\ndepends_on:\n- backend@my-namespace\n</code></pre>"},{"location":"yml/depends_on/#deploy","title":"Deploy","text":"<pre><code>helmwave deploy\n</code></pre>"},{"location":"yml/options/","title":"Options","text":"<p>Options provides action.upgrade</p> <pre><code>type Upgrade struct {\ncfg *Configuration\n\nChartPathOptions\n\n// Install is a purely informative flag that indicates whether this upgrade was done in \"install\" mode.\n//\n// Applications may use this to determine whether this Upgrade operation was done as part of a\n// pure upgrade (Upgrade.Install == false) or as part of an install-or-upgrade operation\n// (Upgrade.Install == true).\n//\n// Setting this to `true` will NOT cause `Upgrade` to perform an install if the release does not exist.\n// That process must be handled by creating an Install action directly. See cmd/upgrade.go for an\n// example of how this flag is used.\nInstall bool\n// Devel indicates that the operation is done in devel mode.\nDevel bool\n// Namespace is the namespace in which this operation should be performed.\nNamespace string\n// SkipCRDs skips installing CRDs when install flag is enabled during upgrade\nSkipCRDs bool\n// Timeout is the timeout for this operation\nTimeout time.Duration\n// Wait determines whether the wait operation should be performed after the upgrade is requested.\nWait bool\n// WaitForJobs determines whether the wait operation for the Jobs should be performed after the upgrade is requested.\nWaitForJobs bool\n// DisableHooks disables hook processing if set to true.\nDisableHooks bool\n// DryRun controls whether the operation is prepared, but not executed.\n// If `true`, the upgrade is prepared but not performed.\nDryRun bool\n// Force will, if set to `true`, ignore certain warnings and perform the upgrade anyway.\n//\n// This should be used with caution.\nForce bool\n// ResetValues will reset the values to the chart's built-ins rather than merging with existing.\nResetValues bool\n// ReuseValues will re-use the user's last supplied values.\nReuseValues bool\n// Recreate will (if true) recreate pods after a rollback.\nRecreate bool\n// MaxHistory limits the maximum number of revisions saved per release\nMaxHistory int\n// Atomic, if true, will roll back on failure.\nAtomic bool\n// CleanupOnFail will, if true, cause the upgrade to delete newly-created resources on a failed update.\nCleanupOnFail bool\n// SubNotes determines whether sub-notes are rendered in the chart.\nSubNotes bool\n// Description is the description of this operation\nDescription string\n// PostRender is an optional post-renderer\n//\n// If this is non-nil, then after templates are rendered, they will be sent to the\n// post renderer before sending to the Kubernetes API server.\nPostRenderer postrender.PostRenderer\n// DisableOpenAPIValidation controls whether OpenAPI validation is enforced.\nDisableOpenAPIValidation bool\n}\n</code></pre>"},{"location":"yml/store/","title":"\ud83d\uddf3\ufe0f Store","text":"<p>It allows pass you custom values to render release.</p>"},{"location":"yml/store/#helmwaveymltpl","title":"<code>helmwave.yml.tpl</code>:","text":"<p>Please note that <code>my-custom-values.yml</code> file is common for both helm releases</p> <pre><code>project: my-project\nversion: 0.9.5\n\nreleases:\n- name: backend\nchart: my/backend\noptions:\ninstall: true\nnamespace: my-ns\nstore:\nsecret:\ntype: vault\npath: secret/my/backend\nvalues:\n- my-custom-values.yml\n\n- name: frontend\nchart: my/frontend\noptions:\ninstall: true\nnamespace: my-ns\nstore:\nsecret:\ntype: vault\npath: secret/my/frontend\nvalues:\n- my-custom-values.yml\n</code></pre>"},{"location":"yml/store/#my-custom-valuesyml","title":"<code>my-custom-values.yml</code>:","text":"<pre><code>secretForApp:\nkind: {{ .Release.Store.secret.type }}\npath: {{ .Release.Store.secret.path | quote }}\n</code></pre> <p>Let's generate plan</p> <pre><code>helmwave plan\n</code></pre> <p>Helmwave created plan!</p> <pre><code>.helmwave/\n\u251c\u2500\u2500 my-custom-values.yml.backend@my-ns.plan\n\u2514\u2500\u2500 my-custom-values.yml.frontend@my-ns.plan\n</code></pre>"},{"location":"yml/store/#my-custom-valuesymlfrontendmy-nsplan","title":"<code>my-custom-values.yml.frontend@my-ns.plan</code>","text":"<pre><code>secretForApp:\n  kind: vault\n  path: \"secret/my/frontend\"\n</code></pre>"},{"location":"yml/store/#my-custom-valuesymlbackendmy-nsplan","title":"<code>my-custom-values.yml.backend@my-ns.plan</code>","text":"<pre><code>secretForApp:\n  kind: vault\n  path: \"secret/my/backend\"\n</code></pre>"},{"location":"yml/tags/","title":"\ud83d\udd16 Tags","text":"<p>It allows you to choose releases for sync</p> <p>Suppose the <code>helmwave.yml.tpl</code> looks like:</p> <pre><code>project: my-project\nversion: 0.9.3\n\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n\n.options: &amp;options\ninstall: true\nnamespace: my-namespace\n\n\nreleases:\n- name: redis-a\nchart: bitnami/redis\ntags:\n- a\n- redis\noptions:\n&lt;&lt;: *options\n\n- name: redis-b\nchart: bitnami/redis\ntags:\n- b\n- redis\noptions:\n&lt;&lt;: *options\n\n- name: memcached-a\nchart: bitnami/memcached\ntags:\n- a\n- memcached\noptions:\n&lt;&lt;: *options\n\n- name: memcached-b\nchart: bitnami/memcached\ntags:\n- b\n- memcached\noptions:\n&lt;&lt;: *options\n</code></pre> <p>This command will deploy only <code>redis-a</code> &amp; <code>memcached-a</code></p> <pre><code>helmwave -t a deploy\n</code></pre> <p>This command will deploy only <code>redis-a</code> &amp; <code>redis-b</code></p> <pre><code>helmwave -t redis deploy\n</code></pre> <p>This command will deploy only <code>redis-b</code></p> <pre><code>helmwave -t redis,b deploy\n</code></pre>"}]}