{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"anno/","title":"\ud83d\udcd4 Annotations","text":""},{"location":"anno/#how-to-use","title":"How to use?","text":"<p>You should add an annotation to your <code>Deployment</code> / <code>StatefulSet</code> / <code>Jobs</code> / <code>DaemonSet</code> / etc</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: api\nannotations:\nhelmwave.app/show-service-messages: \"true\"\n</code></pre>"},{"location":"anno/#helmwaves-annotations","title":"Helmwave's annotations","text":"<p>Initially annotations used <code>helmwave.dev/</code> namespace</p> <p>In  v0.31.1 it was switched to <code>helmwave.app/</code> with backward compatibility. In  v0.32.0 support for old annotations was dropped.</p>"},{"location":"anno/#helmwaveappskip-diff","title":"<code>helmwave.app/skip-diff</code>","text":"<p>Introduced in  v0.18.0</p> <p>Skip resource for <code>helm diff</code> function.</p> <p>This is very useful for hiding Secret or sensitive data.</p> <p>Useful with <code>--show-secret</code> flag.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: my-secret\nannotations:\nhelmwave.app/skip-diff: \"true\"\n</code></pre>"},{"location":"anno/#kubedogs-annotations","title":"kubedog's annotations \ud83d\udc36","text":"<p>Inspired by werf annotations. Introduced in  v0.8.0</p> <p>Kubedog can't be enabled when there are releases in multiple contexts.</p> <p> example</p>"},{"location":"anno/#helmwaveapptrack-termination-mode","title":"<code>helmwave.app/track-termination-mode</code>","text":"<p>Defines a condition when helmwave should stop tracking of the resource:</p> <ul> <li><code>WaitUntilResourceReady</code> (default) \u2014 the entire deployment process would monitor and wait for the readiness of the   resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all   resources to be ready.</li> <li><code>NonBlocking</code> \u2014 the resource is tracked only if there are other resources that are not yet ready.</li> </ul>"},{"location":"anno/#helmwaveappfail-mode","title":"<code>helmwave.app/fail-mode</code>","text":"<p>Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process:</p> <ul> <li><code>FailWholeDeployProcessImmediately</code> (default) \u2014 the entire deploy process will fail with an error if an error occurs   for some resource.</li> <li><code>HopeUntilEndOfDeployProcess</code> \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and   continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource   back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again.</li> <li><code>IgnoreAndContinueDeployProcess</code> \u2014 resource errors do not affect the deployment process.</li> </ul>"},{"location":"anno/#helmwaveappfailures-allowed-per-replica","title":"<code>helmwave.app/failures-allowed-per-replica</code>","text":"<p>By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode.</p> <ul> <li>NUMBER</li> </ul>"},{"location":"anno/#helmwaveapplog-regex","title":"<code>helmwave.app/log-regex</code>","text":"<p>Define a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwaveapplog-regex-for-container","title":"<code>helmwave.app/log-regex-for-{container}</code>","text":"<p>Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwaveappskip-logs","title":"<code>helmwave.app/skip-logs</code>","text":"<p>Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"anno/#helmwaveappskip-logs-for-containers","title":"<code>helmwave.app/skip-logs-for-containers</code>","text":"<p>Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwaveappshow-logs-only-for-containers","title":"<code>helmwave.app/show-logs-only-for-containers</code>","text":"<p>Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwaveappshow-service-messages","title":"<code>helmwave.app/show-service-messages</code>","text":"<p>Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"ci/","title":"\ud83e\uddcb Continuous Integration","text":"<p>Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind.</p> <p>Let's see how we can get it working on popular CI software.</p>"},{"location":"ci/#github-action","title":"GitHub action","text":"<p>You can use official github action</p> <pre><code>name: Deploy\non:\npush:\n\n\njobs:\nexternal:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\n- uses: helmwave/setup-action@v0.2.0\nname: Install helmwave\nwith:\nversion: '0.36.0'\n- name: templating helmwave.yml.tpl  run: '[[ -f \"helmwave.yml.tpl\" ]] &amp;&amp; helmwave yml'\n- name: plan\nrun: helmwave build\n- name: deploy\nrun: helmwave up\n</code></pre>"},{"location":"ci/#gitlab-ci","title":"Gitlab-CI","text":"<pre><code>variables:\nHELMWAVE_LOG_LEVEL: debug\n\nhelmwave:\nstage: deploy\nenvironment:\nname: \"ref/$CI_COMMIT_REF_SLUG\"\nimage:\nname: ghcr.io/helmwave/helmwave:0.36.0\nentrypoint: [\"\"]\nbefore_script:\n- env | grep HELMWAVE\nscript:\n- '[[ -f \"helmwave.yml.tpl\" ]] &amp;&amp; helmwave yml'\n- cat helmwave.yml\n- helmwave build\n- helmwave up\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 weeks\n</code></pre> <p>See the  example</p>"},{"location":"ci/#kube-linter-and-helmwave","title":"Kube-Linter and Helmwave","text":"<pre><code>stages:\n- build\n- lint\n- deploy\n\n\nvariables:\nHELMWAVE_PLAN: $CI_PROJECT_DIR/.helmwave\n\n\n.helmwave: &amp;helmwave\nbefore_script:\n- printenv | grep HELMWAVE\n- ls -la $HELMWAVE_PLAN || true\nafter_script:\n- ls -la $HELMWAVE_PLAN\nimage:\nname: ghcr.io/helmwave/helmwave:0.36.0\nentrypoint: [ '' ]\n\n###############  BUILD  ################\nplan:\nstage: build\nextends: .helmwave\nartifacts:\npaths:\n- .helmwave\nexpire_in: 1 week\nscript:\n- '[[ -f \"helmwave.yml.tpl\" ]] &amp;&amp; helmwave yml'\n- cat helmwave.yml\n- helmwave build\n\n###############  LINT  ################\nkube-linter:\nstage: lint\nimage:\nname: stackrox/kube-linter:0.2.5-alpine\nentrypoint: [ '' ]\nscript:\n- /kube-linter lint $HELMWAVE_PLAN\n\n\nkubeval:\nstage: lint\nimage:\nname: garethr/kubeval\nentrypoint: [ '' ]\nscript:\n- /kubeval --force-color $HELMWAVE_PLAN/manifest/*.yml\n\n\npluto:\nstage: lint\nimage:\nname: quay.io/fairwinds/pluto:v5.1\nentrypoint: [ '' ]\nscript:\n- /pluto detect-files -d $HELMWAVE_PLAN\n\n###############  Deploy  ################\nup:\nstage: deploy\nextends: .helmwave\nwhen: manual\nscript:\n- helmwave up\n</code></pre>"},{"location":"cli/","title":"\ud83d\udee0 CLI Reference","text":"<pre><code>NAME:\n   helmwave - true release management for helm\n\nUSAGE:\n   helmwave [global options] command [command options] \n\nVERSION:\n   0.36.0\n\nDESCRIPTION:\n   This tool helps you compose your helm releases!\n   0. $ helmwave yml\n   1. $ helmwave build\n   2. $ helmwave up\n\n\nCOMMANDS:\n   yml      \ud83d\udcc4 render helmwave.yml.tpl -&gt; helmwave.yml\n   help, h  Shows a list of commands or help for one command\nBUILD:\n     build     \ud83c\udfd7 build a plan\n     diff, vs  \ud83c\udd9a show differences\n     validate  \ud83d\udec2 validate your plan\n     graph     show graph\n   DEPLOY:\n     up        \ud83d\udea2 apply your plan\n     list, ls  \ud83d\udc40 list of deployed releases\n     rollback  \u23ee  rollback your plan\n     status    \ud83d\udc41\ufe0fstatus of deployed releases\n     down      \ud83d\udd2a delete all\n   SUPPORT:\n     schema        generate json schema\n     version, ver  show shorts version\n     completion    generate completion script\n\nGLOBAL OPTIONS:\n   --cache-dir value  base directory for cache (default: \"/home/runner/.cache/helmwave\") [$HELMWAVE_CACHE_DIR, $HELMWAVE_CACHE_HOME]\n--help, -h         show help\n--version, -v      print the version\n\n   LOGGER\n\n   --log-color         on/off color (default: true) [$HELMWAVE_LOG_COLOR]\n--log-format value  You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT]\n--log-level value   You can set: [ debug | info | warn  | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL]\n--log-timestamps    Add timestamps to log messages (default: false) [$HELMWAVE_LOG_TIMESTAMPS]\n</code></pre> <p>workflow</p> <p>flowchart TD     step0[step 0: helmwave.yml.tpl] -- yml --&gt; step1[step 1: helmwave.yml] -- build --&gt; step2[step 2: .helmwave/planfile]     step2 --&gt; up(up)     step2 --&gt; down(down)     step2 --&gt; ls(ls)     step2 --&gt; s(status)     step2 --&gt; r(rollback)     step2 --&gt; g(graph)     step2 --&gt; v(validate)     step2 --&gt; diff(diff)  If you don't see a graph, please reload the page.</p>"},{"location":"cli/#yml","title":"<code>yml</code>","text":"<p>This command renders <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code>.</p> Flags <pre><code>--file value, -f value  main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--tpl value             main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n</code></pre>"},{"location":"cli/#-tpl","title":"<code>--tpl</code>","text":"<p>Set path to <code>helmwave.yml.tpl</code></p>"},{"location":"cli/#-file","title":"<code>--file</code>","text":"<p>Set path to <code>helmwave.yml</code></p>"},{"location":"cli/#-templater","title":"<code>--templater</code>","text":"<p>Introduced in  v0.17.0</p> <p>You can define template engine, which will be used to render <code>helmwave.yml</code> file or <code>values</code> files.</p> <p>Please visit templating reference for more details.</p>"},{"location":"cli/#build","title":"<code>build</code>","text":"<p>Helmwave builds plan in complete plan directory (<code>.helmwave</code> by default) that other commands use.</p> <p>A plan includes:</p> <ul> <li>Downloaded remote charts</li> <li>Downloaded and templated all used values files</li> <li>Rendered manifests for each release</li> <li>Markdown file with dependency graph as mermaid diagram</li> <li>Rendered <code>helmwave.yml</code> that uses plan files (e.g., downloaded chart and values)</li> </ul> Flags <p>As you can see, <code>build</code> command includes <code>yml</code> command flags.  You can pass <code>--yml</code> flag into <code>build</code> command for launching <code>yml</code> command before building a plan.</p> <pre><code>--graph-width value        set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--remote-source value      go-getter URL to download build sources [$HELMWAVE_REMOTE_SOURCE]\n--skip-unchanged           skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--3-way-merge                          show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--diff-mode value                      you can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--find-renames value                   enable rename detection if set to any value greater than 0. (default: 0) [$HELMWAVE_DIFF_FIND_RENAMES]\n--show-secret                          show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--strip-trailing-cr                    strip trailing carriage return on input (default: false) [$HELMWAVE_DIFF_STRIP_TRAILING_CR]\n--suppress value [ --suppress value ]  allows suppression of the values listed in the diff output (\"Secret\" for example) [$HELMWAVE_DIFF_SUPPRESS]\n--wide value                           show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--file value, -f value  main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--tpl value             main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--yml                   auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n</code></pre>"},{"location":"cli/#-yml","title":"<code>--yml</code>","text":"<p>Enable execute <code>yml</code> command before <code>build</code> command.</p> <pre><code>helmwave yml                                                              [\ud83d\ude43 aka INFO]: \ud83d\udcc4 YML is ready!\n        build plan with next command: helmwave build -f helmwave.yml\n</code></pre>"},{"location":"cli/#-tags","title":"<code>--tags</code>","text":"<p>Allow to filter releases by tags. You can use this flag multiple times.</p> <p>It works with <code>--match-all-tags</code> flag and <code>tags</code> field in <code>helmwave.yaml</code> file.</p> <p> example</p>"},{"location":"cli/#-match-all-tags","title":"<code>--match-all-tags</code>","text":"<p>Change behavior of <code>--tags</code> flag. If <code>--match-all-tags</code> is set, then all tags should be matched. Otherwise, at least one tag should be matched.</p> <p> example</p>"},{"location":"cli/#-skip-unchanged","title":"<code>--skip-unchanged</code>","text":"<p>Introduced in  v0.27.0</p> <p>This flag will skip unchanged  helm releases.</p> <pre><code>TODO: add example\n</code></pre>"},{"location":"cli/#-graph-width","title":"<code>--graph-width</code>","text":"<p>Introduced in  v0.27.1</p> <p>You can change logic of graph rendering by changing this flag.</p> <ul> <li>1: <code>--graph-width=1</code> - disable graph rendering</li> <li>2: <code>--graph-width=0</code> - try to detect max width of ceil by release name</li> <li>N&lt;0: <code>--graph-width=-10</code> - drop 10 symbols.</li> <li>N&gt;1: <code>--graph-width=10</code> - show only first 10 symbols.</li> </ul> <p>:material-docs: example</p>"},{"location":"cli/#-remote-source","title":"<code>--remote-source</code>","text":"<p>Introduced in  v0.33.0</p> <p>Remote source to use for building plan. go-getter URL format is used. The downloaded remote source is cached and the cache is reused.</p>"},{"location":"cli/#-diff-mode","title":"<code>--diff-mode</code>","text":"<p>Introduced in  v0.12.0</p> <ul> <li><code>live</code> - diff with live cluster</li> <li><code>plan</code> - diff with local plan</li> <li><code>none</code> - disable diff</li> </ul> <p></p>"},{"location":"cli/#-wide","title":"<code>--wide</code>","text":"<p>Set wide output for diff.</p> <pre><code>TODO: add example\n</code></pre>"},{"location":"cli/#-show-secret","title":"<code>--show-secret</code>","text":"<p>Introduced in  v0.16.0</p> <p>Enable showing secret values in diff output.</p> <pre><code>TODO: add example\n</code></pre>"},{"location":"cli/#-3-way-merge","title":"<code>--3-way-merge</code>","text":"<p>Introduced in  v0.24.4</p> <p>Enable 3-way merge for diff.</p> <pre><code>TODO: add example\n</code></pre>"},{"location":"cli/#-suppress","title":"<code>--suppress</code>","text":"<p>Introduced in  v0.35.0</p> <p>Allows suppression of the values listed in the diff output</p> <pre><code>helmwave build --suppress Secret\n</code></pre>"},{"location":"cli/#-strip-trailing-cr","title":"<code>--strip-trailing-cr</code>","text":"<p>Introduced in  v0.35.0</p> <p>strip trailing carriage return on input</p>"},{"location":"cli/#-find-renames","title":"<code>--find-renames</code>","text":"<p>Introduced in  v0.35.0</p> <p>Enable rename detection if set to any value greater than 0.</p>"},{"location":"cli/#up","title":"<code>up</code>","text":"<p>Helmwave will install repositories and  helm releases from a plan.</p> Flags <pre><code>--parallel-limit value  limit amount of parallel releases (default: 0) [$HELMWAVE_PARALLEL_LIMIT]\n--build                    auto build (default: false) [$HELMWAVE_AUTO_BUILD]\n--graph-width value        set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--remote-source value      go-getter URL to download build sources [$HELMWAVE_REMOTE_SOURCE]\n--skip-unchanged           skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--3-way-merge                          show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--diff-mode value                      you can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--find-renames value                   enable rename detection if set to any value greater than 0. (default: 0) [$HELMWAVE_DIFF_FIND_RENAMES]\n--show-secret                          show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--strip-trailing-cr                    strip trailing carriage return on input (default: false) [$HELMWAVE_DIFF_STRIP_TRAILING_CR]\n--suppress value [ --suppress value ]  allows suppression of the values listed in the diff output (\"Secret\" for example) [$HELMWAVE_DIFF_SUPPRESS]\n--wide value                           show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--kubedog                        enable/disable kubedog (default: false) [$HELMWAVE_KUBEDOG_ENABLED, $HELMWAVE_KUBEDOG]\n--kubedog-log-width value        set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH]\n--kubedog-start-delay value      delay kubedog start, don't make it too late (default: 1s) [$HELMWAVE_KUBEDOG_START_DELAY]\n--kubedog-status-interval value  interval of kubedog status messages: set -1s to stop showing status progress (default: 5s) [$HELMWAVE_KUBEDOG_STATUS_INTERVAL]\n--kubedog-timeout value          timeout of kubedog multitrackers (default: 5m0s) [$HELMWAVE_KUBEDOG_TIMEOUT]\n--kubedog-track-all              track almost all resources, experimental (default: false) [$HELMWAVE_KUBEDOG_TRACK_ALL]\n--progress                       enable progress logs of helm (INFO log level) (default: false) [$HELMWAVE_PROGRESS]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--file value, -f value  main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--tpl value             main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--yml                   auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n</code></pre>"},{"location":"cli/#-build","title":"<code>--build</code>","text":"<p>Enable execute <code>build</code> command before.</p> <p>And you can also use <code>--yml</code> flag that renders <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code> before running <code>--build</code> command.</p>"},{"location":"cli/#-progress","title":"<code>--progress</code>","text":"<p>Introduced in  v0.17.0</p> <p>Enable helm debug progress output.</p> falsetrue <pre><code>helmwave up --progress=false\n[\ud83d\ude43 aka INFO]: \ud83d\uddc4 sync repositories...\n[\ud83d\ude43 aka INFO]: \ud83d\uddc4 sync registries...\n[\ud83d\ude43 aka INFO]: \ud83d\udee5 sync releases...\n[\ud83d\ude43 aka INFO]: \ud83d\udee5 deploying... release: a@my-namespace\n[\ud83d\ude43 aka INFO]: \ud83d\udee5 deploying... release: b@my-namespace\n[\ud83d\ude43 aka INFO]: \u2705\n    release: b@my-namespace\n[\ud83d\ude43 aka INFO]: \u2705\n        release: a@my-namespace\n[\ud83d\ude43 aka INFO]: Success 2 / 2\n</code></pre> <pre><code>helmwave up --progress\n[\ud83d\ude43 aka INFO]: \ud83d\uddc4 sync repositories...\n[\ud83d\ude43 aka INFO]: \ud83d\uddc4 sync registries...\n[\ud83d\ude43 aka INFO]: \ud83d\udee5 sync releases...\n[\ud83d\ude43 aka INFO]: \ud83d\udee5 deploying... release: a@my-namespace\n[\ud83d\ude43 aka INFO]: \ud83d\udee5 deploying... release: b@my-namespace\n[\ud83d\ude43 aka INFO]: getting history for release b\n[\ud83d\ude43 aka INFO]: getting history for release a\n[\ud83d\ude43 aka INFO]: preparing upgrade for b\n[\ud83d\ude43 aka INFO]: preparing upgrade for a\n[\ud83d\ude43 aka INFO]: performing update for a\n[\ud83d\ude43 aka INFO]: performing update for b\n[\ud83d\ude43 aka INFO]: creating upgraded release for a\n[\ud83d\ude43 aka INFO]: creating upgraded release for b\n[\ud83d\ude43 aka INFO]: checking 4 resources for changes\n[\ud83d\ude43 aka INFO]: checking 4 resources for changes\n[\ud83d\ude43 aka INFO]: Patch Secret \"a-nats\" in namespace my-namespace\n[\ud83d\ude43 aka INFO]: Patch Secret \"b-nats\" in namespace my-namespace\n[\ud83d\ude43 aka INFO]: Looks like there are no changes for Service \"a-nats-headless\"\n[\ud83d\ude43 aka INFO]: Looks like there are no changes for Service \"b-nats-headless\"\n[\ud83d\ude43 aka INFO]: Patch Service \"a-nats\" in namespace my-namespace\n[\ud83d\ude43 aka INFO]: Patch Service \"b-nats\" in namespace my-namespace\n[\ud83d\ude43 aka INFO]: Patch StatefulSet \"a-nats\" in namespace my-namespace\n[\ud83d\ude43 aka INFO]: Patch StatefulSet \"b-nats\" in namespace my-namespace\n[\ud83d\ude43 aka INFO]: waiting for release a resources (created: 0 updated: 4  deleted: 0)\n[\ud83d\ude43 aka INFO]: beginning wait for 4 resources with timeout of 1m0s\n[\ud83d\ude43 aka INFO]: waiting for release b resources (created: 0 updated: 4  deleted: 0)\n[\ud83d\ude43 aka INFO]: beginning wait for 4 resources with timeout of 1m0s\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/a-nats. 0 out of 1 expected pods have been scheduled\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods have been scheduled\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/a-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods have been scheduled\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/a-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods have been scheduled\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/a-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods have been scheduled\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/a-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods have been scheduled\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/a-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is ready: my-namespace/a-nats. 1 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: updating status for upgraded release for a\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: \u2705\n        release: a@my-namespace\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is not ready: my-namespace/b-nats. 0 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: StatefulSet is ready: my-namespace/b-nats. 1 out of 1 expected pods are ready\n[\ud83d\ude43 aka INFO]: updating status for upgraded release for b\n[\ud83d\ude43 aka INFO]: \u2705\n        release: b@my-namespace\n[\ud83d\ude43 aka INFO]: Success 2 / 2\n</code></pre>"},{"location":"cli/#-parallel-limit","title":"<code>--parallel-limit</code>","text":"<p>Introduced in  v0.20.0</p> <p>Limit the number of parallel helm operations.</p> <p>Introduced in  v0.8.0</p>"},{"location":"cli/#-kubedog","title":"<code>--kubedog</code>","text":"<p>Enable kubedog.</p>"},{"location":"cli/#-kubedog-status-interval","title":"<code>--kubedog-status-interval</code>","text":"<p>Set interval for kubedog status.</p>"},{"location":"cli/#-kubedog-start-delay","title":"<code>--kubedog-start-delay</code>","text":"<p>Set delay before kubedog will start.</p>"},{"location":"cli/#-kubedog-timeout","title":"<code>--kubedog-timeout</code>","text":"<p>Set timeout for kubedog.</p>"},{"location":"cli/#-kubedog-log-width","title":"<code>--kubedog-log-width</code>","text":"<p>Set width of kubedog logboek.</p>"},{"location":"cli/#-kubedog-track-all","title":"<code>--kubedog-track-all</code>","text":"<p>Introduced in  v0.30.0</p> <p>Track all resources, not only <code>Deployment</code>, <code>DaemonSet</code>, <code>StatefulSet</code>, <code>Job</code>. Annotations are also respected for these resources but it wasn't tested.</p> <p>It will probably fail for some non-namespaced custom resources because kubedog can track only namespaced resources. In this case kubedog will fail with a warning</p>"},{"location":"cli/#down","title":"<code>down</code>","text":"<p>Introduced in  v0.12.2</p> <p>Helmwave will uninstall  helm releases from plan.</p> Flags <pre><code>--build                    auto build (default: false) [$HELMWAVE_AUTO_BUILD]\n--graph-width value        set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--remote-source value      go-getter URL to download build sources [$HELMWAVE_REMOTE_SOURCE]\n--skip-unchanged           skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--3-way-merge                          show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--diff-mode value                      you can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--find-renames value                   enable rename detection if set to any value greater than 0. (default: 0) [$HELMWAVE_DIFF_FIND_RENAMES]\n--show-secret                          show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--strip-trailing-cr                    strip trailing carriage return on input (default: false) [$HELMWAVE_DIFF_STRIP_TRAILING_CR]\n--suppress value [ --suppress value ]  allows suppression of the values listed in the diff output (\"Secret\" for example) [$HELMWAVE_DIFF_SUPPRESS]\n--wide value                           show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--file value, -f value  main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--tpl value             main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--yml                   auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n</code></pre> <pre><code>$ helmwave down      [\ud83d\ude43 aka INFO]: \u2705 frontend@test uninstalled!\n[\ud83d\ude43 aka INFO]: \u2705 database@test uninstalled!\n[\ud83d\ude43 aka INFO]: \u2705 backend@test uninstalled!\n</code></pre>"},{"location":"cli/#ls","title":"<code>ls</code>","text":"<p>Introduced in  v0.11.0</p> <p>Helmwave will get a list of  helm releases from a plan.</p> Flags <pre><code>--build                    auto build (default: false) [$HELMWAVE_AUTO_BUILD]\n--graph-width value        set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--remote-source value      go-getter URL to download build sources [$HELMWAVE_REMOTE_SOURCE]\n--skip-unchanged           skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--3-way-merge                          show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--diff-mode value                      you can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--find-renames value                   enable rename detection if set to any value greater than 0. (default: 0) [$HELMWAVE_DIFF_FIND_RENAMES]\n--show-secret                          show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--strip-trailing-cr                    strip trailing carriage return on input (default: false) [$HELMWAVE_DIFF_STRIP_TRAILING_CR]\n--suppress value [ --suppress value ]  allows suppression of the values listed in the diff output (\"Secret\" for example) [$HELMWAVE_DIFF_SUPPRESS]\n--wide value                           show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--file value, -f value  main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--tpl value             main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--yml                   auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n</code></pre> <pre><code>$ helmwave ls      [\ud83d\ude43 aka INFO]: Should be 3 releases\n   NAME    | NAMESPACE | REVISION |            UPDATED             |  STATUS  | CHART | VERSION  \n-----------+-----------+----------+--------------------------------+----------+-------+----------\n  frontend | test      |        1 | 2021-11-10 04:41:23.330989     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |          database | test      |        1 | 2021-11-10 04:41:23.353473     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |          backend  | test      |        1 | 2021-11-10 04:41:23.270076     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |\n</code></pre>"},{"location":"cli/#status","title":"<code>status</code>","text":"<p>Introduced in  v0.11.0</p> <p>Helmwave try getting status of  helm releases from a plan.</p> Flags <pre><code>--build                    auto build (default: false) [$HELMWAVE_AUTO_BUILD]\n--graph-width value        set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--remote-source value      go-getter URL to download build sources [$HELMWAVE_REMOTE_SOURCE]\n--skip-unchanged           skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--3-way-merge                          show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--diff-mode value                      you can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--find-renames value                   enable rename detection if set to any value greater than 0. (default: 0) [$HELMWAVE_DIFF_FIND_RENAMES]\n--show-secret                          show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--strip-trailing-cr                    strip trailing carriage return on input (default: false) [$HELMWAVE_DIFF_STRIP_TRAILING_CR]\n--suppress value [ --suppress value ]  allows suppression of the values listed in the diff output (\"Secret\" for example) [$HELMWAVE_DIFF_SUPPRESS]\n--wide value                           show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--file value, -f value  main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--tpl value             main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--yml                   auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n</code></pre> <pre><code>$ helmwave status      [\ud83d\ude43 aka INFO]: Status of frontend@test\n        status: deployed\n        revision: 1\nname: frontend\n        namespace: test\nchart: frontend-0.1.0\n        last deployed: 2021-11-10 04:41:23.330989 +0300 MSK\n[\ud83d\ude43 aka INFO]: Status of database@test\n        status: deployed\n        revision: 1\nname: database\n        namespace: test\nchart: database-0.1.0\n        last deployed: 2021-11-10 04:41:23.353473 +0300 MSK\n[\ud83d\ude43 aka INFO]: Status of backend@test\n        name: backend\n        namespace: test\nchart: backend-0.1.0\n        last deployed: 2021-11-10 04:41:23.270076 +0300 MSK\n        status: deployed\n        revision: 1\n</code></pre>"},{"location":"cli/#rollback","title":"<code>rollback</code>","text":"<p>Introduced in  v0.12.0</p> <p>Rollback  helm releases from a plan.</p> Flags <pre><code>--revision value                                   rollback all releases to this revision (default: -1)\n--build                    auto build (default: false) [$HELMWAVE_AUTO_BUILD]\n--graph-width value        set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--remote-source value      go-getter URL to download build sources [$HELMWAVE_REMOTE_SOURCE]\n--skip-unchanged           skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--3-way-merge                          show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--diff-mode value                      you can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--find-renames value                   enable rename detection if set to any value greater than 0. (default: 0) [$HELMWAVE_DIFF_FIND_RENAMES]\n--show-secret                          show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--strip-trailing-cr                    strip trailing carriage return on input (default: false) [$HELMWAVE_DIFF_STRIP_TRAILING_CR]\n--suppress value [ --suppress value ]  allows suppression of the values listed in the diff output (\"Secret\" for example) [$HELMWAVE_DIFF_SUPPRESS]\n--wide value                           show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--kubedog                        enable/disable kubedog (default: false) [$HELMWAVE_KUBEDOG_ENABLED, $HELMWAVE_KUBEDOG]\n--kubedog-log-width value        set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH]\n--kubedog-start-delay value      delay kubedog start, don't make it too late (default: 1s) [$HELMWAVE_KUBEDOG_START_DELAY]\n--kubedog-status-interval value  interval of kubedog status messages: set -1s to stop showing status progress (default: 5s) [$HELMWAVE_KUBEDOG_STATUS_INTERVAL]\n--kubedog-timeout value          timeout of kubedog multitrackers (default: 5m0s) [$HELMWAVE_KUBEDOG_TIMEOUT]\n--kubedog-track-all              track almost all resources, experimental (default: false) [$HELMWAVE_KUBEDOG_TRACK_ALL]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--file value, -f value  main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--tpl value             main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--yml                   auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n</code></pre>"},{"location":"cli/#-revision","title":"<code>--revision</code>","text":"<p>Rollback all releases to specific revision.</p> <p>Introduced in  v0.30.0</p>"},{"location":"cli/#-kubedog_1","title":"<code>--kubedog</code>","text":"<p>Enable kubedog.</p>"},{"location":"cli/#-kubedog-status-interval_1","title":"<code>--kubedog-status-interval</code>","text":"<p>Set interval for kubedog status.</p>"},{"location":"cli/#-kubedog-start-delay_1","title":"<code>--kubedog-start-delay</code>","text":"<p>Set delay before kubedog will start.</p>"},{"location":"cli/#-kubedog-timeout_1","title":"<code>--kubedog-timeout</code>","text":"<p>Set timeout for kubedog.</p>"},{"location":"cli/#-kubedog-log-width_1","title":"<code>--kubedog-log-width</code>","text":"<p>Set width of kubedog logboek.</p>"},{"location":"cli/#-kubedog-track-all_1","title":"<code>--kubedog-track-all</code>","text":"<p>Introduced in  v0.30.0</p> <p>Track all resources, not only <code>Deployment</code>, <code>DaemonSet</code>, <code>StatefulSet</code>, <code>Job</code>. Annotations are also respected for these resources but it wasn't tested.</p> <p>It will probably fail for some non-namespaced custom resources because kubedog can track only namespaced resources. In this case kubedog will fail with a warning</p> <pre><code>$ helmwave rollback      [\ud83d\ude43 aka INFO]: \u2705 frontend@test rollback!\n[\ud83d\ude43 aka INFO]: \u2705 database@test rollback!\n[\ud83d\ude43 aka INFO]: \u2705 backend@test rollback!\n</code></pre>"},{"location":"cli/#graph","title":"<code>graph</code>","text":"<p>Introduced in  v0.27.2</p> <p>Show only  graph of  helm releases from plan. Graph draws with  helmwave/asciigraph</p> Flags <pre><code>--build                    auto build (default: false) [$HELMWAVE_AUTO_BUILD]\n--graph-width value        set ceil width: 1 \u2013 disable graph; 0 \u2013 full names; N&gt;1 \u2013 show only N symbols; N&lt;0 \u2013 drop N symbols from end. (default: 0) [$HELMWAVE_GRAPH_WIDTH]\n--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--remote-source value      go-getter URL to download build sources [$HELMWAVE_REMOTE_SOURCE]\n--skip-unchanged           skip unchanged releases (default: false) [$HELMWAVE_SKIP_UNCHANGED]\n--3-way-merge                          show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--diff-mode value                      you can set: [ live | local | none ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--find-renames value                   enable rename detection if set to any value greater than 0. (default: 0) [$HELMWAVE_DIFF_FIND_RENAMES]\n--show-secret                          show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--strip-trailing-cr                    strip trailing carriage return on input (default: false) [$HELMWAVE_DIFF_STRIP_TRAILING_CR]\n--suppress value [ --suppress value ]  allows suppression of the values listed in the diff output (\"Secret\" for example) [$HELMWAVE_DIFF_SUPPRESS]\n--wide value                           show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--file value, -f value  main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML, $HELMWAVE_YML]\n--templater value       select template engine: [ sprig | gomplate ] (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]\n--tpl value             main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--yml                   auto helmwave.yml.tpl --&gt; helmwave.yml (default: false) [$HELMWAVE_AUTO_YML, $HELMWAVE_AUTO_YAML]\n</code></pre>"},{"location":"cli/#-graph-width_1","title":"<code>--graph-width</code>","text":"<p>Introduced in  v0.27.1</p> <p>You can change logic of graph rendering by changing this flag.</p> <ul> <li>1: <code>--graph-width=1</code> - disable graph rendering</li> <li>2: <code>--graph-width=0</code> - try to detect max width of ceil by release name</li> <li>N&lt;0: <code>--graph-width=-10</code> - drop 10 symbols.</li> <li>N&gt;1: <code>--graph-width=10</code> - show only first 10 symbols.</li> </ul> <p>:material-docs: example</p>"},{"location":"cli/#validate","title":"<code>validate</code>","text":"<p>Introduced in  v0.12.0</p> <p>Helmwave will validate a plan. Helmwave always validates plan before any command.</p> Flags <pre><code>--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n</code></pre> <pre><code>$ helmwave validate                                                          \n$ echo $?                   0\n</code></pre>"},{"location":"cli/#diff","title":"<code>diff</code>","text":"<p>Introduced in  v0.18.0</p> Flags <pre><code>--3-way-merge                          show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n--find-renames value                   enable rename detection if set to any value greater than 0. (default: 0) [$HELMWAVE_DIFF_FIND_RENAMES]\n--show-secret                          show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n--strip-trailing-cr                    strip trailing carriage return on input (default: false) [$HELMWAVE_DIFF_STRIP_TRAILING_CR]\n--suppress value [ --suppress value ]  allows suppression of the values listed in the diff output (\"Secret\" for example) [$HELMWAVE_DIFF_SUPPRESS]\n--wide value                           show line around changes (default: 5) [$HELMWAVE_DIFF_WIDE]\n</code></pre>"},{"location":"cli/#-wide_1","title":"<code>--wide</code>","text":"<p>Set wide output for diff.</p> <pre><code>TODO: add example\n</code></pre>"},{"location":"cli/#-show-secret_1","title":"<code>--show-secret</code>","text":"<p>Introduced in  v0.16.0</p> <p>Enable showing secret values in diff output.</p> <pre><code>TODO: add example\n</code></pre>"},{"location":"cli/#-3-way-merge_1","title":"<code>--3-way-merge</code>","text":"<p>Introduced in  v0.24.4</p> <p>Enable 3-way merge for diff.</p> <pre><code>TODO: add example\n</code></pre>"},{"location":"cli/#-suppress_1","title":"<code>--suppress</code>","text":"<p>Introduced in  v0.35.0</p> <p>Allows suppression of the values listed in the diff output</p> <pre><code>helmwave build --suppress Secret\n</code></pre>"},{"location":"cli/#-strip-trailing-cr_1","title":"<code>--strip-trailing-cr</code>","text":"<p>Introduced in  v0.35.0</p> <p>strip trailing carriage return on input</p>"},{"location":"cli/#-find-renames_1","title":"<code>--find-renames</code>","text":"<p>Introduced in  v0.35.0</p> <p>Enable rename detection if set to any value greater than 0.</p> <p>Diff has 2 subcommands <code>plan</code> and <code>live</code>.</p> <code>live</code><code>plan</code> <p>This command will diff with manifests in the  kubernetes cluster </p> options<pre><code>--plandir value, -p value  path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR, $HELMWAVE_PLAN]\n--3-way-merge  show 3-way merge diff (default: false) [$HELMWAVE_DIFF_3_WAY_MERGE]\n</code></pre> <pre><code>helmwave diff live\n</code></pre> <p>This command will diff with local plan</p> options<pre><code>--plandir1 value  path to plandir1 (default: \".helmwave/\") [$HELMWAVE_PLANDIR_1, $HELMWAVE_PLANDIR]\n--plandir2 value  path to plandir2 (default: \".helmwave/\") [$HELMWAVE_PLANDIR_2]\n</code></pre> <pre><code>helmwave diff plan\n</code></pre>"},{"location":"cli/#version","title":"<code>version</code>","text":"<p>Get version of current helmwave.</p> Long versionShort version <pre><code>$ helmwave --version  \nhelmwave version 0.36.0\n\n$ helmwave -v\nhelmwave version 0.36.0\n</code></pre> <pre><code>$ helmwave version\n0.36.0\n\n$ helmwave ver\n0.36.0\n</code></pre>"},{"location":"cli/#completion","title":"<code>completion</code>","text":"<p>Generates scripts for shell completion.</p>  bash zsh <p>Add this code to your ~/.bashrc</p> <pre><code>source &lt;(helmwave completion bash)\n</code></pre> <pre><code>echo \"source &lt;(helmwave completion bash)\" &gt;&gt; ~/.bashrc\n</code></pre> <p></p> <p>Add this code to your ~/.zshrc</p> <pre><code>source &lt;(helmwave completion zsh)\n</code></pre> <pre><code>echo \"source &lt;(helmwave completion zsh)\" &gt;&gt; ~/.zshrc\n</code></pre> <p></p>"},{"location":"cli/#schema","title":"<code>schema</code>","text":"<p>You can generate json schema for autocomplete and validate <code>helmwave.yml</code> in your IDE.</p> <pre><code>helmwave schema &gt; helmwave.schema.json\n</code></pre>"},{"location":"cli/#global-flags","title":"\ud83c\udff3\ufe0f Global flags","text":"<p>Global flags available in any command.</p> Flags <pre><code>--log-color         on/off color (default: true) [$HELMWAVE_LOG_COLOR]\n--log-format value  You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT]\n--log-level value   You can set: [ debug | info | warn  | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL]\n--log-timestamps    Add timestamps to log messages (default: false) [$HELMWAVE_LOG_TIMESTAMPS]\n</code></pre> <p>Helmwave uses  sirupsen/logrus as internal logger.</p>"},{"location":"cli/#-cache-dir","title":"<code>--cache-dir</code>","text":"<p>Introduced in  v0.33.0</p> <p>The directory to use for storing remote sources.</p>"},{"location":"cli/#-log-format","title":"<code>--log-format</code>","text":"<p>Helmwave supports different log formatters</p> features <code>text</code> <code>json</code> <code>pad</code> <code>emoji</code> (default) Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built <code>logrus</code> formatter) JSONFormatter (in-built <code>logrus</code> formatter) TextFormatter (in-built <code>logrus</code> formatter) logrus-emoji-formatter special for helmwave textjsonpademoji <pre><code>$ helmwave --log-format text build -f docs/examples/quick-start/helmwave.yml\nINFO \ud83d\udd28 Building releases...                       \nINFO \ud83d\udd28 Building graphs...                         \nINFO show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 b@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \nINFO \ud83d\udd28 Building values...                         \nINFO \ud83d\udd28 no values provided                          release=a@my-namespace\nINFO \ud83d\udd28 no values provided                          release=b@my-namespace\nINFO \ud83d\udd28 Building repositories...                   \nINFO \ud83d\udd28 Building registries...                     \nINFO \ud83d\uddc4 registry has been added to the plan         registry=registry-1.docker.io\nINFO \ud83d\udd28 Building charts...                         \nINFO Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3 \nINFO Digest: sha256:5f80350b8a85177e4a9c7ed968f77c47bedcc461418172fb66594bc61fa1ffac \nINFO Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3 \nINFO Digest: sha256:5f80350b8a85177e4a9c7ed968f77c47bedcc461418172fb66594bc61fa1ffac \nINFO \ud83d\udd28 Building manifests...                      \nINFO \u274e skipping updating dependencies for remote chart  release=b@my-namespace\nINFO \u274e skipping updating dependencies for remote chart  release=a@my-namespace\nINFO Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3 \nINFO Digest: sha256:5f80350b8a85177e4a9c7ed968f77c47bedcc461418172fb66594bc61fa1ffac \nINFO Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3 \nINFO Digest: sha256:5f80350b8a85177e4a9c7ed968f77c47bedcc461418172fb66594bc61fa1ffac\n...\n</code></pre> <pre><code>$ helmwave --log-format json build -f docs/examples/quick-start/helmwave.yml\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 Building releases...\",\n}\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 Building graphs...\",\n}\n{\n\"level\": \"info\",\n  \"msg\": \"show graph:\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 a@my-namespace  \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                   \\n                   \\n                   \\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 b@my-namespace  \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\",\n}\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 Building values...\",\n}\n</code></pre> <pre><code>$ helmwave --log-format pad build -f docs/examples/quick-start/helmwave.yml\nINFO    \ud83d\udd28 Building releases...                       \nINFO    \ud83d\udd28 Building graphs...                         \nINFO    show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 b@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \nINFO    \ud83d\udd28 Building values...                         \nINFO    \ud83d\udd28 no values provided                          release=b@my-namespace\nINFO    \ud83d\udd28 no values provided                          release=a@my-namespace\nINFO    \ud83d\udd28 Building repositories...                   \nINFO    \ud83d\udd28 Building registries...                     \nINFO    \ud83d\uddc4 registry has been added to the plan         registry=registry-1.docker.io\nINFO    \ud83d\udd28 Building charts...                         </code></pre> <pre><code>$ helmwave --log-format emoji build -f docs/examples/quick-start/helmwave.yml\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building releases...\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building graphs...\n[\ud83d\ude43 aka INFO]: show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 b@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building values...\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 no values provided\n        release: b@my-namespace\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 no values provided\n        release: a@my-namespace\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building repositories...\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building registries...\n[\ud83d\ude43 aka INFO]: \ud83d\uddc4 registry has been added to the plan\n        registry: registry-1.docker.io\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building charts...\n[\ud83d\ude43 aka INFO]: Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3\n</code></pre>"},{"location":"cli/#-log-level","title":"<code>--log-level</code>","text":"<p>This option manage how much information you want to get. This modern way instead of verbose (<code>-vvvvv</code>) logging.</p> _ <code>info</code> (default) <code>debug</code> <code>warn</code> <code>fatal</code> <code>panic</code> <code>trace</code> general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug without <code>--progress</code> \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug with <code>--progress</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 lifecycle hooks <code>show=true</code> \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 lifecycle hooks <code>show=false</code> \u274c \u2705 \u2705 \u2705 \u2705 \u2705 file content \u274c \u2705 \u274c \u2705 \u2705 \u2705  helm manifests, bug report \u274c \u274c \u274c \u274c \u274c \u2705"},{"location":"cli/#-log-color","title":"<code>--log-color</code>","text":"<p>Enable/Disable color in output.</p> --log-color=false--log-color=true <p></p> <p></p>"},{"location":"cli/#-log-timestamps","title":"<code>--log-timestamps</code>","text":"<p>Add additional block with timestamp information in logs.</p> textjsonemoji <pre><code>helmwave --log-timestamps --log-format text build -f docs/examples/quick-start/helmwave.yml \nINFO[2023-06-19T05:51:32+04:00] \ud83d\udd28 Building releases...                       \nINFO[2023-06-19T05:51:32+04:00] \ud83d\udd28 Building graphs...                         \nINFO[2023-06-19T05:51:32+04:00] show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 b@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \nINFO[2023-06-19T05:51:32+04:00] \ud83d\udd28 Building values...                         \nINFO[2023-06-19T05:51:32+04:00] \ud83d\udd28 no values provided                          release=b@my-namespace\nINFO[2023-06-19T05:51:32+04:00] \ud83d\udd28 no values provided                          release=a@my-namespace\nINFO[2023-06-19T05:51:32+04:00] \ud83d\udd28 Building repositories...                   \nINFO[2023-06-19T05:51:32+04:00] \ud83d\udd28 Building registries...                     \nINFO[2023-06-19T05:51:32+04:00] \ud83d\uddc4 registry has been added to the plan         registry=registry-1.docker.io\nINFO[2023-06-19T05:51:32+04:00] \ud83d\udd28 Building charts...                         \nINFO[2023-06-19T05:51:34+04:00] Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3 </code></pre> <pre><code>helmwave --log-timestamps --log-format json build -f docs/examples/quick-start/helmwave.yml {\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 Building releases...\",\n  \"time\": \"2023-06-19T05:52:24+04:00\"\n}\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 Building graphs...\",\n  \"time\": \"2023-06-19T05:52:24+04:00\"\n}\n{\n\"level\": \"info\",\n  \"msg\": \"show graph:\\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 a@my-namespace  \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n                   \\n                   \\n                   \\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\n\u2502 b@my-namespace  \u2502\\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\n\",\n  \"time\": \"2023-06-19T05:52:24+04:00\"\n}\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 Building values...\",\n  \"time\": \"2023-06-19T05:52:24+04:00\"\n}\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 no values provided\",\n  \"release\": \"b@my-namespace\",\n  \"time\": \"2023-06-19T05:52:24+04:00\"\n}\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 no values provided\",\n  \"release\": \"a@my-namespace\",\n  \"time\": \"2023-06-19T05:52:24+04:00\"\n}\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 Building repositories...\",\n  \"time\": \"2023-06-19T05:52:24+04:00\"\n}\n{\n\"level\": \"info\",\n  \"msg\": \"\ud83d\udd28 Building registries...\",\n  \"time\": \"2023-06-19T05:52:24+04:00\"\n}\n</code></pre> <pre><code>$ helmwave --log-timestamps build -f docs/examples/quick-start/helmwave.yml [2023-06-19T03:31:18+04:00] [\ud83d\ude43 aka INFO]: \ud83d\udd28 Building releases...\n[2023-06-19T03:31:18+04:00] [\ud83d\ude43 aka INFO]: \ud83d\udd28 Building graphs...\n[2023-06-19T03:31:18+04:00] [\ud83d\ude43 aka INFO]: show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 b@my-namespace  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[2023-06-19T03:31:18+04:00] [\ud83d\ude43 aka INFO]: \ud83d\udd28 Building values...\n[2023-06-19T03:31:18+04:00] [\ud83d\ude43 aka INFO]: \ud83d\udd28 no values provided\n        release: b@my-namespace\n[2023-06-19T03:31:18+04:00] [\ud83d\ude43 aka INFO]: \ud83d\udd28 no values provided\n        release: a@my-namespace\n[2023-06-19T03:31:18+04:00] [\ud83d\ude43 aka INFO]: \ud83d\udd28 Building repositories...\n</code></pre>"},{"location":"comparison/","title":"Comparison to alternatives","text":"<p>Some comparisons may be outdated as we don't check every release. If any of the tools have improved, please open a PR.</p>"},{"location":"comparison/#as-table","title":"As table","text":"\ud83c\udf0a Helmwave Helmfile Helmsman Syntax YAML + sprig/gomplate YAML + sprig TOML/YAML Code style snake_case camelCase camelCase Requirements No <code>kubectl</code>, <code>helm</code> <code>helm-diff</code> (optional: <code>helm-secrets</code>, <code>helm-s3</code>, <code>helm-git</code>) <code>kubectl</code>, <code>helm</code> <code>helm-diff</code> Helm execution function call of bundled  helm <code>os.Exec</code> <code>os.Exec</code>  helm diff function call of bundled helm-diff <code>os.Exec</code> <code>os.Exec</code> Live-tracking  k8s resources Kubedog No No Get application logs Kubedog No No Get  k8s events Kubedog and  helm progress No No Automatically rollback based on metrics <code>monitors</code> No No Labels <code>tags</code> <code>labels</code> ? Manage kube-context via iac Yes Yes Yes Parallel releases Yes Yes Releases with the same priority can be executed in parallel. Parallel limitations Smart DAG goroutine count with concurrency limitation concurrent  helm processes max number of concurrent  helm releases to run Releases dependencies <code>depends_on</code> <code>needs</code> Kind of (<code>priority</code>) Dependencies cross namespaces via <code>@</code> via <code>/</code> No Manage pending strategy Yes No No Explain graph dependencies Yes No No Latest image size Compatible with  helm v2 No Yes Yes OCI <code>registries</code> option in <code>repositories</code> only <code>pull</code>, not <code>login</code> Lifecycle Hooks Yes (pre_up, post_up, pre_down, post_down, pre_rollback, post_rollback, pre_build, post_build) Yes (prepare, preapply, presync, preuninstall, postuninstall, postsync, cleanup) No Sub-main config No Yes ? manage render values <code>renderer</code> option and options for setting delimiters by file extension ? Remote values HTTP/HTTPS only <code>go-getter</code> ? Planfile Yes No No Vault / AWS SSM via <code>gomplate</code> datasources custom functions ?"},{"location":"comparison/#why-not-bare-helm","title":"Why not bare Helm?","text":""},{"location":"comparison/#managing-multiple-environments","title":"Managing multiple environments","text":"<p>Imagine you have multiple environments for same release (e.g. dev, stage, production, etc.). You likely have different settings.</p>  helm\ud83c\udf0a helmwave <p>You will likely have bunch of bash scripts that run helm with different values files. It is quite hard to support and improve.</p> <p>Set up <code>helmwave.yml.tpl</code> to include different values for different environments.</p> <p>Check out  the example</p>"},{"location":"comparison/#passing-generated-values","title":"Passing generated values","text":"<p>For example, you need to pass docker image tag.</p>  helm\ud83c\udf0a helmwave <p>Either you template values file (e.g. with ansible/jinja2 or any other templater) or you pass every individual value via <code>--set</code>.</p> <p>Every values file are templated via <code>sprig</code> or <code>gomplate</code> which allows you to generate any values even with external commands.</p> <p>Check out  the example</p>"},{"location":"comparison/#install-multiple-releases","title":"Install multiple releases","text":"<p>Imagine you need to deploy more than 1 release (e.g. deploy 10+ microservices to dynamic feature environment).</p>  helm\ud83c\udf0a helmwave <p>Either deploy releases one-by-one or create an umbrella chart (we think it is bad pattern).</p> <p>All releases are deployed in parallel with a dependency mechanism.</p> <p>Check out  the example</p>"},{"location":"comparison/#managing-dependencies-between-releases","title":"Managing dependencies between releases","text":"<p>Imagine you need to deploy some DBMS and an app that uses it. While DBMS is provisioning (or scheduling) your app already starts failing probes. It may lead to failing app release.</p>  helm\ud83c\udf0a helmwave <p>Manually deploy releases one-by-one.</p> <p>Use <code>depends_on</code> to set up explicit dependencies between releases.</p>"},{"location":"comparison/#release-stuck-in-pending-state","title":"Release stuck in pending state","text":"<p>If your CI for some reason killed helm process your next <code>helm upgrade</code> will fail because release is in <code>pending-upgrade</code> state.</p>  helm\ud83c\udf0a helmwave <p>You need to either do <code>helm rollback</code> (doesn't work for <code>pending-install</code>) or <code>helm delete</code> (destructive in production) and try upgrade one more time.</p> <p>Use <code>pending_release_strategy</code> to automatically do rollbacks or delete before upgrade if required.</p>"},{"location":"comparison/#live-tracking-release","title":"Live-tracking release","text":"helm\ud83c\udf0a helmwave <p>You can enable debug logs which will provide you logs of what helm does.</p> <p>Use kubedog to show status progress.</p> <p>Check out  the example</p>"},{"location":"comparison/#why-not-helmfile","title":"Why not Helmfile ?","text":"<p>We don't consider helmwave as a helmfile killer. Helmfile is an awesome project that really inspired us to implement the same in a bit different way with some other features. Probably there would be no helmwave if there was no helmfile.</p>"},{"location":"comparison/#helm-execution","title":"Helm execution","text":"helmfile\ud83c\udf0a helmwave <p>Helmfile runs <code>helm</code> via <code>os.Exec</code>. It means that:</p> <ul> <li>You need <code>helm</code> binary as well as a lot of other dependencies (e.g. libc). Helmfile's official docker image requires for around 300MB.</li> <li>Helmfile collects, parses and outputs <code>helm</code> stdout/stderr. Any helm backward incompatibility (even occasional) may be a big pain in the ass.</li> <li><code>os.Exec</code> is not the fastest way to run helm. If 10ns of overhead does really matter to you.</li> </ul> <p>Helmwave runs <code>helm</code> as an internal bundled library. It means that:</p> <ul> <li>Helmwave already contains builtin specific (we try to keep it up to date) <code>helm</code> version.</li> <li>There are no helmwave dependencies at all - it can be completely static binary. Official docker image requires for around 30MB. And it can run both in musl and glibc environments.</li> <li>We constantly check out new <code>helm</code> features and try to enhance them in helmwave.</li> </ul>"},{"location":"comparison/#live-tracking-release_1","title":"Live-tracking release","text":"helmfile\ud83c\udf0a helmwave <p>Only helm progress is available although there is a discussion about kubedog integration.</p> <p>Use kubedog to show status progress.</p> <p>Check out  the example</p>"},{"location":"comparison/#release-stuck-in-pending-state_1","title":"Release stuck in pending state","text":"<p>If your CI for some reason killed helm process your next <code>helm upgrade</code> will fail because release is in <code>pending-upgrade</code> state.</p> helmfile\ud83c\udf0a helmwave <p>The same as for helm</p> <p>Use <code>pending_release_strategy</code> to automatically do rollbacks or delete before upgrade if required.</p>"},{"location":"comparison/#templating-engine","title":"Templating engine","text":"<p>By templating engine we understand collection of builtin functions for default golang templates.</p> helmfile\ud83c\udf0a helmwave <p>Helmfile only supports <code>sprig</code> as a template engine.</p> <p>Every values file can be templated via <code>sprig</code> or <code>gomplate</code> (or even non-templated at all). Gomplate is an awesome huge engine that has a lot of features.</p>"},{"location":"ide/","title":"\ud83d\udd0c IDE support","text":"<p>Currently, we don't have any plugins for popular IDEs. You can help us with it \ud83e\ude75.</p> <p>We can suggest you to use json schema for autocomplete and validate <code>helmwave.yml</code> in your IDE.</p> <p>You can generate schema with cli command <code>helmwave schema</code> and use it in your IDE.</p> <pre><code>helmwave schema &gt; helmwave.schema.json\n</code></pre> <p>Or you can get it from  github</p> <pre><code>wget -L https://github.com/helmwave/helmwave/releases/download/v0.36.0/schema.json -o helmwave.schema.json\n# latest version\nwget -L https://github.com/helmwave/helmwave/releases/latest/download/schema.json\n</code></pre>  VScode IntelliJ IDEA <p> settings.json</p> <pre><code>{\n\"yaml.schemas\": [\n{\n\"fileMatch\": [\n\"helmwave.yml\"\n],\n\"url\": \"https://github.com/helmwave/helmwave/releases/latest/download/schema.json\"\n}\n]\n}\n</code></pre> <p></p> <p> </p> <p>set file pattern: helmwave.yml</p> <p></p> <p>restart idea.</p> <p> original ticket</p>"},{"location":"install/","title":"\ud83d\udce5 Installation","text":"<p>You can install the pre-compiled binary from  releases,  packages, use Docker or compile from the source.</p> <p>Here are the steps for each of them:</p>"},{"location":"install/#mac-os","title":"Mac OS","text":"<p>Download one of releases</p>  brewwget <pre><code>brew install helmwave/tap/helmwave\n</code></pre> <pre><code>export VERSION=0.36.0\nexport ARCH=$(uname -m) # amd64, arm64\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_darwin_${ARCH}.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#linux","title":"Linux","text":"<p>Download one of releases</p> wget Debian RedHat Alpine <pre><code>export VERSION=0.36.0\nexport ARCH=$(uname -m) # amd64, arm64\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_linux_${ARCH}.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre> <pre><code>export VERSION=0.36.0\nexport ARCH=$(uname -m) # amd64, arm64\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_linux_${ARCH}.deb -o helmwave.deb\napt install ./helmwave.deb\n</code></pre> <pre><code>export VERSION=0.36.0\nexport ARCH=$(uname -m) # amd64, arm64\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_linux_${ARCH}.rpm -o helmwave.rpm\nyum localinstall ./helmwave.rpm\n</code></pre> <pre><code>export VERSION=0.36.0\nexport ARCH=$(uname -m) # amd64, arm64\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_linux_${ARCH}.apk -o helmwave.apk\napk add --allow-untrusted ./helmwave.apk\n</code></pre>"},{"location":"install/#windows","title":"Windows","text":"<p>Don't use helmwave.exe</p> <p>The windows releases  have issues #809, #805</p> <p>Recommended way is WSL.</p>"},{"location":"install/#containers","title":"Containers","text":"<p>We use 2 container registries. We recommend using the  GitHub container registry</p> Registry URL Pulls  Docker hub https://hub.docker.com  GitHub container registry https://ghcr.io not available  docker with dockerhub podman with ghcr.io <pre><code>docker pull diamon/helmwave\n\n# with tag\ndocker pull diamon/helmwave:0.36.0\n\ndocker run --entrypoint=ash -it --rm --name helmwave diamon/helmwave:0.36.0\n# helmwave version\n0.36.0\n#\n</code></pre> <pre><code>podman pull ghcr.io/helmwave/helmwave\n\n# with tag\npodman pull ghcr.io/helmwave/helmwave:0.36.0\n\npodman run --entrypoint=ash -it --rm --name helmwave ghcr.io/helmwave/helmwave:0.36.0\n# helmwave version\n0.36.0\n#\n</code></pre>"},{"location":"install/#go-get","title":"<code>go get</code>","text":"<p>You must install   first.</p> <pre><code>export VERSION=0.36.0\nGO111MODULE=on go get github.com/helmwave/helmwave/cmd/helmwave@$VERSION\n</code></pre>"},{"location":"install/#compile-from-source","title":"Compile from source","text":"<p>You must install   first.</p> <pre><code>git clone git@github.com:helmwave/helmwave.git\ncd helmwave\ngo build ./cmd/helmwave\nmv -f helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#install-with-marcosnilsbin","title":"Install with  marcosnils/bin","text":"<pre><code>bin install github.com/helmwave/helmwave\n</code></pre>"},{"location":"intro/","title":"Intro","text":"<p>\ud83c\udf0a Helmwave is helm-native tool for deploy your  helm Charts.</p>"},{"location":"intro/#features","title":"\ud83d\ude80 Features","text":"<p>We focus on speed execution, tiny size, pretty debugging.</p> <p>With \ud83c\udf0a helmwave you will become a superhero:</p> <ul> <li>Deploy multiple environments by one step</li> <li>Separate values for environments</li> <li>Common values for apps</li> <li>Keep a directory of chart value files</li> <li>Maintain changes in version control</li> <li>Template values</li> <li>Manage deploy behavior (<code>pending_release_strategy</code>, <code>depends_on</code>, <code>allow_failure</code>)</li> <li>Live tracking  kubernetes resources with kubedog</li> <li>Fetch data from external datasource like vault, aws ssm</li> <li>... and much more!</li> </ul> <p>\ud83c\udf0a Helmwave was inspired by docker-compose,  terraform and helmfile.</p> <p>We would like to express our gratitude to all contributors for their commits, authors of third-party dependencies and all open source communities \u2764\ufe0f</p>"},{"location":"pub/","title":"\ud83d\udcfa Publications","text":""},{"location":"pub/#devoops-conference","title":"\ud83d\udcfa DevOops conference","text":""},{"location":"pub/#new-wave-for-helm","title":"New Wave for Helm!","text":"<p>https://medium.com/wriketechclub/new-wave-for-helm-b9800733587f</p>"},{"location":"pub/#helmwave-is-true-release-manager","title":"\ud83d\udcc4 HelmWave is true release manager","text":"<p>https://diamon.medium.com/helmwave-is-true-release-manager-e7d085a6bd2d</p>"},{"location":"pub/#helmwave-v0193","title":"\ud83d\udcc4 HelmWave v0.19.3","text":"<p>https://habr.com/ru/post/575646/</p>"},{"location":"pub/#part-3-deployment","title":"\ud83d\udcfa Part 3. Deployment.","text":"<p>\u041d\u0430 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0432\u0435\u0431\u0438\u043d\u0430\u0440\u0435 \u0441\u043f\u0438\u043a\u0435\u0440\u044b \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0443\u0442 \u043e\u0431 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u0439 \u0434\u043e\u0441\u0442\u0430\u0432\u043a\u0438 \u0441\u043e\u0442\u0435\u043d \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u044d\u0442\u0438\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e HelmWave.</p>"},{"location":"pub/#helmwave-v018","title":"\ud83d\udcc4 HelmWave v0.18+","text":"<p>https://habr.com/ru/post/650963/</p>"},{"location":"pub/#helmwave-v0128","title":"\ud83d\udcc4 HelmWave v0.12.8","text":"<p>https://habr.com/ru/post/575646/</p>"},{"location":"pub/#sberdevconf-smartdev-conference","title":"\ud83d\udcfa SberDevConf / SmartDev conference","text":"<p>\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0435\u043c, \u043a\u0430\u043a \u043e\u0434\u043d\u0430 \u043c\u0438\u043a\u0440\u043e\u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438: \u043e\u0442 CI/CD \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432\u044b\u0445 \u043c\u0438\u043a\u0440\u043e\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0434\u043e \u0432\u0441\u0435\u0439 \u0438\u043d\u0444\u0440\u0430\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0432 \u043e\u0431\u043b\u0430\u043a\u0435. \u0417\u0430\u0447\u0435\u043c \u0438 \u043a\u0430\u043a \u043c\u044b \u0432\u0435\u0440\u0441\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0432\u043e\u043e\u0431\u0449\u0435 \u0432\u0441\u0451 \u0438 \u043f\u0440\u0438 \u0447\u0451\u043c \u0437\u0434\u0435\u0441\u044c \u0431\u043e\u0442\u044b? \u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f open-source-\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f helm-\u0440\u0435\u043b\u0438\u0437\u043e\u0432 \u2014 helmwave</p>"},{"location":"pub/#helmwave-v050","title":"\ud83d\udcc4 HelmWave v0.5.0","text":"<p>https://habr.com/ru/post/532596/</p>"},{"location":"tpl/","title":"\ud83d\udcc4 Templating","text":"<p>Helmwave using go templates for templating.</p> <p>Helmwave supports all built-in functions / <code>sprig</code> / <code>gomplate</code> and several custom functions. We recommend using <code>gomplate</code>.</p> flag<pre><code>--templater value   Select template engine: sprig or gomplate (default: \"sprig\") [$HELMWAVE_TEMPLATER, $HELMWAVE_TEMPLATE_ENGINE]`\n</code></pre> <p>Explain context  helm vs helmwave</p> <p>There is a different context between <code>helm</code> and <code>helmwave</code>. You can't pass variables from helmwave to your  helm chart templates. You should use helmwave to render values of your chart.</p> <p>Overriding templater</p> <p>You can override used templater using <code>renderer</code> option in values</p>"},{"location":"tpl/#sprig","title":"Sprig","text":"<ul> <li>  masterminds/sprig</li> <li> documentations</li> </ul> <p>If you've ever written  helm charts, then you're already familiar with it.</p>"},{"location":"tpl/#gomplate","title":"Gomplate","text":"<ul> <li>  hairyhenderson/gomplate</li> <li> documentations</li> </ul> <p><code>Gomplate</code> is a template renderer which supports a growing list of datasources, such as JSON (including EJSON - encrypted JSON), YAML,  AWS EC2 metadata, BoltDB,  Hashicorp Consul and  Hashicorp Vault secrets.</p>"},{"location":"tpl/#custom","title":"Custom","text":"<p>Custom functions will work with any template engine.</p>"},{"location":"tpl/#toyaml","title":"<code>toYaml</code>","text":"<p>The  <code>toYaml</code> function allows you to convert a value to YAML string. When has failed, the template rendering will fail with an error message.</p> <pre><code>{{ $yaml :=  $value | toYaml }}\n</code></pre>"},{"location":"tpl/#fromyaml","title":"<code>fromYaml</code>","text":"<p>The <code>fromYaml</code> function allows you to convert a YAML string to a value. When has failed, the template rendering will fail with an error message.</p> <pre><code>{{ $value :=  $yamlString | fromYaml }}\n</code></pre>"},{"location":"tpl/#exec","title":"<code>exec</code>","text":"<p>The <code>exec</code> function allows you to run a command, returning the stdout of the command. When the command fails, the template rendering will fail with an error message.</p> <pre><code>{{ $cmdOutpot := exec \"./mycmd\" (list \"arg1\" \"arg2\" \"--flag1\") }}\n</code></pre>"},{"location":"tpl/#setvalueatpath","title":"<code>setValueAtPath</code>","text":"<p>The <code>setValueAtPath</code> function allows you to set a value at a path. When has failed, the template rendering will fail with an error message.</p> <pre><code>{{ $value | setValueAtPath \"path.key\" $newValue }}\n</code></pre>"},{"location":"tpl/#requiredenv","title":"<code>requiredEnv</code>","text":"<p>The <code>requiredEnv</code> function allows you to declare a particular environment variable as required for template rendering. If the environment variable is unset or empty, the template rendering will fail with an error message.</p> <pre><code>{{ $envValue := requiredEnv \"envName\" }}\n</code></pre> <p>If the environment variable value starts with '/' (forward slash) and Git for Windows is used, you must set <code>MSYS_NO_PATHCONV=1</code> to preserve values as-is, or the environment variable value will be prefixed with the <code>C:\\Program Files\\Git</code>. Reference</p>"},{"location":"tpl/#required","title":"<code>required</code>","text":"<p>The <code>required</code> function returns the second argument as-is only if it is not empty. If empty, the template rendering will fail with an error message containing the first argument.</p> <pre><code>{{ $requiredValue :=  $value | required \"value not set\" }}\n</code></pre>"},{"location":"tpl/#readfile","title":"<code>readFile</code>","text":"<p>The <code>readFile</code> function allows you to read a file and return its content as the function output. On failure, the template rendering will fail with an error message.</p> <pre><code>{{ $fileContent := readFile \"./myfile\" }}\n</code></pre>"},{"location":"tpl/#get","title":"<code>get</code>","text":"<p>The <code>get</code> function allows you to get a value at a path. When defaultValue not set it will return nil. On failure, the template rendering will fail with an error message.</p> <pre><code>{{ $Getvalue := $value | get \"path.key\" \"defaultValue\" }}\n</code></pre>"},{"location":"tpl/#haskey","title":"<code>hasKey</code>","text":"<p>The <code>hasKey</code> function allows you to check if key exists in the value. Dot-separated key will recurse. On failure, the template rendering will fail with an error message.</p> <pre><code>{{ $exists := $value | hasKey \"path.key\" }}\n</code></pre>"},{"location":"tpl/#getvalues","title":"<code>getValues</code>","text":"<p>Introduced in  v0.36.0</p> <p>The <code>getValues</code> function returns the contents of another values file of the current release parsed as YAML. On failure, the template rendering will fail with an error message.</p> <pre><code>{{ $common := getValues \"common.yaml\" }}\n</code></pre> <p> example</p>"},{"location":"yaml/","title":"\ud83e\uddec helmwave.yml","text":"<p>This documentation describes all entities inside a <code>helmwave.yml</code></p> field required type default project \ud83d\ude45 string \"\" version \ud83d\ude45 string \"\" repositories \ud83d\ude45 array [] registries \ud83d\ude45 array [] lifecycle \ud83d\ude45 object {} releases \ud83d\ude45 array [] Short <code>helmwave.yml</code>Full <code>helmwave.yml</code> <pre><code>project: \"HelloWorld\"\nversion: \"0.36.0\"\nrepositories: []\nregistries: []\nreleases: []\nlifecycle:\npre_up: []\npost_up: []\npre_down: []\npost_down: []\npre_build: []\npost_build: []\npre_rollback: []\npost_rollback: []\n</code></pre> <pre><code>project: \"HelloWorld\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: stable\nurl: https://localhost:8080\n# private repositories\nusername: user\npassword: 12345679\n\n# cert\ncertFile: ./cert.pem\nkeyFile: ./key.pem\ncaFile: ./ca.pem\n\nlifecycle:\npre_build:\n- cmd: \"ls\"\nargs: [\"-l\", \"-a\"]\nshow: false\nallow_failure: false\n- echo \"run global pre_build script\"\npost_build:\n- echo \"run global post_build script\"\n\nregistries:\n- host: https://localhost:5000\n# private registries\nusername: oci_user\npassword: 98765431\ninsecure: false\n\n\nreleases:\n- name: my\nnamespace: prod\nchart:\nname: stable/my-chart\nversion: \"0.2.0\"\nca_file: \"\"\ncert_file: \"\"\nkey_file: \"\"\ninsecure: false\nkeyring: \"\"\npassword: \"\"\npass_credentials: false\nrepo_url: \"\"\nusername: \"\"\nverify: false\n\nstore:\ngreeting: \"HelloWorld\"\n\nlifecycle:\npre_up:\n- echo \"running pre_up script for my\"\npost_up:\n- echo \"running post_up script for my\"\npre_build:\n- echo \"running pre_build script for my\"\npost_build:\n- echo \"running post_build script for my\"\n\ndepends_on:\n- name: db@prod\ntag: prod\noptional: false\n\nvalues:\n- src: values.yml\ndelimiter_left: \"[[\"\ndelimiter_right: \"]]\"\nrender: false\nstrict: true\n\ntags:\n- my\n- product\n\npost_renderer: \"./gomplate\"\noffline_kube_version: \"1.22.0\"\ntimeout: \"5m\"\nmax_history: 3\ncontext: prod\ndescription: \"my chart\"\npending_release_strategy: rollback\nallow_failure: false\natomic: true\ncleanup_on_fail: false\ncreate_namespace: false\ndisable_hooks: false\ndisable_openapi_validation: false\nforce: false\nenable_dns: false\nrecreate: false\nreset_values: false\nreuse_values: false\nskip_crds: false\nsub_notes: false\nwait: true\nwait_for_jobs: true\n</code></pre>"},{"location":"yaml/#project","title":"project","text":"<p>Reserved for the future.</p>"},{"location":"yaml/#version","title":"version","text":"<p>This version for helmwave.</p> <p>Helmwave will check the current version and project version.</p> <p>In the future, it is planned to check major compatibility.</p> <p>Note that this is the version of the Helmwave itself (not your service/application) to check for compatibility of the schema, version, etc.</p> <p>RECOMMENDED: Set this explicitly to <code>helmwave version</code> command result to be safe later on.</p>"},{"location":"yaml/#registries","title":"registries[]","text":"<p>Introduced in  v0.19.0</p> <p>Describe which OCI registries need to be added.</p> field required type default host \u2705 string \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" insecure \ud83d\ude45 bool false  private oci public oci <pre><code>project: \"Example: oci private\"\nversion: \"0.36.0\"\n\nregistries:\n- host: localhost:5000\nusername: &lt;pass_username_here&gt;\npassword: &lt;pass_password_here&gt;\n\nreleases:\n- name: my\nchart:\nname: oci://localhost:5000/my-chart\nversion: 0.2.0 # best practice\n</code></pre> <pre><code>project: \"Example: oci public\"\nversion: \"0.36.0\"\n\nregistries:\n- host: ghcr.io\n\nreleases:\n- name: my\nchart:\nname: oci://ghcr.io/helmwave/unit-test-oci\nversion: 0.1.0 # best practice\n</code></pre>"},{"location":"yaml/#host","title":"host","text":"<p>Host of the registry.</p>"},{"location":"yaml/#username","title":"username","text":"<p>Username for the registry.</p> <p>only if registry is private</p>"},{"location":"yaml/#password","title":"password","text":"<p>Password for the registry.</p> <p>only if registry is private</p>"},{"location":"yaml/#repositories","title":"repositories[]","text":"<p> helm repositories also know as <code>helm repo add</code></p> field required type default name \u2705 string \"\" url \u2705 url \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" force \ud83d\ude45 bool false certFile \ud83d\ude45 string \"\" keyFile \ud83d\ude45 string \"\" caFile \ud83d\ude45 string \"\" insecure_skip_tls_verify \ud83d\ude45 bool false pass_credentials_all \ud83d\ude45 bool false <p>This repository will be stored in a local  helm repositories database.</p>"},{"location":"yaml/#name","title":"name","text":"<p>Local name alias.</p>"},{"location":"yaml/#url","title":"url","text":"<p>URL of the repository.</p>"},{"location":"yaml/#username_1","title":"username","text":"<p>Username for the repository.</p>"},{"location":"yaml/#password_1","title":"password","text":"<p>Password for the repository.</p>"},{"location":"yaml/#force","title":"force","text":"<p>Update existing repository exists if settings differ.</p>"},{"location":"yaml/#lifecycle","title":"lifecycle","text":"<p>Aka global hooks. Introduced in  v0.28.0</p> <p>We don't call lifecycle the hooks on purpose so as not to confuse you with the original functionality of  helm hooks.</p> field required type default pre_up \ud83d\ude45 []Hook [] post_up \ud83d\ude45 []Hook [] pre_down \ud83d\ude45 []Hook [] post_down \ud83d\ude45 []Hook [] pre_build \ud83d\ude45 []Hook [] post_build \ud83d\ude45 []Hook [] pre_rollback \ud83d\ude45 []Hook [] post_rollback \ud83d\ude45 []Hook [] flowchart LR     pre_build --&gt; post_build     post_build --&gt; pre_up --&gt; post_up     post_build --&gt; pre_down --&gt; post_down     post_build --&gt; pre_rollback --&gt; post_rollback  <p>environment</p> <p>Introduced in  v0.29.0</p> <p>To each lifecycle command several environment variables are passed:</p> <ul> <li><code>${HELMWAVE_LIFECYCLE_TYPE}</code> - contains lifecycle stage/type (<code>pre_build</code>/<code>post_build</code>/etc.)</li> <li><code>${HELMWAVE_LIFECYCLE_RELEASE_UNIQNAME}</code> - (only for per-release lifecycle) contains release   uniqname (<code>release@namespace</code>)</li> </ul> <p>Hook</p> field required type default cmd \u2705 string \"\" args \ud83d\ude45 array [] show \ud83d\ude45 bool true allow_failure \ud83d\ude45 bool false <p> example</p>"},{"location":"yaml/#cmd-args","title":"cmd, args","text":"short syntaxfull syntax <pre><code>version: 0.36.0\nlifecycle:\npre_build:\n- echo \"run global pre_build script\"\n</code></pre> <pre><code>version: 0.36.0\nlifecycle:\npre_build:\n- cmd: echo\nargs:\n- \"run global pre_build script\"\nshow: true\nallow_failure: false\n</code></pre>"},{"location":"yaml/#show","title":"show","text":"<p>Introduced in  v0.28.0</p> <p>Show output of the command.</p>"},{"location":"yaml/#allow_failure","title":"allow_failure","text":"<p>Introduced in  v0.29.0</p> <p>Allow failure of the command.</p>"},{"location":"yaml/#monitors","title":"monitors[]","text":"<p>Introduced in  v0.32.0</p> <p>Monitors run after all dependant releases succeeded. They are triggered every <code>interval</code> and end when:</p> <ul> <li>Either <code>success_threshold</code> is met - monitor succeeds</li> <li>Either <code>failure_threshold</code> is met - monitor fails</li> <li>Or <code>total_timeout</code> is triggered - monitor fails</li> </ul> field required type default name \u2705 string \"\" type \u2705 string \"\" total_timeout \ud83d\ude45 interval 5m iteration_timeout \ud83d\ude45 interval 10s interval \ud83d\ude45 interval 1m success_threshold \ud83d\ude45 int 3 failure_threshold \ud83d\ude45 int 3 prometheus \ud83d\ude45 object {} http \ud83d\ude45 object {} <p> example</p>"},{"location":"yaml/#name_1","title":"name","text":"<p>Monitor name, must be unique.</p>"},{"location":"yaml/#type","title":"type","text":"<p>Type of monitor to run. Must be one of:</p> <ul> <li><code>prometheus</code></li> <li><code>http</code></li> </ul>"},{"location":"yaml/#total_timeout","title":"total_timeout","text":"<p>Total timeout for whole monitor run. If monitor haven't finished within <code>total_timeout</code>, it is considered as failed.</p>"},{"location":"yaml/#iteration_timout","title":"iteration_timout","text":"<p>Timeout for each monitor iteration. If monitor iteration haven't finished within <code>iteration_timeout</code>, iteration is considered as failed.</p>"},{"location":"yaml/#interval","title":"interval","text":"<p>Interval between iterations. Must be lower than <code>iteration_timeout</code>.</p>"},{"location":"yaml/#success_threshold","title":"success_threshold","text":"<p>Count of sequential succeeded iterations that make monitor succeed.</p>"},{"location":"yaml/#failure_threshold","title":"failure_threshold","text":"<p>Count of sequential failed iterations that make monitor fail.</p>"},{"location":"yaml/#prometheus","title":"prometheus","text":"field required type default url \u2705 string \"\" expr \u2705 string \"\" insecure \ud83d\ude45 bool false"},{"location":"yaml/#url_1","title":"url","text":"<p>Prometheus base URL</p>"},{"location":"yaml/#expr","title":"expr","text":"<p>Prometheus expression to query on each iteration. Iteration is considered successful if expression returns 1 or more rows.</p>"},{"location":"yaml/#insecure","title":"insecure","text":"<p>Whether to skip SSL certificate validation</p>"},{"location":"yaml/#http","title":"http","text":"field required type default url \u2705 string \"\" expected_codes \u2705 []int [] method \ud83d\ude45 string \"HEAD\" body \ud83d\ude45 string \"\" headers \ud83d\ude45 object {} insecure \ud83d\ude45 bool false"},{"location":"yaml/#url_2","title":"url","text":"<p>URL to query</p>"},{"location":"yaml/#expected_codes","title":"expected_codes","text":"<p>List of expected HTTP response codes that are considered to be successful</p>"},{"location":"yaml/#method","title":"method","text":"<p>HTTP method to query</p>"},{"location":"yaml/#body","title":"body","text":"<p>HTTP body to send</p>"},{"location":"yaml/#headers","title":"headers","text":"<p>Map of HTTP headers to set in request</p>"},{"location":"yaml/#insecure_1","title":"insecure","text":"<p>Whether to skip SSL certificate validation</p>"},{"location":"yaml/#releases","title":"releases[]","text":"<p>Almost all options that are here are native  helm options.</p> field required type default <code>helmwave build</code> helm option name \u2705 string \"\" \u2705 namespace \u2705 string \"\" \u2705 chart \u2705 string or object {} \u2705 create_namespace \ud83d\ude45 bool false values \ud83d\ude45 array [] \u2705 tags \ud83d\ude45 array [] \u2705 offline_kube_version \ud83d\ude45 string \"\" \u2705 store \ud83d\ude45 object {} \u2705 lifecycle \ud83d\ude45 object {} \u2705 depends_on \ud83d\ude45 array [] \u2705 monitors \ud83d\ude45 array [] \u2705 allow_failure \ud83d\ude45 bool false pending_release_strategy \ud83d\ude45 string \"\" wait \ud83d\ude45 bool false wait_for_jobs \ud83d\ude45 bool false timeout \ud83d\ude45 interval 5m max_history \ud83d\ude45 int 0 context \ud83d\ude45 string \"\" description \ud83d\ude45 string \"\" atomic \ud83d\ude45 bool false cleanup_on_fail \ud83d\ude45 bool false disable_hooks \ud83d\ude45 bool false disable_open_api_validation \ud83d\ude45 bool false force \ud83d\ude45 bool false enable_dns \ud83d\ude45 bool false recreate \ud83d\ude45 bool false reset_values \ud83d\ude45 bool false reuse_values \ud83d\ude45 bool false reset_then_reuse_values \ud83d\ude45 bool false skip_crds \ud83d\ude45 bool false sub_notes \ud83d\ude45 bool false post_renderer \ud83d\ude45 array [] \u2705"},{"location":"yaml/#name_2","title":"name","text":"<p>Introduced in  v0.5.0</p> <p>Release name. I hope you know what it is.</p>"},{"location":"yaml/#namespace","title":"namespace","text":"<p>Introduced in  v0.5.0</p> <p> kubernetes namespace.</p>"},{"location":"yaml/#chart","title":"chart","text":"<p>Introduced in  v0.5.0</p> field required type default name \u2705 string \"\" version \ud83d\ude45 string \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" ca_file \ud83d\ude45 string \"\" cert_file \ud83d\ude45 string \"\" key_file \ud83d\ude45 string \"\" repo_url \ud83d\ude45 string \"\" insecure \ud83d\ude45 bool false keyring \ud83d\ude45 string \"\" pass_credentials \ud83d\ude45 bool false verify \ud83d\ude45 bool false skip_dependency_update \ud83d\ude45 bool false skip_refresh \ud83d\ude45 bool false <p><code>chart</code> can be an object or a string. If it's a string, it will be treated as a <code>name</code>.</p> short syntaxlong syntax <p>Introduced in  v0.20.0</p> <pre><code>releases:\n- name: my-release\nnamespace: my-namespace\nchart: my-chart\n</code></pre> <pre><code>releases:\n- name: my-release\nnamespace: my-namespace\nchart:\nname: my-chart\n</code></pre> <p>!!! tip \"If chart is remote it will be downloaded into <code>.helmwave/charts</code> and downloaded archive will be used during deploy.\"</p>"},{"location":"yaml/#name_3","title":"name","text":"<p>Can be <code>oci://</code>, local or repository chart.</p> ocilocalrepository <pre><code>releases:\n- name: my-release\nnamespace: my-namespace\nchart: oci://my-registry.io/my-chart\n</code></pre> <pre><code>releases:\n- name: my-release\nnamespace: my-namespace\nchart: ./my-chart\n</code></pre> <pre><code>releases:\n- name: my-release\nnamespace: my-namespace\nchart: bitnami/nats\n</code></pre>"},{"location":"yaml/#version_1","title":"version","text":"<p>Chart version. If not set, latest will be used.</p> <pre><code>releases:\n- name: my-release\nnamespace: my-namespace\nchart:\nname: my-chart\nversion: 1.2.3\n</code></pre>"},{"location":"yaml/#skip_dependency_update","title":"skip_dependency_update","text":"<p>Introduced in  v0.29.1</p> <p>Disable Helm dependency update.</p>"},{"location":"yaml/#skip_refresh","title":"skip_refresh","text":"<p>Introduced in  v0.29.1</p> <p>Disable Helm repository refresh.</p>"},{"location":"yaml/#create_namespace","title":"create_namespace","text":"<p>Introduced in  v0.12.0</p> <p>If set to <code>true</code> Helmwave will create the release namespace if not present.</p> <pre><code>helm upgrade --install --create-namespace my-release my-chart --namespace my-namespace\n</code></pre> <pre><code>releases:\n- name: my-release\nnamespace: my-namespace\nchart: my-chart\ncreate_namespace: true\n</code></pre>"},{"location":"yaml/#values","title":"values[]","text":"<p>Introduced in  v0.5.0</p> <p><code>values</code> can be an object or a string. If it's a string, it will be treated as a <code>src</code> field.</p> field required type default src \u2705 string \"\" delimiter_left \ud83d\ude45 string \"{{\" delimiter_right \ud83d\ude45 string \"}}\" strict \ud83d\ude45 bool false renderer \ud83d\ude45 string \"\" short syntaxfull syntax <pre><code>values:\n- values.yaml\n- values2.yaml\n</code></pre> <pre><code>values:\n- src: values.yaml\ndelimiter_left: \"{{\"\ndelimiter_right: \"}}\"\nstrict: false\nrenderer: \"\"\n</code></pre>"},{"location":"yaml/#src","title":"src","text":"<p>Path to values file. It can be local or remote.</p>"},{"location":"yaml/#delimiter_left-delimiter_right","title":"delimiter_left, delimiter_right","text":"<p>Introduced in  v0.24.0</p> <p>You can change the delimiter that helmwave uses to render values.</p> <p> example</p>"},{"location":"yaml/#renderer","title":"renderer","text":"<p>Introduced in  v0.32.0</p> <p>Allows overriding how values file is rendered. These renderers are supported:</p> <ul> <li><code>sprig</code> - template file with <code>sprig</code> (overrides global <code>--templater</code> argument)</li> <li><code>gomplate</code> - template file with <code>gomplate</code> (overrides global <code>--templater</code> argument)</li> <li><code>copy</code> - do not template file at all (overrides global <code>--templater</code> argument)</li> <li> <p><code>sops</code> - use sops to decode encrypted file</p> </li> <li> <p> example</p> </li> <li> example</li> </ul>"},{"location":"yaml/#strict","title":"strict","text":"<p>Introduced in  v0.20.0</p> <p>Allows to fail if values file doesn't exist.</p> <p> example</p>"},{"location":"yaml/#tags","title":"tags[]","text":"<p>Aka labels. Introduced in  v0.4.0</p> <p>Tags allow you to choose releases for build.</p> <p> example</p>"},{"location":"yaml/#offline_kube_version","title":"offline_kube_version","text":"<p>Introduced in  v0.27.3</p> <p>If <code>offline_kube_version</code> set helmwave will use this version to build plan. Without this option, helmwave will ask  kubernetes for a version. It is very useful if you want to build a plan without access to a cluster.</p> <p>Combine <code>offline_kube_version</code> and <code>--diff-mode=local</code> or <code>--diff-mode=none</code> to build a plan without kubernetes.</p> <p> example</p>"},{"location":"yaml/#store","title":"store","text":"<p>Introduced in  v0.2.0</p> <p>It allows passing your custom fields from <code>helmwave.yml</code> to values.</p> <p> example</p>"},{"location":"yaml/#lifecycle_1","title":"lifecycle","text":"<p>Aka hooks. Introduced in  v0.28.0</p> <p> example</p>"},{"location":"yaml/#depends_on","title":"depends_on[]","text":"<p>Introduced in  v0.9.0</p> <p><code>depends_on</code> can be an object or a string. If it's a string, it will be treated as a <code>name</code>.</p> field required type default name \ud83d\ude45 string \"\" tag \ud83d\ude45 string \"\" optional \ud83d\ude45 bool false <p><code>depends_on</code> is a list of releases that allow you to deploy a sequence.</p> <p>!!! example \"Example for 3-tier application\"</p> <pre><code>```mermaid\ngraph LR\n    frontend --&gt; backend --&gt; db;\n```\n*If you don't see a graph, please reload the page.*\n</code></pre> <p>Your <code>helmwave.yml</code> should look like this:</p> <pre><code>releases:\n- name: frontend\ndepends_on:\n- backend\nnamespace: test\n\n- name: backend\ndepends_on:\n- db\nnamespace: test\n\n- name: db\nallow_failure: false\nnamespace: test\n</code></pre>"},{"location":"yaml/#name_4","title":"name","text":"<p>Name of release (dependency) that has to be installed/upgraded before this release (dependant). If dependency is not in a plan, it will be added to a plan.</p> <p>Name support 2 kind of definitions: uniq name <code>&lt;release-name&gt;@&lt;namespace&gt;</code> or just <code>&lt;release-name&gt;</code>. If namespace is not specified, it will be taken from namespace filed of release.</p> <p>The same configuration can be written in 2 ways:</p> <code>&lt;release-name&gt;</code><code>&lt;release-name&gt;@&lt;namespace&gt;</code> <p>Introduced in  v0.21.1</p> <pre><code>releases:\n- name: backend\nnamespace: test\ndepends_on:\n- name: redis\n\n- name: redis\nnamespace: test\n</code></pre> <pre><code>releases:\n- name: backend\nnamespace: test\ndepends_on:\n- name: redis@test\n\n- name: redis\nnamespace: test\n</code></pre> <p>Both of them will be normalized to <code>redis@test</code> in a planfile.</p>"},{"location":"yaml/#tag","title":"tag","text":"<p>Introduced in  v0.24.0</p> <p>You can include all releases that match this tag to be added as dependencies. If a tag is not in a plan, it will be added to a plan.</p> <p>The planfile (<code>.helmwave/planfile</code> by default) will have a normalized list of releases instead of tags.</p>"},{"location":"yaml/#optional","title":"optional","text":"<p>Introduced in  v0.24.0</p> <p>If dependency is not found in all available releases, helmwave will not fail due to missing dependency.</p> <p>It allows setting explicit dependencies between releases. Dependant release will start upgrading only after all its dependencies finished upgrading</p>"},{"location":"yaml/#monitors_1","title":"monitors[]","text":"<p>Introduced in  v0.32.0</p> <p>Which monitors should be triggered after the releases is successfully deployed.</p> field required type default name \u2705 string \"\" action \ud83d\ude45 string \"\" <p> example</p>"},{"location":"yaml/#name_5","title":"name","text":"<p>Name of the monitor to trigger</p>"},{"location":"yaml/#action","title":"action","text":"<p>Action to perform if the monitor is failed. Should be one of:</p> <ul> <li><code>\"\"</code> - do nothing</li> <li><code>rollback</code> - rollback release to the previous version</li> <li><code>uninstall</code> - uninstall release</li> </ul> <p>If multiple monitors of the release failed and they have different actions, chosen action is a random one from the list.</p>"},{"location":"yaml/#allow_failure_1","title":"allow_failure","text":"<p>Introduced in  v0.15.0</p> <p>Allows all dependant releases to proceed even if release failed.</p>"},{"location":"yaml/#pending_release_strategy","title":"pending_release_strategy","text":"<p>Introduced in  v0.21.0</p> <p>Strategy to handle releases in pending statuses (<code>pending-install</code>, <code>pending-upgrade</code>, <code>pending-rollback</code>)</p> <p>If helmwave tries to upgrade release that is currently in one of the pending statuses, it will follow specified strategy:</p> <ul> <li><code>\"\"</code> (or not specified) - do nothing.  helm will fail in this case;</li> <li><code>rollback</code> - rollback release to a previous version. Upgrade will happen after <code>rollback</code> is complete;</li> <li><code>uninstall</code> - uninstall release. Upgrade will happen after <code>uninstall</code> is complete.</li> </ul>"},{"location":"yaml/#wait","title":"wait","text":"<p>We recommend using <code>wait</code> for all releases. It will wait for all resources to be ready.</p>"},{"location":"yaml/#wait_for_jobs","title":"wait_for_jobs","text":"<p>Introduced in  v0.12.0</p> <p>We recommend using <code>wait_for_jobs</code> for all releases. It will wait for all jobs to be completed.</p>"},{"location":"yaml/#timeout","title":"timeout","text":"<p>Introduced in  v0.5.0</p> <p>Time to wait for release to install.</p> <p>if you enable <code>kubedog</code> this option will be required.</p>"},{"location":"yaml/#max_history","title":"max_history","text":"<p>Introduced in  v0.5.0</p> <p>Limit the maximum number of revisions saved per release. Use 0 for no limit (default 0)</p> Recommendation is using <code>3</code> for this option. <p><code>previous release</code> + <code>current release</code> + <code>next release</code> = <code>3</code></p>"},{"location":"yaml/#context","title":"context","text":"<p>Introduced in  v0.24.0</p> <p>Allows using custom  kube-context for release.</p> <p>Kubedog can't be enabled when there are releases in multiple contexts.</p>"},{"location":"yaml/#description","title":"description","text":"<p>Introduced in  v0.12.0</p> <p>Additional information about release.</p>"},{"location":"yaml/#atomic","title":"atomic","text":"<p>Introduced in  v0.5.0</p> <p>if set, upgrade process rolls back changes made in case of failed upgrade.</p>"},{"location":"yaml/#cleanup_on_fail","title":"cleanup_on_fail","text":"<p>Introduced in  v0.12.0</p> <p>Allow deletion of new resources created in this upgrade when upgrade fails.</p>"},{"location":"yaml/#devel","title":"devel","text":"<p>Removed in  v0.29.3 as it wasn't functioning properly.</p> <p>If you need to use development version, set <code>version: \"&gt;0.0.0-0\"</code>.</p>"},{"location":"yaml/#disable_hooks","title":"disable_hooks","text":"<p>Introduced in  v0.12.0</p> <p>Disable pre/post upgrade   helm hooks</p>"},{"location":"yaml/#disable_open_api_validation","title":"disable_open_api_validation","text":"<p>Introduced in  v0.12.0</p> <p>If set, the upgrade process will not validate rendered templates against the Kubernetes OpenAPI Schema</p>"},{"location":"yaml/#force_1","title":"force","text":"<p>Introduced in  v0.5.0</p> <p>Force resource updates through a replacement strategy</p> <p>We don't recommend using this option.</p>"},{"location":"yaml/#enable_dns","title":"enable_dns","text":"<p>Introduced in  v0.27.1</p> <p>Enable DNS resolution in templates.</p>"},{"location":"yaml/#recreate","title":"recreate","text":"<p>Introduced in  v0.5.0</p> <p>Allows deleting and then creating resources (pods) when needed instead of updating.</p> <p>We don't recommend using this option.</p>"},{"location":"yaml/#reset_values","title":"reset_values","text":"<p>Introduced in  v0.5.0</p> <p>When upgrading, reset the values to the ones built into the chart.</p>"},{"location":"yaml/#reuse_values","title":"reuse_values","text":"<p>Introduced in  v0.5.0</p> <p>When upgrading, reuse the last release's values and merge it into the new configuration.</p> <p>We don't recommend using this option.</p>"},{"location":"yaml/#skip_crds","title":"skip_crds","text":"<p>Introduced in  v0.12.0</p> <p>If set, no CRDs will be installed. By default, CRDs are installed if not already present.</p> <p>Be careful with this option.</p> <ul> <li>If you have a release that depends on CRDs, it will fail.</li> <li>Sometimes you should enable <code>installCRD: true</code> in your chart like cert-manager.</li> </ul>"},{"location":"yaml/#sub_notes","title":"sub_notes","text":"<p>Introduced in  v0.12.0</p> <p>If set, render sub chart notes along with the parent. This option determines whether sub-notes are rendered in the chart.</p>"},{"location":"yaml/#post_renderer","title":"post_renderer","text":"<p>Introduced in  v0.24.0</p> <p>You can use custom commands to change rendered manifests.</p>"},{"location":"yaml/#show_notes","title":"show_notes","text":"<p>Introduced in  v0.31.0</p> <p>If enabled, rendered chart notes will be shown after successful release.</p>"},{"location":"examples/apps-per-ns/","title":"Apps per namespace","text":"<p>If you want to install each application in your own namespace. </p>"},{"location":"examples/apps-per-ns/#create-the-project","title":"Create the project","text":"<p>Project structure</p> <pre><code>\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u251c\u2500\u2500 values\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 harbor.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 minio.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plantuml.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 renovate.yml\n\u2514\u2500\u2500 vars.yaml\n</code></pre> <p>Step 1. Create <code>helmwave.yml.tpl</code></p> helmwave.yml.tpl<pre><code>project: \"Example: apps per own namespace\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n- name: renovate\nurl: https://docs.renovatebot.com/helm-charts\n- name: stevehipwell\nurl: https://stevehipwell.github.io/helm-charts\n\n\n\n# General options\n.options: &amp;options\nwait: true\nwait_for_jobs: true\nforce: false\ntimeout: 10m\natomic: false\nmax_history: 3\ncreate_namespace: true\n\n\nreleases:\n{{- with readFile \"vars.yaml\" | fromYaml | get \"releases\" }}\n{{ range $v := . }}\n\n#################################\n#                               #\n#      {{ $v | get \"name\" }}\n#                               #\n#################################\n- name: {{ $v | get \"name\" }}\nchart:\nname: {{ $v | get \"repo\" }}/{{ $v | get \"name\" }}\nversion: {{ $v | get \"version\" }}\nnamespace: {{ $v | get \"name\" }}\ntags: [{{ $v | get \"name\" }}]\nvalues:\n- values/{{ $v | get \"name\" }}.yml\n&lt;&lt;: *options\n\n{{ end }}\n{{- end }}\n</code></pre> <p>Step 2. Create <code>vars.yaml</code></p> <p>We will manage list apps with additional <code>vars.yaml</code> file</p> vars.yaml<pre><code>releases:\n- name: harbor\nrepo: bitnami\nversion: 11.0.5\n\n- name: minio\nrepo: bitnami\nversion: 9.0.2\n\n- name: plantuml\nrepo: stevehipwell\nversion: 3.3.0\n\n- name: renovate\nrepo: renovate\nversion: 25.76.1\n</code></pre> <p>Step 3. Render <code>helmwave.yml.tpl</code> -&gt;  <code>helmwave.yml</code></p> <pre><code>helmwave yml\n</code></pre> <p>You will get it</p> helmwave.yml<pre><code>project: \"Example: apps per own namespace\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n- name: renovate\nurl: https://docs.renovatebot.com/helm-charts\n- name: stevehipwell\nurl: https://stevehipwell.github.io/helm-charts\n\n\n\n# General options\n.options: &amp;options\nwait: true\nwait_for_jobs: true\nforce: false\ntimeout: 10m\natomic: false\nmax_history: 3\ncreate_namespace: true\n\n\nreleases:\n\n\n#################################\n#                               #\n#      harbor\n#                               #\n#################################\n- name: harbor\nchart:\nname: bitnami/harbor\nversion: 11.0.5\nnamespace: harbor\ntags: [harbor]\nvalues:\n- values/harbor.yml\n&lt;&lt;: *options\n\n\n\n#################################\n#                               #\n#      minio\n#                               #\n#################################\n- name: minio\nchart:\nname: bitnami/minio\nversion: 9.0.2\nnamespace: minio\ntags: [minio]\nvalues:\n- values/minio.yml\n&lt;&lt;: *options\n\n\n\n#################################\n#                               #\n#      plantuml\n#                               #\n#################################\n- name: plantuml\nchart:\nname: stevehipwell/plantuml\nversion: 3.3.0\nnamespace: plantuml\ntags: [plantuml]\nvalues:\n- values/plantuml.yml\n&lt;&lt;: *options\n\n\n\n#################################\n#                               #\n#      renovate\n#                               #\n#################################\n- name: renovate\nchart:\nname: renovate/renovate\nversion: 25.76.1\nnamespace: renovate\ntags: [renovate]\nvalues:\n- values/renovate.yml\n&lt;&lt;: *options\n</code></pre> <p>Step 4. Build plan</p> <pre><code>helmwave build\n</code></pre> <p>Step 5. Deploy plan</p> <p>if we want to deploy only <code>plantuml</code></p> <pre><code>helmwave build -t plantuml\nhelmwave up\n</code></pre> <p>Check out how to use HELMWAVE_TAGS</p>"},{"location":"examples/apps-per-ns/#cicd-with-gitlab-ci","title":"CI/CD with Gitlab-CI","text":".gitlab-ci.yml<pre><code>variables:\nHELMWAVE_LOG_LEVEL: debug\n\ndeploy to prod:\nstage: deploy\nwhen: manual\nenvironment:\nname: prod\nimage:\nname: ghcr.io/helmwave/helmwave:0.36.0\nentrypoint: [\"\"]\nbefore_script:\n- printenv | grep HELMWAVE\nscript:\n- helmwave yml\n- helmwave build\n- helmwave up\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 week\n</code></pre> <p>if you want to deploy only <code>plantuml</code> via CI.</p> <p></p> <p></p>"},{"location":"examples/aws-sm/","title":"AWS secret manager","text":"<p>Project structure</p> <pre><code>docs/examples/aws-sm\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values-secret.yaml\n\n0 directories, 3 files\n</code></pre> <p>Step 1. Create next secret</p> <pre><code>aws secretsmanager create-secret --name hello/foobar --secret-string '{\"foo\":\"bar\"}'\n</code></pre> <p>Step 2. Create <code>helmwave.yml</code></p> helmwave.yml<pre><code>project: \"Example: aws secret manager\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: app\nchart: bitnami/nginx\nnamespace: test\nvalues:\n- values-secret.yaml\n</code></pre> <p>Step 3. Create <code>values-secret.yaml</code></p> values-secret.yaml<pre><code>{{ defineDatasource \"aws\" \"aws+sm:///hello/foobar\" }}\n\nsecret: {{ datasource \"aws\" }}\n</code></pre> <p>Step 4. Run <code>helmwave build --templater gomplate</code></p> <p>You will get <code>secret: {\"foo\":\"bar\"}</code></p>"},{"location":"examples/built-in-release/","title":"Release object","text":"<p>This an example is demonstrating how to use the <code>release</code> object.</p> <p>Project Structure</p> <pre><code>docs/examples/built-in-release\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 _.yml\n\u2514\u2500\u2500 helmwave.yml\n\n0 directories, 3 files\n</code></pre> <p>Create <code>helmwave.yml</code></p> helmwave.yml<pre><code>project: \"Example: built-in object release\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: a\nchart: bitnami/nginx\nnamespace: test\nvalues:\n- _.yml\n\n- name: b\nchart: bitnami/nginx\nnamespace: test\nvalues:\n- _.yml\n</code></pre> <p>Create <code>_.yml</code></p> _.yml<pre><code>release: {{- toYaml .Release | nindent 2 }}\n</code></pre> <p>Run build</p> <pre><code>helmwave build\n</code></pre> <p>Show rendered values</p> <pre><code>tree .helmwave \n.helmwave\n\u251c\u2500\u2500 manifest\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 a@test.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 b@test.yml\n\u251c\u2500\u2500 planfile\n\u2514\u2500\u2500 values\n    \u251c\u2500\u2500 a@test\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml\n    \u2514\u2500\u2500 b@test\n        \u2514\u2500\u2500 454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml\n</code></pre> <p>TODO: fix titles</p> <code>a</code> values<code>b</code> values 454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml<pre><code>release:\nchart:\nname: bitnami/nginx\nname: a\nnamespace: test\nvalues:\n- src: _.yml\ndst: /var/folders/jn/gs32zb3s5939nf71b3836nq40000gr/T/values/a@test/454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml\n</code></pre> <pre><code>release:\nchart:\nname: bitnami/nginx\nname: b\nnamespace: test\nvalues:\n- src: _.yml\ndst: /var/folders/jn/gs32zb3s5939nf71b3836nq40000gr/T/values/b@test/454b1cc1f7b3ffe503edf44c0ad0eea2ac39923c.yml\n</code></pre>"},{"location":"examples/graph/","title":"Graph","text":"<p>This example shows how to use the <code>graph</code> command with the <code>--graph-width</code> flag.</p> helmwave.yml<pre><code>name: \"Example: graph\"\nversion: \"0.36.0\"\n\n# OCI: modern way to get chart from registry\nregistries:\n- host: registry-1.docker.io\n\n.options: &amp;options\nnamespace: my-namespace\ncreate_namespace: true\nwait: true\ntimeout: 1m\nmax_history: 3 # best practice\noffline_kube_version: 1.22.2\nchart:\n# For example, we will use bitnami/nats chart, because it's small and fast\nname: oci://registry-1.docker.io/bitnamicharts/nats\nversion: 7.8.3 # best practice\n\n# We will install 2 releases with the same options\nreleases:\n- name: short-name\n&lt;&lt;: *options\ndepends_on:\n- long-name-with-very-long-name\n\n- name: long-name-with-very-long-name\n&lt;&lt;: *options\n</code></pre> --graph-width 20--graph-width 15--graph-width -15--graph-width -5 <pre><code>helmwave graph --graph-width 20\n[\ud83d\ude43 aka INFO]: show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 short-name@my... \u251c\u2500\u2500\u2500\u2524 long-name-wit... \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>helmwave graph --graph-width 15\n[\ud83d\ude43 aka INFO]: show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 short-name@my... \u251c\u2500\u2500\u2500\u2524 long-name-wit... \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>helmwave graph --graph-width -15\n[\ud83d\ude43 aka INFO]: show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 short-name@my-namespace \u251c\u2500\u2500\u2500\u2524 long-name-with-very-... \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>helmwave graph --graph-width -5\n[\ud83d\ude43 aka INFO]: show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 short-name@my-namespace \u251c\u2500\u2500\u2500\u2524 long-name-with-very-long-name@... \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"examples/helmfile-migration/","title":"Helmfile migration","text":"<p>Suppose we have next <code>helmfile.yaml</code></p> helmfile.yaml<pre><code>environments:\ndev:\nkubeContext: dev\nvalues:\n- filebeat:\nenabled: true\n- minio:\nenabled: true\n- gitlab:\nenabled: false\n- grafana:\nenabled: true\nprod:\nkubeContext: prod\nvalues:\n- filebeat:\nenabled: true\n- minio:\nenabled: false\n- gitlab:\nenabled: true\n- grafana:\nenabled: false\n\nrepositories:\n- name: gitlab\nurl: https://charts.gitlab.io/\n\nhelmDefaults:\natomic: true\nhistoryMax: 3\ntimeout: 1200\n\nreleases:\n- name: gitlab\ncondition: gitlab.enabled\nchart: gitlab/gitlab\nversion: 7.2.2\nnamespace: gitlab\nvalues:\n- ./values/{{ .Environment.Name }}/gitlab.yaml\n\n- name: minio\ncondition: minio.enabled\nchart: ./charts/minio\nnamespace: minio\nvalues:\n- ./values/{{ .Environment.Name }}/minio.gotmpl\nsecrets:\n- ./values/{{ .Environment.Name }}/minio-secret.yaml\n\n- name: grafana\ncondition: grafana.enabled\nchart: ./charts/grafana\nnamespace: grafana\nvalues:\n- ./values/{{ .Environment.Name }}/grafana.yaml\nsecrets:\n- ./values/{{ .Environment.Name }}/grafana-secrets.yaml\n\n- name: filebeat\ncondition: filebeat.enabled\nchart: ./charts/filebeat\nnamespace: filebeat\nvalues:\n- ./values/{{ .Environment.Name }}/filebeat.yaml\nsecrets:\n- ./values/{{ .Environment.Name }}/filebeat-secrets.yaml\n</code></pre> <p>How to migrate it to <code>helmwave.yml.tpl</code>?</p>"},{"location":"examples/helmfile-migration/#repository","title":"Repository","text":"helmfile\ud83c\udf0a helmwave <pre><code>repositories:\n- name: gitlab\nurl: https://charts.gitlab.io/\n</code></pre> <pre><code>repositories:\n- name: gitlab\nurl: https://charts.gitlab.io/\n</code></pre>"},{"location":"examples/helmfile-migration/#environments","title":"Environments","text":"<p>Helmwave can use gomplate templater to resolve this problem.</p> <pre><code>export HELMWAVE_TEMPLATER=gomplate\n</code></pre> helmfile\ud83c\udf0a helmwave <pre><code>environments:\ndev:\nkubeContext: dev\nvalues:\n- filebeat:\nenabled: true\n- minio:\nenabled: true\n- gitlab:\nenabled: false\n- grafana:\nenabled: true\nprod:\nkubeContext: prod\nvalues:\n- filebeat:\nenabled: true\n- minio:\nenabled: false\n- gitlab:\nenabled: true\n- grafana:\nenabled: false\n</code></pre> <ol> <li> <p>Create <code>envs.yml</code> for storing environment settings.</p> envs.yml<pre><code>envs:\ndev:\nkubecontext: dev\nreleases:\nminio: true\ngrafana: true\nfilebeat: true\n\nprod:\nkubecontext: prod\nreleases:\ngitlab: true\nfilebeat: true\n</code></pre> </li> <li> <p>Add next code to helwmave.yml.tpl</p> helwmave.yml.tpl<pre><code>{{- $env := getenv \"ENV\" -}}\n\n{{- defineDatasource \"envs\" \"envs.yml\" -}}\n{{- $envs := (ds \"envs\").envs -}}\n\n# It'll chose env setting by $ENV\n{{ $e := index $envs $env }}\n...\n</code></pre> </li> </ol>"},{"location":"examples/helmfile-migration/#matching-release-with-environment","title":"Matching release with environment","text":"helmfile\ud83c\udf0a helmwave <pre><code>environments:\ndev:\nkubeContext: dev\nvalues:\n- gitlab:\nenabled: false\n...\nreleases:\n- name: gitlab\ncondition: gitlab.enabled\n...\n</code></pre> helwmave.yml.tpl<pre><code>...\n{{ $r := $e.releases }}\nreleases:\n{{- if (index $r \"gitlab\") }}\n- name: gitlab\nchart: gitlab/gitlab\nversion: 7.2.2\nnamespace: gitlab\ntags: [\"gitlab\"]\nvalues:\n- ./values/{{ $env }}/gitlab.yaml\n{{- end }}\n...\n</code></pre>"},{"location":"examples/helmfile-migration/#helm-defaults","title":"Helm Defaults","text":"<p>Just use yaml anchors.</p> helmfile\ud83c\udf0a helmwave <pre><code>helmDefaults:\natomic: true\nhistoryMax: 3\ntimeout: 1200\n</code></pre> helwmave.yml.tpl<pre><code>.options: &amp;options\natomic: true\ntimeout: 1200\nmax_history: 3\n\nreleases:\n- name: gitlab\n&lt;&lt;: *options\n</code></pre>"},{"location":"examples/helmfile-migration/#matching-kubecontext-with-environment","title":"Matching kubecontext with environment","text":"helmfile\ud83c\udf0a helmwave <pre><code>environments:\ndev:\nkubeContext: dev\n</code></pre> helwmave.yml.tpl<pre><code>{{- $kubecontext := $e.kubecontext -}}\n.options: &amp;options\natomic: true\ntimeout: 1200\nmax_history: 3\ncontext: {{ $kubecontext }}\n\nreleases:\n- name: gitlab\n&lt;&lt;: *options\n</code></pre>"},{"location":"examples/helmfile-migration/#results","title":"Results","text":"helmfile\ud83c\udf0a helmwave <pre><code>environments:\ndev:\nkubeContext: dev\nvalues:\n- filebeat:\nenabled: true\n- minio:\nenabled: true\n- gitlab:\nenabled: false\n- grafana:\nenabled: true\nprod:\nkubeContext: prod\nvalues:\n- filebeat:\nenabled: true\n- minio:\nenabled: false\n- gitlab:\nenabled: true\n- grafana:\nenabled: false\n\nrepositories:\n- name: gitlab\nurl: https://charts.gitlab.io/\n\nhelmDefaults:\natomic: true\nhistoryMax: 3\ntimeout: 1200\n\nreleases:\n- name: gitlab\ncondition: gitlab.enabled\nchart: gitlab/gitlab\nversion: 7.2.2\nnamespace: gitlab\nvalues:\n- ./values/{{ .Environment.Name }}/gitlab.yaml\n\n- name: minio\ncondition: minio.enabled\nchart: ./charts/minio\nnamespace: minio\nvalues:\n- ./values/{{ .Environment.Name }}/minio.gotmpl\nsecrets:\n- ./values/{{ .Environment.Name }}/minio-secret.yaml\n\n- name: grafana\ncondition: grafana.enabled\nchart: ./charts/grafana\nnamespace: grafana\nvalues:\n- ./values/{{ .Environment.Name }}/grafana.yaml\nsecrets:\n- ./values/{{ .Environment.Name }}/grafana-secrets.yaml\n\n- name: filebeat\ncondition: filebeat.enabled\nchart: ./charts/filebeat\nnamespace: filebeat\nvalues:\n- ./values/{{ .Environment.Name }}/filebeat.yaml\nsecrets:\n- ./values/{{ .Environment.Name }}/filebeat-secrets.yaml\n</code></pre> helmwave.yml.tpl<pre><code>{{- $env := getenv \"ENV\" -}}\n\n{{- defineDatasource \"envs\" \"envs.yml\" -}}\n{{- $envs := (ds \"envs\").envs -}}\n\n{{ $e := index $envs $env }}\n{{- $kubecontext := $e.kubecontext -}}\n{{ $r := $e.releases }}\n\nrepositories:\n- name: gitlab\nurl: https://charts.gitlab.io/\n\n.options: &amp;options\ncontext: {{ $kubecontext }}\natomic: true\ntimeout: 1200\nmax_history: 3\n\nreleases:\n{{- if (index $r \"gitlab\") }}\n- name: gitlab\n&lt;&lt;: *options\nchart: gitlab/gitlab\nversion: 7.2.2\nnamespace: gitlab\ntags: [\"gitlab\"]\nvalues:\n- ./values/{{ $env }}/gitlab.yaml\n{{- end }}\n\n{{- if (index $r \"minio\") }}\n- name: minio\nchart: ./charts/minio\nnamespace: minio\nvalues:\n- ./values/{{ $env }}/minio.yaml\nsecrets:\n- src: ./values/{{ $env }}/minio-secret.yaml\nrenderer: sops\n{{- end }}\n\n{{- if (index $r \"grafana\") }}\n- name: grafana\nchart: ./charts/grafana\nnamespace: grafana\nvalues:\n- src: ./values/{{ $env }}/grafana.yaml\nrenderer: copy\nsecrets:\n- src: ./values/{{ $env }}/grafana-secret.yaml\nrenderer: sops\n{{- end }}\n\n{{- if (index $r \"filebeat\") }}\n- name: filebeat\nchart: ./charts/filebeat\nnamespace: filebeat\nvalues:\n- ./values/{{ $env }}/filebeat.yaml\nsecrets:\n- src: ./values/{{ $env }}/filebeat-secret.yaml\nrenderer: sops\n{{- end }}\n</code></pre> envs.yml<pre><code>envs:\ndev:\nkubecontext: dev\nreleases:\nminio: true\ngrafana: true\nfilebeat: true\n\nprod:\nkubecontext: prod\nreleases:\ngitlab: true\nfilebeat: true\n</code></pre>"},{"location":"examples/kubedog/","title":"\ud83d\udc36 Kubedog","text":"<p>The first thing you need to do is turn on <code>kubedog</code></p> <pre><code>export HELMWAVE_KUBEDOG_ENABLED=true\n</code></pre> <p>Kubedog will track all your resources by default. For more information, see the annotation's documentation.</p> <p>Project Structure</p> <pre><code>docs/examples/kubedog\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values.yml\n\n0 directories, 3 files\n</code></pre> <p>Create <code>helmwave.yml</code></p> helmwave.yml<pre><code>#project: \"Example: kubedog\"\n#version: \"0.36.0\"\n\n\nregistries:\n- host: registry-1.docker.io\n\n#repositories:\n#  - name: bitnami\n#    url: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: my1\nchart:\nname: oci://registry-1.docker.io/bitnamicharts/redis\nversion: 16.8.5\nvalues:\n- values.yml\nnamespace: my-redis\ncreate_namespace: true\nwait: true\ntimeout: 3m\n</code></pre> <p>Then you should create <code>values.yml</code></p> values.yml<pre><code># Uncommented it if you need\ncommonAnnotations:\nhelmwave.app/show-service-messages: \"true\"\nhelmwave.app/show-logs-only-for-containers: \"redis\"\n\npodAnnotations:\ndatetime: {{ now }}\nblame: {{ env \"USER\" }}\n\nreplicaCount: 1\n\nauth:\nenabled: false\n\nmaster:\npersistence:\nenabled: false\n\nreplica:\npersistence:\nenabled: false\n</code></pre> <p>We are going to use <code>commonAnnotations</code>. </p> <p><code>commonAnnotations</code> is a part of bitnami common library chart.</p> <p>Run</p> <p>You can combine <code>--kubedog</code> and <code>--progress</code></p> <pre><code>helmwave up --build --kubedog\n</code></pre> <p>or </p> <pre><code>export HELMWAVE_KUBEDOG_ENABLED=true\nexport HELMWAVE_AUTO_BUILD=true\nhelmwave up\n</code></pre> <p>Output</p> <p></p>"},{"location":"examples/lifecycle/","title":"\u267b\ufe0f Lifecycle","text":"<p>Lifecycle defines scripts that are triggered by helmwave.</p> <p>Flow hooks for <code>helmwave up --build</code></p> flowchart LR       subgraph build         global_pre_build --&gt; pre_build         subgraph release context             pre_build --&gt; post_build          end         post_build --&gt; global_post_build     end      global_post_build --&gt; global_pre_up      subgraph up         global_pre_up --&gt; pre_up         subgraph release context             pre_up --&gt; post_up         end         post_up --&gt; global_post_up     end   helmwave.yml<pre><code># Global hooks\nlifecycle:\npre_build:\n- cmd: \"ls\"\nargs: [\"-l\", \"-a\"]\nshow: false\n- cmd: bash\nargs:\n- -c\n- echo \"global ${HELMWAVE_LIFECYCLE_TYPE}\"\npost_build:\n- echo \"global post_build\"\npre_up:\n- echo \"global pre_up\"\npost_up:\n- echo \"global post_up\"\npre_down:\n- echo \"global pre_down\"\npost_down:\n- echo \"global post_down\"\npre_rollback:\n- echo \"global pre_rollback\"\npost_rollback:\n- echo \"global post_rollback\"\n\nregistries:\n- host: registry-1.docker.io\n\n.options: &amp;options\nnamespace: my-namespace\ncreate_namespace: true\noffline_kube_version: 1.22.0\nwait: true\ntimeout: 1m\nmax_history: 3 # best practice\nchart:\n# For example, we will use bitnami/nats chart, because it's small and fast\nname: oci://registry-1.docker.io/bitnamicharts/nats\nversion: 7.8.3 # best practice\n\nreleases:\n- name: nats\n&lt;&lt;: *options\n# Special hooks for nats release\nlifecycle:\npre_up:\n- echo \"pre_up for nats\"\npost_up:\n- echo \"post_up for nats\"\npre_build:\n- cmd: bash\nargs:\n- -c\n- echo \"${HELMWAVE_LIFECYCLE_TYPE} for ${HELMWAVE_LIFECYCLE_RELEASE_UNIQNAME}\"\npost_build:\n- echo \"post_build for nats\"\npre_down:\n- echo \"pre_down for nats\"\npost_down:\n- echo \"post_down for nats\"\npre_rollback:\n- echo \"pre_rollback for nats\"\npost_rollback:\n- echo \"post_rollback for nats\"\n</code></pre> $ helmwave build --diff-mode none<pre><code>[\ud83d\ude43 aka INFO]: \ud83e\ude7c Running pre-build hooks...\n[\ud83d\ude43 aka INFO]: \ud83e\ude7c running hook...\n    cmd: bash\n    args:\n      - -c\n      - echo \"global ${HELMWAVE_LIFECYCLE_TYPE}\"\n[\ud83d\ude43 aka INFO]: global pre-build\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building releases...\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building graphs...\n[\ud83d\ude43 aka INFO]: show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nats@my-nam... \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building values...\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 no values provided\n    release: nats@my-namespace\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building repositories...\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building registries...\n[\ud83d\ude43 aka INFO]: \ud83d\uddc4 registry has been added to the plan\n    registry: registry-1.docker.io\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building charts...\n[\ud83d\ude43 aka INFO]: Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3\n[\ud83d\ude43 aka INFO]: Digest: sha256:5f80350b8a85177e4a9c7ed968f77c47bedcc461418172fb66594bc61fa1ffac\n[\ud83d\ude43 aka INFO]: \ud83d\udd28 Building manifests...\n[\ud83d\ude43 aka INFO]: \u274e skipping updating dependencies for remote chart\n    release: nats@my-namespace\n[\ud83d\ude43 aka INFO]: \ud83e\ude7c Running pre-build hooks...\n[\ud83d\ude43 aka INFO]: \ud83e\ude7c running hook...\n    args:\n      - -c\n      - echo \"${HELMWAVE_LIFECYCLE_TYPE} for ${HELMWAVE_LIFECYCLE_RELEASE_UNIQNAME}\"\ncmd: bash\n[\ud83d\ude43 aka INFO]: pre-build for nats@my-namespace\n[\ud83d\ude43 aka INFO]: Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3\n[\ud83d\ude43 aka INFO]: Digest: sha256:5f80350b8a85177e4a9c7ed968f77c47bedcc461418172fb66594bc61fa1ffac\n[\ud83d\ude43 aka INFO]: \ud83e\ude7c Running post-build hooks...\n[\ud83d\ude43 aka INFO]: \ud83e\ude7c running hook...\n    cmd: echo\nargs:\n      - \"post_build\n      - for\n      - nats\"\n[\ud83d\ude43 aka INFO]: \"post_build for nats\"\n[\ud83d\ude43 aka INFO]: \u2705  manifest done\nrelease: nats@my-namespace\n[\ud83d\ude43 aka INFO]: \ud83e\ude7c Running post-build hooks...\n[\ud83d\ude43 aka INFO]: \ud83e\ude7c running hook...\n    cmd: echo\nargs:\n      - \"global\n      - post_build\"\n[\ud83d\ude43 aka INFO]: \"global post_build\"\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n    releases:\n      - nats@my-namespace\n    repositories:\n      -\n    registries:\n      - registry-1.docker.io\n[\ud83d\ude43 aka INFO]: \ud83c\udd9a Diff manifests in the kubernetes cluster\n[\ud83d\ude48 aka WARNING]: I can't get release from k8s: failed to get release nats@my-namespace: release: not found\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Planfile is ready!\n</code></pre>"},{"location":"examples/monitors/","title":"\ud83d\udd0e Monitors","text":"<p>Monitors run custom releases validations and can rollback releases.</p>"},{"location":"examples/monitors/#monitors-flow","title":"Monitors flow","text":"flowchart LR     helmwave_up[helmwave up]     exit0[exit 0]     exit1[exit 1]      helmwave_up --&gt; release1[upgrade release 1]     helmwave_up --&gt; release2[upgrade release 2]     helmwave_up --&gt; release3[upgrade release 3]      release1 -- succeeded --&gt; monitor1_start     release2 -- succeeded --&gt; monitor1_start     release2 -- succeeded --&gt; monitor2_start     release3 -- succeeded --&gt; monitor2_start      monitor1_failed -.rollback release.-&gt;release_rollback1[rollback release 1]     monitor1_failed -.rollback release.-&gt;release_rollback2[rollback release 2]     monitor2_failed -.rollback release.-&gt;release_rollback2[rollback release 2]     monitor2_failed -.rollback release.-&gt;release_rollback3[rollback release 3]      release_rollback1 -.-&gt; exit1     release_rollback2 -.-&gt; exit1     release_rollback3 -.-&gt; exit1      monitor1_succeeded -.-&gt; exit0     monitor2_succeeded -.-&gt; exit0      subgraph monitor1[Monitor 1]         monitor1_start[Monitor start]         monitor1_iteration[Monitor iteration]         monitor1_failed[Monitor failed]         monitor1_succeeded[Monitor succeeded]          monitor1_start --&gt; monitor1_iteration         monitor1_iteration --next iteration--&gt; monitor1_iteration         monitor1_iteration --failure threshold or total timeout--&gt;monitor1_failed         monitor1_iteration --success threshold--&gt;monitor1_succeeded     end      subgraph monitor2[Monitor 2]         monitor2_start[Monitor start]         monitor2_iteration[Monitor iteration]         monitor2_failed[Monitor failed]         monitor2_succeeded[Monitor succeeded]          monitor2_start --&gt; monitor2_iteration         monitor2_iteration --next iteration--&gt; monitor2_iteration         monitor2_iteration --failure threshold or total timeout--&gt;monitor2_failed         monitor2_iteration --success threshold--&gt;monitor2_succeeded     end  <ul> <li>Each monitor starts when its all dependant releases succeeded</li> <li>Each monitor runs its iterations every <code>iterval</code> with <code>iteration_timeout</code></li> <li>Consecutive successful iterations are counted towards <code>success_threshold</code></li> <li>Consecutive failed iterations are counted towards <code>failure_threshold</code></li> <li>After all monitors exited dependant releases do actions for their failed monitors </li> </ul>"},{"location":"examples/monitors/#demo","title":"Demo","text":"helmwave.yml<pre><code>registries:\n- host: registry-1.docker.io\n\nmonitors:\n- name: nats-up-metric\ntype: prometheus\ntotal_timeout: 1m # fail if it flaps between success and failure for so long\niteration_timeout: 1s\ninterval: 2s\nsuccess_threshold: 5\nfailure_threshold: 5\nprometheus:\nurl: http://localhost:9090\nexpr: |\nup == 1\n- name: nats-delivered-metric\ntype: prometheus\ntotal_timeout: 1m # fail if it flaps between success and failure for so long\niteration_timeout: 5s\ninterval: 10s\nsuccess_threshold: 5\nfailure_threshold: 5\nprometheus:\nurl: http://localhost:9090\nexpr: |\nsum(rate(nats_consumer_delivered_consumer_seq[15s])) &gt; 0\n\n.options: &amp;options\nnamespace: nats\ncreate_namespace: true\nwait: true\ntimeout: 1m\nmax_history: 3 # best practice\nchart:\n# For example, we will use bitnami/nats chart, because it's small and fast\nname: oci://registry-1.docker.io/bitnamicharts/nats\nversion: 7.8.3 # best practice\n\nreleases:\n- name: nats\n&lt;&lt;: *options\nmonitors:\n- name: nats-up-metric\n- name: nats-delivered-metric\n</code></pre> $ helmwave build --diff-mode none<pre><code>[INFO]: \ud83d\udd28 Building releases...\n[INFO]: \ud83d\udd28 Building values...\n[INFO]: \ud83d\udd28 no values provided\n    release: nats@nats\n[INFO]: \ud83d\udd28 Building repositories...\n[INFO]: \ud83d\udd28 Building registries...\n[INFO]: \ud83d\uddc4 registry has been added to the plan\n    registry: registry-1.docker.io\n[INFO]: \ud83d\udd28 Building charts...\n[INFO]: Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3\n[INFO]: Digest: sha256:5f80350b8a85177e4a9c7ed968f77c47bedcc461418172fb66594bc61fa1ffac\n[INFO]: \ud83d\udd28 Building manifests...\n[INFO]: \u274e skipping updating dependencies for remote chart\n    release: nats@nats\n[INFO]: Pulled: registry-1.docker.io/bitnamicharts/nats:7.8.3\n[INFO]: Digest: sha256:5f80350b8a85177e4a9c7ed968f77c47bedcc461418172fb66594bc61fa1ffac\n[INFO]: \u2705  manifest done\nrelease: nats@nats\n[INFO]: \ud83d\udd28 Building graphs...\n[INFO]: show graph:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nats@nats \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[INFO]: \ud83c\udfd7 Plan\n    registries: - registry-1.docker.io\n    releases: - nats@nats\n    repositories: - [INFO]: \ud83c\udd9a Skip diffing\n[INFO]: \ud83c\udfd7 Planfile is ready!\n[INFO]: \ud83c\udfd7 Plan\n    releases: - nats@nats\n    repositories: - registries: - registry-1.docker.io\n[INFO]: \ud83d\uddc4 sync repositories...\n[INFO]: \ud83d\uddc4 sync registries...\n[INFO]: \ud83d\udee5 sync releases...\n[INFO]: \ud83d\udee5 deploying... release: nats@nats\n[INFO]: \u2705\n    release: nats@nats\n[INFO]: monitor succeeded\n    monitor: nats-up-metric\n    streak: 1/5\n[INFO]: monitor succeeded\n    monitor: nats-up-metric\n    streak: 2/5\n[INFO]: monitor succeeded\n    streak: 3/5\n    monitor: nats-up-metric\n[INFO]: monitor succeeded\n    streak: 4/5\n    monitor: nats-up-metric\n[INFO]: monitor did not succeed\n    monitor: nats-delivered-metric\n    streak: 1/5\n    error: result is empty\n[INFO]: monitor succeeded\n    monitor: nats-up-metric\n    streak: 5/5\n[INFO]: \u2705\n    monitor: nats-up-metric\n[INFO]: monitor did not succeed\n    monitor: nats-delivered-metric\n    streak: 2/5\n    error: result is empty\n[INFO]: monitor did not succeed\n    error: result is empty\n    monitor: nats-delivered-metric\n    streak: 3/5\n[INFO]: monitor did not succeed\n    error: result is empty\n    streak: 4/5\n    monitor: nats-delivered-metric\n[INFO]: monitor did not succeed\n    monitor: nats-delivered-metric\n    streak: 5/5\n    error: result is empty\n[ERROR]: \u274c monitor failed\n    monitor: nats-delivered-metric\n    error: monitor triggered failure threshold\n[ERROR]: monitors failed, need to take actions\n    error: one of goroutines in waitgroup sent error: 1 error occurred:\n    * monitor triggered failure threshold\n\n\n[INFO]: chose action to perform for failed monitors\n    action: rollback\n    release: nats@nats\n[INFO]: Releases Success 1 / 1\n[INFO]: Monitors Success 1 / 2\nNAME          |             ERROR               \n------------------------+---------------------------------\n  nats-delivered-metric | \u001b[1;41mmonitor triggered failure\u001b[0m       | threshold                       [FATAL]: deploy failed\n</code></pre>"},{"location":"examples/oci-private/","title":"OCI private registry","text":"<p>Just add <code>oci://</code> to your chart name and define a registry.</p> helmwave.yml<pre><code>project: \"Example: oci private\"\nversion: \"0.36.0\"\n\nregistries:\n- host: localhost:5000\nusername: &lt;pass_username_here&gt;\npassword: &lt;pass_password_here&gt;\n\nreleases:\n- name: my\nchart:\nname: oci://localhost:5000/my-chart\nversion: 0.2.0 # best practice\n</code></pre>"},{"location":"examples/oci-public/","title":"OCI public registry","text":"<p>This example demonstrates how to use public repositories with <code>ghcr.io</code></p> helmwave.yml<pre><code>project: \"Example: oci public\"\nversion: \"0.36.0\"\n\nregistries:\n- host: ghcr.io\n\nreleases:\n- name: my\nchart:\nname: oci://ghcr.io/helmwave/unit-test-oci\nversion: 0.1.0 # best practice\n</code></pre>"},{"location":"examples/pass-git-commit/","title":"Restart pods via git-commit","text":"<p>Project Structure</p> <pre><code>docs/examples/pass-git-commit\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values.yml\n\n0 directories, 3 files\n</code></pre> helmwave.yml<pre><code>project: \"Example: pass git commit\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: my-app\nchart: bitnami/nginx\nvalues:\n- values.yml\nnamespace: my-namespace\ncreate_namespace: true\n</code></pre> <p><code>nginx/template/deployment.yaml</code> looks like that:</p> <pre><code>    ...\nmetadata:  {{- with .Values.podAnnotations }}  annotations:  {{- toYaml . | nindent 8 }}  {{- end }}\n...\n</code></pre> <p>We will pass pod annotations with  <code>values</code></p> <p>Suppose that <code>CI_COMMIT_SHORT_SHA</code> contains commit short sha hash.</p> values.yml<pre><code>podAnnotations:\ngitCommit: {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}\n</code></pre> <p>Run</p> <pre><code>helmwave build\nhelmwave up\n</code></pre> <p>or <code>helmwave up --build</code></p>"},{"location":"examples/pass-git-tag/","title":"Git tag -&gt; image tag","text":"<p>Suppose <code>my-chart</code> has default <code>values.yaml</code>:</p> <pre><code>image:\nrepository: registry.gitlab.local/example/app\ntag: v1.0.0\n...\n</code></pre> <p>If we need to create CI/CD pipeline, we need use next script</p> <pre><code>helm upgrade --instal my-release my-chart-repo/my-chart-app --set=\"image.tag=$CI_COMMIT_TAG\" -n my-namespace\n</code></pre> <p>HelmWave allows use declarative way to approach this goal.</p> <p>Project structure</p> <pre><code>docs/examples/pass-git-tag\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values.yml\n\n0 directories, 3 files\n</code></pre> helmwave.yml<pre><code>project: \"Example: pass git tag\"\nversion: \"0.36.0\"\n\nreleases:\n- name: my-release\nchart: my-chart-repo/my-chart-app\nvalues:\n- values.yml\nnamespace: my-namespace\ncreate_namespace: true\n</code></pre> <p>This values will override default values</p> values.yml<pre><code>image:\ntag: {{ env \"CI_COMMIT_TAG\" }}\n</code></pre> <p>Run</p> <pre><code>helmwave build\nhelmwave up\n</code></pre> <p>or <code>helmwave up --build</code></p>"},{"location":"examples/private-env/","title":"\ud83d\udd12 Private environment","text":"helmwave.yml<pre><code>project: \"Example: private env\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: jetstack\nurl: https://charts.jetstack.io\n\nreleases:\n- name: cert-manager\nchart:\nname: jetstack/cert-manager\nversion: v1.12.1\noffline_kube_version: 1.22.2\nnamespace: cert-manager\n</code></pre> <p>Disable diff</p> <p>You can also use <code>local</code></p> <pre><code>export HELMWAVE_DIFF_MODE=none\n</code></pre> <p>build a plan</p> <pre><code>helmwave build\n</code></pre> <p>upload plan to private environment</p> <pre><code>whatever you want\n</code></pre> <p>on the private environment</p> <pre><code>helmwave up\n</code></pre>"},{"location":"examples/private-github-repo/","title":"Private GitHub repo","text":"<p>Project structure</p> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 helmwave.yml.tpl\n</code></pre> <p>Suppose the <code>helmwave.yml.tpl</code> looks like</p> helmwave.yml.tpl<pre><code>project: \"Example: private github repo\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: your-private-git-repo-hosted-charts\nurl: https://{{ requiredEnv \"GITHUB_TOKEN\"}}@raw.githubusercontent.com/foo/bar/main/\n\n\n.options: &amp;options\nnamespace: {{ requiredEnv \"NS\" }}\ncreate_namespace: true\nwait: true\n\n\nreleases:\n- name: hello\nchart:\nname: foo/bar\n&lt;&lt;: *options\n</code></pre> <p>This command will render <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code></p> <pre><code>$ export NS=stage\n$ export GITHUB_TOKEN=my-secret-token\n$ helmwave yml\n[\ud83d\ude43 aka INFO]: \ud83d\udcc4 YML is ready!\n        build plan with next command: helmwave build -f helmwave.yml\n</code></pre> <p>Once applied, your <code>helmwave.yml</code> will look like</p> helmwave.yml<pre><code>repositories:\n- name: your-private-git-repo-hosted-charts\nurl: https://my-secret-token@raw.githubusercontent.com/foo/bar/main/\n\n.options: &amp;options\nnamespace: ips\ncreate_namespace: true\nwait: true\n\nreleases:\n- name: hello\nchart: foo/bar\n&lt;&lt;: *options\n</code></pre>"},{"location":"examples/private-gitlab-repo/","title":"Private GitLab repo","text":"<p>Learn more about  GitLab  helm registry here</p> <p>Project structure</p> <pre><code>docs/examples/private-github-repo\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 helmwave.yml.tpl\n\n0 directories, 3 files\n</code></pre> helmwave.yml.tpl<pre><code>project: \"Example: gitlab private repo\"\nversion: \"0.36.0\"\n\nrepositories:\n# Docs: https://docs.gitlab.com/ee/user/packages/helm_repository/\n- url: {{ env \"CI_API_V4_URL\" }}/projects/{{env \"CI_PROJECT_ID\" }}/packages/helm/stable\nname: {{ env \"CI_PROJECT_TITLE\" }}\nusername: gitlab-ci-token\npassword: {{ env \"CI_JOB_TOKEN\" }}\n\n\nreleases:\n- name: hello\nchart: {{ env \"CI_PROJECT_TITLE\" }}/my-chart\nnamespace: test\ncreate_namespace: true\n</code></pre> .gitlab-ci.yml<pre><code>helmwave:\nstage: deploy\nimage:\nname: ghcr.io/helmwave/helmwave:0.36.0\nentrypoint: [\"\"]\nbefore_script:\n- printenv | grep HELMWAVE\nscript:\n- helmwave yml\n- helmwave build\n- helmwave up\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 weeks\n</code></pre>"},{"location":"examples/quick-start/","title":"\ud83d\udd30 Quick Start","text":"<ol> <li>\ud83d\udce5 Install helmwave </li> <li> <p>Create <code>helmwave.yml</code></p> <p>Suppose the <code>helmwave.yml</code> representing the desired state of your  helm releases looks like:</p> helmwave.yml<pre><code>project: QuickStart\nversion: \"0.36.0\"\n\n# OCI: modern way to get chart from registry\nregistries:\n- host: registry-1.docker.io\n\n.options: &amp;options\nnamespace: my-namespace\ncreate_namespace: true\nwait: true\ntimeout: 1m\nmax_history: 3 # best practice\nchart:\n# For example, we will use bitnami/nats chart, because it's small and fast\nname: oci://registry-1.docker.io/bitnamicharts/nats\nversion: 7.8.3 # best practice\n\n# We will install 2 releases with the same options\nreleases:\n- name: a\n&lt;&lt;: *options\n\n- name: b\n&lt;&lt;: *options\n</code></pre> </li> <li> <p>Build plan</p> <pre><code>helmwave build\n</code></pre> <p>This step generates plan</p> </li> <li> <p>Deploy plan</p> <pre><code>helmwave up\n</code></pre> <p>Output will be like that:</p> <pre><code>[\ud83d\ude43 aka INFO]: \u2705\n    release: a@my-namespace\n[\ud83d\ude43 aka INFO]: \u2705\n    release: b@my-namespace\n[\ud83d\ude43 aka INFO]: Success 2 / 2\n</code></pre> </li> <li> <p>Check \u2714\ufe0f</p> <pre><code>$ :simple-helm: helm list -n my-namespace\nNAME    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION\na       my-namespace    1               2023-06-13 16:25:42.446056 +0400 +04    deployed        nats-7.8.3      2.9.17     \nb       my-namespace    1               2023-06-13 16:25:42.444662 +0400 +04    deployed        nats-7.8.3      2.9.17\n\n$ k get po -n my-namespace                                                                                                                         \nNAME       READY   STATUS    RESTARTS   AGE\na-nats-0   1/1     Running   0          37s\nb-nats-0   1/1     Running   0          36s\n</code></pre> </li> <li> <p>Congratulations! \ud83e\udd73</p> </li> </ol>"},{"location":"examples/single-app-multi-envs/","title":"Single app multi envs","text":"<p>When we work with helm, sometimes we need dynamics chose environment.</p> <pre><code>export CI_ENVIRONMENT_NAME=stage\nhelm upgrade --install my-release my-chart-repo/my-chart-app -f values/_.yml -f values/$CI_ENVIRONMENT_NAME.yaml\n</code></pre> <p>Project structure</p> <pre><code>.\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u2514\u2500\u2500 values\n    \u251c\u2500\u2500 _.yml\n    \u251c\u2500\u2500 prod.yml\n    \u251c\u2500\u2500 qa.yml\n    \u2514\u2500\u2500 stage.yml\n</code></pre> helmwave.yml.tpl<pre><code>project: \"Example: single app multi envs\"\nversion: \"0.36.0\"\n\nreleases:\n- name: my-release\nchart:\nname: my-chart-repo/my-chart-app\n# yaml says, \"Who is the last one is right.\"\nvalues:\n# Default\n- values/_.yml\n# For specific ENVIRONMENT\n- values/{{ requiredEnv \"CI_ENVIRONMENT_NAME\" }}.yml\ncreate_namespace: true\n</code></pre> <code>values/_.yml</code><code>values/prod.yml</code><code>values/qa.yml</code><code>values/stage.yml</code> <p>Common values for all envs <pre><code>image:\ntag: v1.0.0\n\nreplicaCount: 1\n</code></pre></p> <pre><code>replicaCount: 6\n</code></pre> <pre><code>replicaCount: 2\n</code></pre> <pre><code>replicaCount: 4\n</code></pre> <p>step 0: templating</p> <pre><code>export CI_ENVIRONMENT_NAME=stage\nhelmwave yml\n</code></pre> <p>You will get next <code>helmwave.yml</code>:</p> helmwave.yml<pre><code>project: \"Example: single app multi envs\"\nversion: \"0.36.0\"\n\nreleases:\n- name: my-release\nchart:\nname: my-chart-repo/my-chart-app\n# yaml says, \"Who is the last one is right.\"\nvalues:\n# Default\n- values/_.yml\n# For specific ENVIRONMENT\n- values/stage.yml\ncreate_namespace: true\n</code></pre>"},{"location":"examples/store-greeting-hello/","title":"\ud83d\uddf3\ufe0f Store","text":"<p><code>Store</code> is very useful feature when you need to share the same values between different values fields.</p> <p>Project Structure</p> <pre><code>docs/examples/store-greeting-hello\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 a.yml\n\u251c\u2500\u2500 b.yml\n\u2514\u2500\u2500 helmwave.yml\n\n0 directories, 4 files\n</code></pre> helmwave.yml<pre><code>project: \"Example: store\"\nversion: \"0.36.0\"\n\nreleases:\n- name: a\nchart: my/a\nstore:\nmsg: hello\nvalues:\n- a.yml\n\n- name: b\nchart: my/b\nstore:\nmsg: hello\nvalues:\n- b.yml\n</code></pre> a.yml<pre><code>image:\nrepository: nginx\n\ngreeting: {{ .Release.Store.msg }}\n</code></pre> b.yml<pre><code>image:\ntag: v1.0.0\n\nmessage: {{ .Release.Store.msg }} world\n</code></pre> <p>After running <code>helmwave build</code> you will get rendered values inside <code>.helmwave/values</code>:</p> a.yml<pre><code>image:\nrepository: nginx\n\ngreeting: hello\n</code></pre> b.yml<pre><code>image:\ntag: v1.0.0\n\nmessage: hello world\n</code></pre>"},{"location":"examples/tags/","title":"\ud83d\udd16 Tags","text":"<p>It allows you to choose releases for build.</p> <p>It works with next flags for <code>build</code> command</p> Flags <pre><code>--match-all-tags                                   match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--tags value, -t value [ --tags value, -t value ]  build releases by tags: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n</code></pre>"},{"location":"examples/tags/#how-to-work-with-tags-and-match-all-tags","title":"How to work with <code>--tags</code> and <code>--match-all-tags</code>?","text":"<p>Suppose we have next <code>helmwave.yml</code> with 4 releases</p> <ol> <li>redis-a</li> <li>redis-b</li> <li>memcached-a</li> <li>memcached-b</li> </ol> <p></p> <p> example of <code>helmwave.yml</code> for this case.</p> helmwave.yml<pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: redis-a\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- a\n- redis\n\n- name: redis-b\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- b\n- redis\n\n- name: memcached-a\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- a\n- memcached\n\n- name: memcached-b\nnamespace: test\nchart:\nname: bitnami/memcached\ntags:\n- b\n- memcached\n</code></pre> Match all redisesMatch the group <code>a</code>Match the group <code>b</code>Match any tagsMatch all tags <pre><code>helmwave build -t redis\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - redis-b@test\n</code></pre> <pre><code>helmwave build -t a [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - memcached-a@test\n</code></pre> <pre><code>helmwave build -t ab\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-b@test\n          - memcached-b@test\n</code></pre> <p>If you know SQL. It looks like that:</p> <pre><code>SELECT * FROM releases WHERE tag = \"redis\" OR tag = \"a\"\n</code></pre> <pre><code>helmwave build -t redis -t a [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - redis-b@test\n          - memcached-a@test\n</code></pre> <p>All that was above, we used the logical <code>OR</code> operator. If you need strongly logic with <code>AND</code> you should use <code>--match-all-tags</code> flag.  This flag changes logic for query releases.</p> <pre><code>helmwave build --match-all-tags -t redis -t a [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n</code></pre>"},{"location":"examples/umbrella-evil/","title":"\u2602\ufe0f Umbrella chart is evil","text":"<p>Helmwave is only what you actually need.</p> <p>Why is Umbrella chart evil?</p> <ul> <li>You must keep extra chart.</li> <li>You have new layer for conventional values.</li> <li>Umbrella chart doesn't provide you environments separation.</li> <li>When sub-chart is modified, you need to fix it twice.</li> </ul> <p>Suppose that you need to describe the next architecture.</p> <p>graph LR   frontend --&gt; api --&gt; rabbitmq &amp; minio_s3   consumer --&gt; rabbitmq &amp; minio_s3 &amp; postgresql  If you don't see a graph, please reload the page.</p> <p>Example of helmwave.yml for this architecture.</p> helmwave.yml<pre><code>project: \"Example: umbrella\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: stage\nwait: true\nmax_history: 5\n\nreleases:\n- name: frontend\n&lt;&lt;: *options\nchart: charts/frontend\ndepends_on:\n- api\n\n- name: api\n&lt;&lt;: *options\nchart: charts/api\ndepends_on:\n- rabbitmq\n- minio\n\n- name: consumer\n&lt;&lt;: *options\nchart: charts/consumer\ndepends_on:\n- rabbitmq\n- minio\n- postgresql\n\n- name: rabbitmq\n&lt;&lt;: *options\nchart: bitnami/rabbitmq\n\n- name: minio\n&lt;&lt;: *options\nchart: bitnami/minio\n\n- name: postgresql\n&lt;&lt;: *options\nchart: bitnami/postgresql\n</code></pre>"},{"location":"examples/values-delimiter-flags/","title":"Delimiter flags for values","text":"<p>Sometimes we need to include strings in values that will be templated by  helm itself (via <code>tpl</code> function). In this case we can change helmwave delimiters, so it won't render foreign expressions.</p> values.yml<pre><code>## Prometheus Exporter / Metrics\n##\nmetrics:\nservice:\nannotations:\nservice_name: [[.Release.Store.metadata | quote]]\nprometheus.io/scrape: \"true\"\nprometheus.io/port: \"{{ .Values.metrics.service.port }}\"\n</code></pre> helmwave.yml<pre><code>project: \"Example: values delimiter flags\"\nversion: 0.36.0\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: nginx\n&lt;&lt;: *options\nchart: bitnami/nginx\nstore:\nmetadata: 123\nvalues:\n- src: values.yml\ndelimiter_left: \"[[\"\ndelimiter_right: \"]]\"\n</code></pre>"},{"location":"examples/values-dependencies/","title":"Values dependencies","text":"<p>Sometimes we need to include values from another values file. In this case we can use <code>getValues</code> function.</p> helmwave.yml<pre><code>project: \"Example: values dependencies\"\nversion: 0.36.0\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: nginx\n&lt;&lt;: *options\nchart: bitnami/nginx\nvalues:\n- values/common.yml\n- values/nginx.yml\n\n- name: redis\n&lt;&lt;: *options\nchart: bitnami/redis\nvalues:\n- values/common.yml\n- values/redis.yml\n</code></pre> values/common.yml<pre><code>global:\npodLabels:\nfoo: {{ now }}\n</code></pre> values/nginx.yml<pre><code>{{ $common := getValues \"values/common.yml\" }}\n\npodLabels:\n{{- range $key, $value := $common.global.podLabels }}\n{{ $key }}: {{ $value }}\n{{- end }}\n</code></pre> values/redis.yml<pre><code>{{ $common := getValues \"values/common.yml\" }}\n\nmaster:\npodLabels:\n{{- range $key, $value := $common.global.podLabels }}\n{{ $key }}: {{ $value }}\n{{- end }}\n</code></pre> <p>In this example we have <code>values-common.yml</code> to store some common values independently of the chart. It is defined as a values file for each release. We use <code>getValues</code> function to reference these values.</p> <p>Rendered values files will look like that:</p> nginx/common.yml<pre><code>global:\npodLabels:\nfoo: 2024-04-29 19:06:12.13501 +0400 +04 m=+0.142733501\n</code></pre> nginx/nginx.yml<pre><code>podLabels:\nfoo: 2024-04-29 19:06:12.13501 +0400 +04 m=+0.142733501\n</code></pre> redis/common.yml<pre><code>global:\npodLabels:\nfoo: 2024-04-29 19:06:12.135011 +0400 +04 m=+0.142734251\n</code></pre> redis/redis.yml<pre><code>master:\npodLabels:\nfoo: 2024-04-29 19:06:12.135011 +0400 +04 m=+0.142734251\n</code></pre>"},{"location":"examples/values-disable-render/","title":"Disable templating","text":"<p>Introduced in  v0.20.0 as <code>render: false</code></p> <p>Changed in  v0.32.0 as <code>renderer: copy</code></p> <p>Sometimes we need to disable templating values. For example, prometheus rules.</p> helmwave.yml<pre><code>project: \"Example: values render flag\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: nginx\n&lt;&lt;: *options\nchart: bitnami/nginx\nvalues:\n- src: values.yml\nrenderer: copy\n</code></pre> values.yml<pre><code>## Prometheus Exporter / Metrics\n##\nmetrics:\nservice:\nannotations:\nprometheus.io/scrape: \"true\"\nprometheus.io/port: \"{{ .Values.metrics.service.port }}\"\n</code></pre>"},{"location":"examples/values-sops/","title":"Decode values with SOPS","text":"<p>Introduced in  v0.32.0</p> <p>SOPS is an awesome tool to provide easy way to encode and decode files. Helmwave allows you to automatically decode them during <code>helmwave build</code>.</p> values.yml<pre><code>#ENC[AES256_GCM,data:GgOHfI2ALHVRMutwzbbj1xB/AO0oz9IQExewzxqn+A==,iv:2SMqOaISe7ErBHgrG0fUAEG2PZ0VxPk217eWxnjug5k=,tag:NfTKnKsz3Tq4VILEDvvFkA==,type:comment]\n#ENC[AES256_GCM,data:Cw==,iv:ROEhMOyTjnApauHRyZZbqWCCIKaWY+5DVM8fWlZtslg=,tag:HEEQpFaEGUKM2VusUC+0mw==,type:comment]\nmetrics:\nservice:\nannotations:\nprometheus.io/scrape: ENC[AES256_GCM,data:2L7+8w==,iv:/deSPkA8lPHHJVUGoIDd0x368mPsGMAFAPenAeXz68Y=,tag:efKHi/5X/wJPVSqI6oHldA==,type:str]\nprometheus.io/port: ENC[AES256_GCM,data:bErIwr71Yuv1nT+pha8e97Tspo015YWTMfSrSd/aRqyqBA==,iv:lodkK84z6MHtzrQBdMIe+KtaDdZjlagu3F0qpfOU7rs=,tag:jMslNtzbJe6/cYQnKf9OlQ==,type:str]\nsops:\nkms: []\ngcp_kms: []\nazure_kv: []\nhc_vault: []\nage: []\nlastmodified: \"2023-09-11T16:44:33Z\"\nmac: ENC[AES256_GCM,data:5+vWLYhYCmaKZvuQpRpDKZNS0z9EL1VpppuIssKqG4XFmoLgeigjc4noa2LLuM3iY9rHy+ICNcjdzWIjHhA1Zw6T7B6TpkTR3xyyzqQZ6fx8yw1QfZVE/MRac6Zg5/UIGoTocJzwfHUE84wzn5Na/9FclDYwGYR2O6dvMOrm5uU=,iv:owmjYXD7wib62U+qZPgG1U3SbGU48NLRx4j7yK+UoTA=,tag:tMjD5M4kJBguvQ3DoFeyvg==,type:str]\npgp:\n- created_at: \"2023-09-11T16:44:32Z\"\nenc: |\n-----BEGIN PGP MESSAGE-----\n\nhF4DMeHY6nye/U4SAQdAEzD3I/ufCNIhuaAPZ1/8RtzZEVLlEaPlGk6FYviyinAw\n+fynfTRvLNdFFXrRUdQibDEc3kJ8v5n/vpto3OYwXSDV3VXflXYVxKHIcXwkAgIy\n1GgBCQIQhKZtYYky8MLckqiWoJhvH7p/K7U9DGZkSGrv6f7YJJ2OtpkkDvpZHHAQ\nghdGY8M9T0zU/ZN+9xRgsp7n/ukk/w6ChwZdg7ebCNAMGAdWOu2F+rERckMTEwBI\nrRMNUMbeTNMjwA==\n=eETi\n-----END PGP MESSAGE-----\nfp: DCB1B50CC55217886566ED93FFA4CA11112C922E\nunencrypted_suffix: _unencrypted\nversion: 3.7.3\n</code></pre> helmwave.yml<pre><code>project: \"Example: values render flag\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: nginx\n&lt;&lt;: *options\nchart: bitnami/nginx\nvalues:\n- src: values.yml\nrenderer: sops\n</code></pre>"},{"location":"examples/values-strict-flag/","title":"Strict flag for values","text":"<p>Helmwave will fail when the file does not exist.</p> helmwave.yml<pre><code>project: \"Example: values strict flag\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: nginx\n&lt;&lt;: *options\nchart: bitnami/nginx\nvalues:\n- src: this_file_does_not_exist.yml\nstrict: true\n</code></pre>"},{"location":"examples/vault/","title":"Hashicorp Vault","text":"<p>Example shows how to use  hashicorp vault as a data source.</p> <p>Project structure</p> <pre><code>\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values-secret.yaml\n</code></pre> <p>Step 1. Create next secret</p> <pre><code>vault kv put secret/test hello=world </code></pre> <p>Step 2. Create <code>helmwave.yml</code></p> <pre><code>project: \"Example: vault\"\nversion: \"0.36.0\"\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: app\nchart: bitnami/nginx\nnamespace: test\nwait: true\nvalues:\n- values-secret.yaml\n</code></pre> <p>Step 3. Create <code>values-secret.yaml</code></p> <pre><code>{{ defineDatasource \"vault\" \"vault:///secret/data/test\" }} # `data` is required for vault kv2\n\nsecret: {{ (ds \"vault\").data.hello }}\nrevesion_of_secret: {{ (ds \"vault\").metadata.version }}\n</code></pre> <p>Step 4. Run <code>helmwave build --templater gomplate</code></p> <p>You will get </p> <pre><code>secret: world\nrevision_of_secret: 2\n</code></pre>"},{"location":"examples/vault/#debug-with-gomplate","title":"Debug with gomplate","text":"<ol> <li>install gomplate binary</li> <li>run it in your console</li> </ol> <pre><code>gomplate -d \"vault=vault+https:///secret/data/test\" -i '{{(ds \"vault\").metadata.version}}'\ngomplate -d \"vault=vault+https:///secret/data/test\" -i '{{(ds \"vault\").data.hello}}'\n</code></pre> <p>see gomplate docs here</p>"}]}