{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"anno/","text":"\ud83d\udcd4 Annotations How to use? You should add an annotation to your Deployment / StatefulSet / Jobs / DaemonSet apiVersion : apps/v1 kind : Deployment metadata : name : api spec : ... template : metadata : annotations : helmwave.dev/show-service-messages : \"true\" Annotations for the kubedog \ud83d\udc36 Danger Kubedog currently in beta . inspired by werf annotations First step you need enable kubedog for helmwave. export HELMWAVE_KUBEDOG_ENABLED = true helmwave.dev/track-termination-mode Defines a condition when helmwave should stop tracking of the resource: WaitUntilResourceReady (default) \u2014 the entire deployment process would monitor and wait for the readiness of the resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all resources to be ready. NonBlocking \u2014 the resource is tracked only if there are other resources that are not yet ready. helmwave.dev/fail-mode Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process: FailWholeDeployProcessImmediately (default) \u2014 the entire deploy process will fail with an error if an error occurs for some resource. HopeUntilEndOfDeployProcess \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again. IgnoreAndContinueDeployProcess \u2014 resource errors do not affect the deployment process. helmwave.dev/failures-allowed-per-replica By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode. NUMBER helmwave.dev/log-regex Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX helmwave.dev/log-regex-for-{container} Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX helmwave.dev/skip-logs Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. \"true\"|\"false\" helmwave.dev/skip-logs-for-containers Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator helmwave.dev/show-logs-only-for-containers Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator helmwave.dev/show-service-messages Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process. \"true\"|\"false\"","title":"\ud83d\udcd4 Annotations"},{"location":"anno/#annotations","text":"","title":"\ud83d\udcd4 Annotations"},{"location":"anno/#how-to-use","text":"You should add an annotation to your Deployment / StatefulSet / Jobs / DaemonSet apiVersion : apps/v1 kind : Deployment metadata : name : api spec : ... template : metadata : annotations : helmwave.dev/show-service-messages : \"true\"","title":"How to use?"},{"location":"anno/#annotations-for-the-kubedog","text":"Danger Kubedog currently in beta . inspired by werf annotations First step you need enable kubedog for helmwave. export HELMWAVE_KUBEDOG_ENABLED = true","title":"Annotations for the kubedog \ud83d\udc36"},{"location":"anno/#helmwavedevtrack-termination-mode","text":"Defines a condition when helmwave should stop tracking of the resource: WaitUntilResourceReady (default) \u2014 the entire deployment process would monitor and wait for the readiness of the resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all resources to be ready. NonBlocking \u2014 the resource is tracked only if there are other resources that are not yet ready.","title":"helmwave.dev/track-termination-mode"},{"location":"anno/#helmwavedevfail-mode","text":"Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process: FailWholeDeployProcessImmediately (default) \u2014 the entire deploy process will fail with an error if an error occurs for some resource. HopeUntilEndOfDeployProcess \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again. IgnoreAndContinueDeployProcess \u2014 resource errors do not affect the deployment process.","title":"helmwave.dev/fail-mode"},{"location":"anno/#helmwavedevfailures-allowed-per-replica","text":"By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode. NUMBER","title":"helmwave.dev/failures-allowed-per-replica"},{"location":"anno/#helmwavedevlog-regex","text":"Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX","title":"helmwave.dev/log-regex"},{"location":"anno/#helmwavedevlog-regex-for-container","text":"Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines. RE2_REGEX","title":"helmwave.dev/log-regex-for-{container}"},{"location":"anno/#helmwavedevskip-logs","text":"Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. \"true\"|\"false\"","title":"helmwave.dev/skip-logs"},{"location":"anno/#helmwavedevskip-logs-for-containers","text":"Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator","title":"helmwave.dev/skip-logs-for-containers"},{"location":"anno/#helmwavedevshow-logs-only-for-containers","text":"Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default. string with , as a separator","title":"helmwave.dev/show-logs-only-for-containers"},{"location":"anno/#helmwavedevshow-service-messages","text":"Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process. \"true\"|\"false\"","title":"helmwave.dev/show-service-messages"},{"location":"ci/","text":"\ud83e\uddcb Continuous Integration Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind. Let's see how we can get it working on popular CI software. GitHub action official github action Gitlab-CI variables : HELMWAVE_LOG_LEVEL : trace helmwave : stage : deploy environment : name : \"ref/$CI_COMMIT_REF_SLUG\" image : name : diamon/helmwave:0.16.0 entrypoint : [ \"\" ] script : - helmwave up --build artifacts : paths : - .helmwave expire_in : 2 week","title":"\ud83e\uddcb Continuous Integration"},{"location":"ci/#continuous-integration","text":"Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind. Let's see how we can get it working on popular CI software.","title":"\ud83e\uddcb Continuous Integration"},{"location":"ci/#github-action","text":"official github action","title":" GitHub action"},{"location":"ci/#gitlab-ci","text":"variables : HELMWAVE_LOG_LEVEL : trace helmwave : stage : deploy environment : name : \"ref/$CI_COMMIT_REF_SLUG\" image : name : diamon/helmwave:0.16.0 entrypoint : [ \"\" ] script : - helmwave up --build artifacts : paths : - .helmwave expire_in : 2 week","title":" Gitlab-CI"},{"location":"cli/","text":"\ud83d\udee0 CLI Reference NAME: helmwave - is like docker-compose for helm USAGE: helmwave [global options] command [command options] [arguments...] VERSION: 0.16.0 DESCRIPTION: This tool helps you compose your helm releases! 0. $ helmwave yml 1. $ helmwave build 2. $ helmwave up COMMANDS: build \ud83c\udfd7 Build a plan diff, vs \ud83c\udd9a Show Differences up \ud83d\udea2 Apply your plan list, ls \ud83d\udc40 List of deployed releases rollback \u23ee Rollback your plan status \ud83d\udc41\ufe0f Status of deployed releases down \ud83d\udd2a Delete all validate \ud83d\udec2 Validate your plan yml \ud83d\udcc4 Render helmwave.yml.tpl -> helmwave.yml version, ver Show shorts version completion Generate completion script help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --log-format value You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT] --log-level value You can set: [ debug | info | warn | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL] --log-color Force color (default: true) [$HELMWAVE_LOG_COLOR] --kubedog-log-width value Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH] --help, -h show help (default: false) --version, -v print the version (default: false) step #0: yml It allows render helmwave.yml.tpl to helmwave.yml Options --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML] step #1: build This command generates .helmwave/ --plandir value Path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR] --tags value, -t value It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS] --match-all-tags Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML] --diff-mode value You can set: [ live | local ] (default: \"live\") [$HELMWAVE_DIFF_MODE] --wide value Show line around change (default: 5) [$HELMWAVE_DIFF_WIDE] --show-secret Show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET] step #2: Working with plan up Helmwave will install repositories and helm-releases from plan. down Helmwave will uninstall helm-releases from plan. $ helmwave down [ \ud83d\ude43 aka INFO ] : \u2705 frontend@test uninstalled! [ \ud83d\ude43 aka INFO ] : \u2705 database@test uninstalled! [ \ud83d\ude43 aka INFO ] : \u2705 backend@test uninstalled! ls Helmwave try getting list of helm-releases from plan. $ helmwave ls [ \ud83d\ude43 aka INFO ] : Should be 3 releases NAME | NAMESPACE | REVISION | UPDATED | STATUS | CHART | VERSION -----------+-----------+----------+--------------------------------+----------+-------+---------- frontend | test | 1 | 2021 -11-10 04 :41:23.330989 | deployed | this | 0 .1.0 | | | +0300 MSK | | | database | test | 1 | 2021 -11-10 04 :41:23.353473 | deployed | this | 0 .1.0 | | | +0300 MSK | | | backend | test | 1 | 2021 -11-10 04 :41:23.270076 | deployed | this | 0 .1.0 | | | +0300 MSK | | | status Helmwave try getting status of helm-releases from plan. $ helmwave status [ \ud83d\ude43 aka INFO ] : Status of frontend@test status: deployed revision: 1 name: frontend namespace: test chart: frontend-0.1.0 last deployed: 2021 -11-10 04 :41:23.330989 +0300 MSK [ \ud83d\ude43 aka INFO ] : Status of database@test status: deployed revision: 1 name: database namespace: test chart: database-0.1.0 last deployed: 2021 -11-10 04 :41:23.353473 +0300 MSK [ \ud83d\ude43 aka INFO ] : Status of backend@test name: backend namespace: test chart: backend-0.1.0 last deployed: 2021 -11-10 04 :41:23.270076 +0300 MSK status: deployed revision: 1 rollback Helmwave will rollback helm-releases from plan. $ helmwave down [ \ud83d\ude43 aka INFO ] : \u2705 frontend@test rollback! [ \ud83d\ude43 aka INFO ] : \u2705 database@test rollback! [ \ud83d\ude43 aka INFO ] : \u2705 backend@test rollback! validate Helmwave will validate plan. diff Diff has 2 subcommands helmwave diff live will diff with manifests in the k8s-cluster helmwave diff plan will diff with your another local plan. Logs Logs options. Helmwave use logrus as internal logger. Log Format Helmwave supports several log-format features text json pad emoji (default) Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave Log Level _ info (default) warn debug fatal panic trace general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests, bug report \u274c \u274c \u274c \u274c \u274c \u2705 info or debug is preferred. How to use? helmwave <cmd> --log-color = true --log-level = debug --log-format = pad or export HELMWAVE_LOG_FORMAT = pad export HELMWAVE_LOG_LEVEL = debug export HELMWAVE_LOG_COLOR = true helmwave <cmd> Get Version Long version $ helmwave --version helmwave version 0 .16.0 $ helmwave -v helmwave version 0 .16.0 Short version $ helmwave version 0 .16.0 $ helmwave ver 0 .16.0 Completion Bash Add this code to your ~/.bashrc source < ( helmwave completion bash ) echo \"source <(helmwave completion bash)\" >> ~/.bashrc ZSH Add this code to your ~/.zshrc source < ( helmwave completion zsh ) echo \"source <(helmwave completion zsh)\" >> ~/.zshrc","title":"\ud83d\udee0 CLI Reference"},{"location":"cli/#cli-reference","text":"NAME: helmwave - is like docker-compose for helm USAGE: helmwave [global options] command [command options] [arguments...] VERSION: 0.16.0 DESCRIPTION: This tool helps you compose your helm releases! 0. $ helmwave yml 1. $ helmwave build 2. $ helmwave up COMMANDS: build \ud83c\udfd7 Build a plan diff, vs \ud83c\udd9a Show Differences up \ud83d\udea2 Apply your plan list, ls \ud83d\udc40 List of deployed releases rollback \u23ee Rollback your plan status \ud83d\udc41\ufe0f Status of deployed releases down \ud83d\udd2a Delete all validate \ud83d\udec2 Validate your plan yml \ud83d\udcc4 Render helmwave.yml.tpl -> helmwave.yml version, ver Show shorts version completion Generate completion script help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --log-format value You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT] --log-level value You can set: [ debug | info | warn | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL] --log-color Force color (default: true) [$HELMWAVE_LOG_COLOR] --kubedog-log-width value Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH] --help, -h show help (default: false) --version, -v print the version (default: false)","title":"\ud83d\udee0 CLI Reference"},{"location":"cli/#step-0-yml","text":"It allows render helmwave.yml.tpl to helmwave.yml Options --tpl value Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML]","title":"step #0: yml"},{"location":"cli/#step-1-build","text":"This command generates .helmwave/ --plandir value Path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR] --tags value, -t value It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS] --match-all-tags Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS] --file value, -f value Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML] --diff-mode value You can set: [ live | local ] (default: \"live\") [$HELMWAVE_DIFF_MODE] --wide value Show line around change (default: 5) [$HELMWAVE_DIFF_WIDE] --show-secret Show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]","title":"step #1: build"},{"location":"cli/#step-2-working-with-plan","text":"","title":"step #2: Working with plan"},{"location":"cli/#up","text":"Helmwave will install repositories and helm-releases from plan.","title":"up"},{"location":"cli/#down","text":"Helmwave will uninstall helm-releases from plan. $ helmwave down [ \ud83d\ude43 aka INFO ] : \u2705 frontend@test uninstalled! [ \ud83d\ude43 aka INFO ] : \u2705 database@test uninstalled! [ \ud83d\ude43 aka INFO ] : \u2705 backend@test uninstalled!","title":"down"},{"location":"cli/#ls","text":"Helmwave try getting list of helm-releases from plan. $ helmwave ls [ \ud83d\ude43 aka INFO ] : Should be 3 releases NAME | NAMESPACE | REVISION | UPDATED | STATUS | CHART | VERSION -----------+-----------+----------+--------------------------------+----------+-------+---------- frontend | test | 1 | 2021 -11-10 04 :41:23.330989 | deployed | this | 0 .1.0 | | | +0300 MSK | | | database | test | 1 | 2021 -11-10 04 :41:23.353473 | deployed | this | 0 .1.0 | | | +0300 MSK | | | backend | test | 1 | 2021 -11-10 04 :41:23.270076 | deployed | this | 0 .1.0 | | | +0300 MSK | | |","title":"ls"},{"location":"cli/#status","text":"Helmwave try getting status of helm-releases from plan. $ helmwave status [ \ud83d\ude43 aka INFO ] : Status of frontend@test status: deployed revision: 1 name: frontend namespace: test chart: frontend-0.1.0 last deployed: 2021 -11-10 04 :41:23.330989 +0300 MSK [ \ud83d\ude43 aka INFO ] : Status of database@test status: deployed revision: 1 name: database namespace: test chart: database-0.1.0 last deployed: 2021 -11-10 04 :41:23.353473 +0300 MSK [ \ud83d\ude43 aka INFO ] : Status of backend@test name: backend namespace: test chart: backend-0.1.0 last deployed: 2021 -11-10 04 :41:23.270076 +0300 MSK status: deployed revision: 1","title":"status"},{"location":"cli/#rollback","text":"Helmwave will rollback helm-releases from plan. $ helmwave down [ \ud83d\ude43 aka INFO ] : \u2705 frontend@test rollback! [ \ud83d\ude43 aka INFO ] : \u2705 database@test rollback! [ \ud83d\ude43 aka INFO ] : \u2705 backend@test rollback!","title":"rollback"},{"location":"cli/#validate","text":"Helmwave will validate plan.","title":"validate"},{"location":"cli/#diff","text":"Diff has 2 subcommands helmwave diff live will diff with manifests in the k8s-cluster helmwave diff plan will diff with your another local plan.","title":"diff"},{"location":"cli/#logs","text":"Logs options. Helmwave use logrus as internal logger.","title":"Logs"},{"location":"cli/#log-format","text":"Helmwave supports several log-format features text json pad emoji (default) Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave","title":"Log Format"},{"location":"cli/#log-level","text":"_ info (default) warn debug fatal panic trace general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests, bug report \u274c \u274c \u274c \u274c \u274c \u2705 info or debug is preferred.","title":"Log Level"},{"location":"cli/#how-to-use","text":"helmwave <cmd> --log-color = true --log-level = debug --log-format = pad or export HELMWAVE_LOG_FORMAT = pad export HELMWAVE_LOG_LEVEL = debug export HELMWAVE_LOG_COLOR = true helmwave <cmd>","title":"How to use?"},{"location":"cli/#get-version","text":"","title":"Get Version"},{"location":"cli/#long-version","text":"$ helmwave --version helmwave version 0 .16.0 $ helmwave -v helmwave version 0 .16.0","title":"Long version"},{"location":"cli/#short-version","text":"$ helmwave version 0 .16.0 $ helmwave ver 0 .16.0","title":"Short version"},{"location":"cli/#completion","text":"","title":"Completion"},{"location":"cli/#bash","text":"Add this code to your ~/.bashrc source < ( helmwave completion bash ) echo \"source <(helmwave completion bash)\" >> ~/.bashrc","title":"Bash"},{"location":"cli/#zsh","text":"Add this code to your ~/.zshrc source < ( helmwave completion zsh ) echo \"source <(helmwave completion zsh)\" >> ~/.zshrc","title":"ZSH"},{"location":"install/","text":"\ud83d\udce5 Installation You can install the pre-compiled binary from releases , packages , use Docker or compile from the source. Here are the steps for each of them: \ud83c\udf4f Mac OS Download one of releases Install with brew brew install helmwave/tap/helmwave or use wget export VERSION = 0 .16.0 wget -c https://github.com/helmwave/helmwave/releases/download/v $VERSION /helmwave_ ${ VERSION } _darwin_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/ \ud83d\udc27 Linux Download one of releases export VERSION = 0 .16.0 wget -c https://github.com/helmwave/helmwave/releases/download/v $VERSION /helmwave_ ${ VERSION } _linux_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/ \ud83e\ude9f Windows We haven't tried running this on Windows. Download one of releases Run as a container We use 2 docker registries. Registry URL project page Docker hub https://hub.docker.com view Github Container registry https://ghcr.io view docker pull diamon/helmwave docker pull ghcr.io/helmwave/helmwave Use specific version docker pull diamon/helmwave:0.16.0 docker pull ghcr.io/helmwave/helmwave:0.16.0 docker run --entrypoint = ash -it --rm --name helmwave ghcr.io/helmwave/helmwave:0.16.0 # helmwave version 0 .16.0 # Use scratch image scratch image run with nobody user . docker pull diamon/helmwave:scratch docker pull ghcr.io/helmwave/helmwave:scratch docker run ghcr.io/helmwave/helmwave:0.16.0-scratch version 0 .16.0 Use scratch image with specific helmwave version docker pull diamon/helmwave:0.16.0-scratch docker pull ghcr.io/helmwave/helmwave:0.16.0-scratch Install with go get export VERSION = 0 .16.0 GO111MODULE = on go get github.com/helmwave/helmwave/cmd/helmwave@ $VERSION Compile from source git clone git@github.com:helmwave/helmwave.git cd helmwave go build ./cmd/helmwave mv -f helmwave /usr/local/bin/ Install with marcosnils/bin bin install github.com/helmwave/helmwave","title":"\ud83d\udce5 Installation"},{"location":"install/#installation","text":"You can install the pre-compiled binary from releases , packages , use Docker or compile from the source. Here are the steps for each of them:","title":"\ud83d\udce5 Installation"},{"location":"install/#mac-os","text":"Download one of releases Install with brew brew install helmwave/tap/helmwave or use wget export VERSION = 0 .16.0 wget -c https://github.com/helmwave/helmwave/releases/download/v $VERSION /helmwave_ ${ VERSION } _darwin_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/","title":"\ud83c\udf4f Mac OS"},{"location":"install/#linux","text":"Download one of releases export VERSION = 0 .16.0 wget -c https://github.com/helmwave/helmwave/releases/download/v $VERSION /helmwave_ ${ VERSION } _linux_amd64.tar.gz -O - | tar -xz mv helmwave /usr/local/bin/","title":"\ud83d\udc27 Linux"},{"location":"install/#windows","text":"We haven't tried running this on Windows. Download one of releases","title":"\ud83e\ude9f Windows"},{"location":"install/#run-as-a-container","text":"We use 2 docker registries. Registry URL project page Docker hub https://hub.docker.com view Github Container registry https://ghcr.io view docker pull diamon/helmwave docker pull ghcr.io/helmwave/helmwave Use specific version docker pull diamon/helmwave:0.16.0 docker pull ghcr.io/helmwave/helmwave:0.16.0 docker run --entrypoint = ash -it --rm --name helmwave ghcr.io/helmwave/helmwave:0.16.0 # helmwave version 0 .16.0 # Use scratch image scratch image run with nobody user . docker pull diamon/helmwave:scratch docker pull ghcr.io/helmwave/helmwave:scratch docker run ghcr.io/helmwave/helmwave:0.16.0-scratch version 0 .16.0 Use scratch image with specific helmwave version docker pull diamon/helmwave:0.16.0-scratch docker pull ghcr.io/helmwave/helmwave:0.16.0-scratch","title":" Run as a container"},{"location":"install/#install-with-go-get","text":"export VERSION = 0 .16.0 GO111MODULE = on go get github.com/helmwave/helmwave/cmd/helmwave@ $VERSION","title":"Install with go get"},{"location":"install/#compile-from-source","text":"git clone git@github.com:helmwave/helmwave.git cd helmwave go build ./cmd/helmwave mv -f helmwave /usr/local/bin/","title":" Compile from source"},{"location":"install/#install-with-marcosnilsbin","text":"bin install github.com/helmwave/helmwave","title":"Install with marcosnils/bin"},{"location":"tpl/","text":"\ud83d\udcc4 Templating Helmwave uses Go templates for templating. Helmwave supports all built-in functions / sprig / gomplate / custom. Sprig If you've ever written helm charts, then you're already familiar with it. http://masterminds.github.io/sprig/ Gomplate Since v0.14.0. Helmwave works with Gomplate. How to enable gomplate for v0.14.0 helmwave helmwave.yml template : gomplate : enabled : true Usage repositories : - name : bitnami url : https://charts.bitnami.com/bitnami template : gomplate : enabled : true data : sources : secret : url : scheme : aws+sm path : 'hello/foobar' releases : - name : app chart : name : bitnami/nginx namespace : test values : - vaules-secret.yaml Issues https://github.com/helmwave/helmwave/issues/159 https://github.com/helmwave/helmwave/issues/103 Custom toYaml marshals a map into a string fromYaml reads a golang string and generates a map readFile get file as string hasKey get true if field is exists get (Sprig's original get is available as sprigGet ) setValueAtPath PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE requiredEnv The requiredEnv function allows you to declare a particular environment variable as required for template rendering. If the environment variable is unset or empty, the template rendering will fail with an error message.","title":"\ud83d\udcc4 Templating"},{"location":"tpl/#templating","text":"Helmwave uses Go templates for templating. Helmwave supports all built-in functions / sprig / gomplate / custom.","title":"\ud83d\udcc4 Templating"},{"location":"tpl/#sprig","text":"If you've ever written helm charts, then you're already familiar with it. http://masterminds.github.io/sprig/","title":"Sprig"},{"location":"tpl/#gomplate","text":"Since v0.14.0. Helmwave works with Gomplate.","title":"Gomplate"},{"location":"tpl/#how-to-enable-gomplate-for-v0140-helmwave","text":"helmwave.yml template : gomplate : enabled : true","title":"How to enable gomplate for v0.14.0 helmwave"},{"location":"tpl/#usage","text":"repositories : - name : bitnami url : https://charts.bitnami.com/bitnami template : gomplate : enabled : true data : sources : secret : url : scheme : aws+sm path : 'hello/foobar' releases : - name : app chart : name : bitnami/nginx namespace : test values : - vaules-secret.yaml","title":"Usage"},{"location":"tpl/#issues","text":"https://github.com/helmwave/helmwave/issues/159 https://github.com/helmwave/helmwave/issues/103","title":"Issues"},{"location":"tpl/#custom","text":"toYaml marshals a map into a string fromYaml reads a golang string and generates a map readFile get file as string hasKey get true if field is exists get (Sprig's original get is available as sprigGet ) setValueAtPath PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE requiredEnv The requiredEnv function allows you to declare a particular environment variable as required for template rendering. If the environment variable is unset or empty, the template rendering will fail with an error message.","title":"Custom"},{"location":"yaml/","text":"Yaml works on helm v3.7.1 project : Test07 version : dev repositories : - name : bitnami url : https://charts.bitnami.com/bitnami username : \"\" password : \"\" certfile : \"\" keyfile : \"\" cafile : \"\" insecureskiptlsverify : false force : false allow_faulure : true releases : - store : pullPolicy : Always chart : name : bitnami/nginx cafile : \"\" certfile : \"\" keyfile : \"\" insecureskiptlsverify : false keyring : \"\" password : \"\" repourl : \"\" username : \"\" verify : false version : \"\" name : nginx namespace : test description : \"\" depends_on : [] values : - .helmwave/values/nginx@test/5ae83192a2a53eec01dee5207fcf3cccbc5af87f.yml - tests/07_values.yaml tags : [] timeout : 0s maxhistory : 0 createnamespace : false resetvalues : false recreate : false force : false atomic : false cleanuponfail : false subnotes : false disablehooks : false disableopenapivalidation : false waitforjobs : false wait : false skipcrds : false devel : false reusevalues : false Project Reserved for future. Version Check current version and project version. In the future it is planned to be used for major compatibility. Repositories[] field required type default name \u2705 string \"\" url \u2705 url \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" certfile \ud83d\ude45 string \"\" keyfile \ud83d\ude45 string \"\" cafile \ud83d\ude45 string \"\" insecureskiptlsverify \ud83d\ude45 bool false force \ud83d\ude45 bool false force Don't skip if repository exists. Releases[] field required type default name \u2705 string \"\" namespace \u2705 string \"\" chart.name \u2705 string \"\" chart.username \ud83d\ude45 string \"\" chart.password \ud83d\ude45 string \"\" chart.certfile \ud83d\ude45 string \"\" chart.keyfile \ud83d\ude45 string \"\" chart.cafile \ud83d\ude45 string \"\" chart.insecureskiptlsverify \ud83d\ude45 bool false description \ud83d\ude45 string \"\" depends_on \ud83d\ude45 array [] values \ud83d\ude45 array [] tags \ud83d\ude45 array [] store \ud83d\ude45 object {} timeout \ud83d\ude45 interval 0s maxhistory \ud83d\ude45 int 0 createnamespace \ud83d\ude45 bool false resetvalues \ud83d\ude45 bool false recreate \ud83d\ude45 bool false force \ud83d\ude45 bool false atomic \ud83d\ude45 bool false cleanuponfail \ud83d\ude45 bool false subnotes \ud83d\ude45 bool false disablehooks \ud83d\ude45 bool false disableopenapivalidation \ud83d\ude45 bool false waitforjobs \ud83d\ude45 bool false wait \ud83d\ude45 bool false skipcrds \ud83d\ude45 bool false devel \ud83d\ude45 bool false reusevalues \ud83d\ude45 bool false \ud83d\uddf3\ufe0f Store It allows to pass you custom fields from helmwave.yml to values. It works when you call $ helmwave build depends_on It allows waiting releases It works when you call $ helmwave up Example for 3-tier application graph LR; frontend --> backend --> db; Your helmwave will releases : - name : frontend depends_on : backend - name : backend depends_on : db - name : db allow_failure : false When allow_failure is set true. It allows the installation to proceed. \ud83d\udd16 Tags It allows you to choose releases for build It works with next options when you call $ helmwave build : --tags value, -t value It allows you choose releases for build. Example: -t tag1 -t tag3,tag4 [ $HELMWAVE_TAGS ] --match-all-tags Match all provided tags ( default: false ) [ $HELMWAVE_MATCH_ALL_TAGS ] Matching with tags Suppose we have next helmwave.yml with 4 releases. redis-a redis-b memcached-a memcached-b repositories : - name : bitnami url : https://charts.bitnami.com/bitnami releases : - name : redis-a namespace : test chart : name : bitnami/redis tags : - a - redis - name : redis-b namespace : test chart : name : bitnami/redis tags : - b - redis - name : memcached-a namespace : test chart : name : bitnami/redis tags : - a - memcached - name : memcached-b namespace : test chart : name : bitnami/memcached tags : - b - memcached Match all redis helmwave build -t redis [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - redis-b@test Match the group a helmwave build -t a [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - memcached-a@test Match multiply group. If you know SQL. It looks like that: SELECT * FROM releases WHERE tag = \"redis\" OR tag = \"a\" helmwave build -t redis -t a [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - redis-b@test - memcached-a@test All that was above, we used the logical OR operator. If you need strongly logic with AND you should use --match-all-tags flag. This flag changes logic for query releases. If you know SQL. It looks like that: SELECT * FROM releases WHERE tag = \"redis\" AND tag = \"a\" helmwave build -t redis -t a --match-all-tags [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test createnamespace if true Helmwave will create namespace for release.","title":"Yaml"},{"location":"yaml/#yaml","text":"works on helm v3.7.1 project : Test07 version : dev repositories : - name : bitnami url : https://charts.bitnami.com/bitnami username : \"\" password : \"\" certfile : \"\" keyfile : \"\" cafile : \"\" insecureskiptlsverify : false force : false allow_faulure : true releases : - store : pullPolicy : Always chart : name : bitnami/nginx cafile : \"\" certfile : \"\" keyfile : \"\" insecureskiptlsverify : false keyring : \"\" password : \"\" repourl : \"\" username : \"\" verify : false version : \"\" name : nginx namespace : test description : \"\" depends_on : [] values : - .helmwave/values/nginx@test/5ae83192a2a53eec01dee5207fcf3cccbc5af87f.yml - tests/07_values.yaml tags : [] timeout : 0s maxhistory : 0 createnamespace : false resetvalues : false recreate : false force : false atomic : false cleanuponfail : false subnotes : false disablehooks : false disableopenapivalidation : false waitforjobs : false wait : false skipcrds : false devel : false reusevalues : false","title":"Yaml"},{"location":"yaml/#project","text":"Reserved for future.","title":"Project"},{"location":"yaml/#version","text":"Check current version and project version. In the future it is planned to be used for major compatibility.","title":"Version"},{"location":"yaml/#repositories","text":"field required type default name \u2705 string \"\" url \u2705 url \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" certfile \ud83d\ude45 string \"\" keyfile \ud83d\ude45 string \"\" cafile \ud83d\ude45 string \"\" insecureskiptlsverify \ud83d\ude45 bool false force \ud83d\ude45 bool false","title":"Repositories[]"},{"location":"yaml/#force","text":"Don't skip if repository exists.","title":"force"},{"location":"yaml/#releases","text":"field required type default name \u2705 string \"\" namespace \u2705 string \"\" chart.name \u2705 string \"\" chart.username \ud83d\ude45 string \"\" chart.password \ud83d\ude45 string \"\" chart.certfile \ud83d\ude45 string \"\" chart.keyfile \ud83d\ude45 string \"\" chart.cafile \ud83d\ude45 string \"\" chart.insecureskiptlsverify \ud83d\ude45 bool false description \ud83d\ude45 string \"\" depends_on \ud83d\ude45 array [] values \ud83d\ude45 array [] tags \ud83d\ude45 array [] store \ud83d\ude45 object {} timeout \ud83d\ude45 interval 0s maxhistory \ud83d\ude45 int 0 createnamespace \ud83d\ude45 bool false resetvalues \ud83d\ude45 bool false recreate \ud83d\ude45 bool false force \ud83d\ude45 bool false atomic \ud83d\ude45 bool false cleanuponfail \ud83d\ude45 bool false subnotes \ud83d\ude45 bool false disablehooks \ud83d\ude45 bool false disableopenapivalidation \ud83d\ude45 bool false waitforjobs \ud83d\ude45 bool false wait \ud83d\ude45 bool false skipcrds \ud83d\ude45 bool false devel \ud83d\ude45 bool false reusevalues \ud83d\ude45 bool false","title":"Releases[]"},{"location":"yaml/#store","text":"It allows to pass you custom fields from helmwave.yml to values. It works when you call $ helmwave build","title":"\ud83d\uddf3\ufe0f Store"},{"location":"yaml/#depends_on","text":"It allows waiting releases It works when you call $ helmwave up Example for 3-tier application graph LR; frontend --> backend --> db; Your helmwave will releases : - name : frontend depends_on : backend - name : backend depends_on : db - name : db allow_failure : false When allow_failure is set true. It allows the installation to proceed.","title":"depends_on"},{"location":"yaml/#tags","text":"It allows you to choose releases for build It works with next options when you call $ helmwave build : --tags value, -t value It allows you choose releases for build. Example: -t tag1 -t tag3,tag4 [ $HELMWAVE_TAGS ] --match-all-tags Match all provided tags ( default: false ) [ $HELMWAVE_MATCH_ALL_TAGS ]","title":"\ud83d\udd16 Tags"},{"location":"yaml/#matching-with-tags","text":"Suppose we have next helmwave.yml with 4 releases. redis-a redis-b memcached-a memcached-b repositories : - name : bitnami url : https://charts.bitnami.com/bitnami releases : - name : redis-a namespace : test chart : name : bitnami/redis tags : - a - redis - name : redis-b namespace : test chart : name : bitnami/redis tags : - b - redis - name : memcached-a namespace : test chart : name : bitnami/redis tags : - a - memcached - name : memcached-b namespace : test chart : name : bitnami/memcached tags : - b - memcached Match all redis helmwave build -t redis [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - redis-b@test Match the group a helmwave build -t a [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - memcached-a@test Match multiply group. If you know SQL. It looks like that: SELECT * FROM releases WHERE tag = \"redis\" OR tag = \"a\" helmwave build -t redis -t a [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test - redis-b@test - memcached-a@test All that was above, we used the logical OR operator. If you need strongly logic with AND you should use --match-all-tags flag. This flag changes logic for query releases. If you know SQL. It looks like that: SELECT * FROM releases WHERE tag = \"redis\" AND tag = \"a\" helmwave build -t redis -t a --match-all-tags [ \ud83d\ude43 aka INFO ] : \ud83c\udfd7 Plan releases: - redis-a@test","title":"Matching with tags"},{"location":"yaml/#createnamespace","text":"if true Helmwave will create namespace for release.","title":"createnamespace"},{"location":"examples/","text":"Managed environments for an app version : 0.16.0 .options : &options wait : true namespace : test releases : - name : app chart : name : charts/backend << : *options tags : - app - product values : # all products & all envs - values/product/_/_.yml # all products & an env - values/product/_/{{ requiredEnv \"CI_ENVIRONMENT\" }}.yml # a product & all envs - values/product/app/_.yml # a product & an env - values/product/app/{{ requiredEnv \"CI_ENVIRONMENT\" }}.yml This example does something similar to this export CI_ENVIRONMENT = stage helm upgrade --install app charts/backend \\ --namespace test --wait \\ -f values/product/_/_.yml \\ -f values/product/_/ $CI_ENVIRONMENT .yml \\ -f values/product/app/_.yml \\ -f values/product/app/ $CI_ENVIRONMENT .yml Git tag \u2013> Docker image tag Pass git tag to docker image tag default values: image : repository : registry.gitlab.local/example/app tag : latest Create 2 files helmwave.yml and my-values.yml . helmwave.yml releases : - name : my-release namespace : default chart : name : my-chart-repo/my-chart-app values : - my-values.yml my-values.yml image : tag : {{ env \"CI_COMMIT_TAG\" }} How to use secret manager? Step 1. Create next secret aws secretsmanager create-secret --name hello/foobar --secret-string '{\"foo\":\"bar\"}' Step 2. Create helmwave.yml repositories : - name : bitnami url : https://charts.bitnami.com/bitnami template : gomplate : enabled : true data : sources : secret : url : scheme : aws+sm path : 'hello/foobar' releases : - name : app chart : name : bitnami/nginx namespace : test values : - vaules-secret.yaml Step 3. Create vaules-secret.yaml secret : {{ datasource \"secret\" }} Step 4. Run helmwave build You will get secret: {\"foo\":\"bar\"}","title":"Index"},{"location":"examples/#managed-environments-for-an-app","text":"version : 0.16.0 .options : &options wait : true namespace : test releases : - name : app chart : name : charts/backend << : *options tags : - app - product values : # all products & all envs - values/product/_/_.yml # all products & an env - values/product/_/{{ requiredEnv \"CI_ENVIRONMENT\" }}.yml # a product & all envs - values/product/app/_.yml # a product & an env - values/product/app/{{ requiredEnv \"CI_ENVIRONMENT\" }}.yml This example does something similar to this export CI_ENVIRONMENT = stage helm upgrade --install app charts/backend \\ --namespace test --wait \\ -f values/product/_/_.yml \\ -f values/product/_/ $CI_ENVIRONMENT .yml \\ -f values/product/app/_.yml \\ -f values/product/app/ $CI_ENVIRONMENT .yml","title":"Managed environments for an app"},{"location":"examples/#git-tag-docker-image-tag","text":"Pass git tag to docker image tag default values: image : repository : registry.gitlab.local/example/app tag : latest Create 2 files helmwave.yml and my-values.yml . helmwave.yml releases : - name : my-release namespace : default chart : name : my-chart-repo/my-chart-app values : - my-values.yml my-values.yml image : tag : {{ env \"CI_COMMIT_TAG\" }}","title":"Git tag \u2013&gt; Docker image tag"},{"location":"examples/#how-to-use-secret-manager","text":"Step 1. Create next secret aws secretsmanager create-secret --name hello/foobar --secret-string '{\"foo\":\"bar\"}' Step 2. Create helmwave.yml repositories : - name : bitnami url : https://charts.bitnami.com/bitnami template : gomplate : enabled : true data : sources : secret : url : scheme : aws+sm path : 'hello/foobar' releases : - name : app chart : name : bitnami/nginx namespace : test values : - vaules-secret.yaml Step 3. Create vaules-secret.yaml secret : {{ datasource \"secret\" }} Step 4. Run helmwave build You will get secret: {\"foo\":\"bar\"}","title":"How to use secret manager?"}]}