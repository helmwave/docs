{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"anno/","title":"\ud83d\udcd4 Annotations","text":""},{"location":"anno/#how-to-use","title":"How to use?","text":"<p>You should add an annotation to your Deployment / StatefulSet / Jobs / DaemonSet</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: api\nspec:\n...\ntemplate:\nmetadata:\nannotations:\nhelmwave.dev/show-service-messages: \"true\"\n</code></pre>"},{"location":"anno/#annotations-for-the-kubedog","title":"Annotations for the kubedog \ud83d\udc36","text":"<p>Danger</p> <p>Kubedog currently in beta.</p> <p>inspired by werf annotations</p> <p>First step you need enable kubedog for helmwave.</p> <pre><code>export HELMWAVE_KUBEDOG_ENABLED=true\n</code></pre>"},{"location":"anno/#helmwavedevtrack-termination-mode","title":"<code>helmwave.dev/track-termination-mode</code>","text":"<p>Defines a condition when helmwave should stop tracking of the resource:</p> <ul> <li><code>WaitUntilResourceReady</code> (default) \u2014 the entire deployment process would monitor and wait for the readiness of the   resource having this annotation. Since this mode is enabled by default, the deployment process would wait for all   resources to be ready.</li> <li><code>NonBlocking</code> \u2014 the resource is tracked only if there are other resources that are not yet ready.</li> </ul>"},{"location":"anno/#helmwavedevfail-mode","title":"<code>helmwave.dev/fail-mode</code>","text":"<p>Defines how helmwave will handle a resource failure condition which occured after failures threshold has been reached for the resource during deploy process:</p> <ul> <li><code>FailWholeDeployProcessImmediately</code> (default) \u2014 the entire deploy process will fail with an error if an error occurs   for some resource.</li> <li><code>HopeUntilEndOfDeployProcess</code> \u2014 when an error occurred for the resource, set this resource into the \u201chope\u201d mode, and   continue tracking other resources. If all remained resources are ready or in the \u201chope\u201d mode, transit the resource   back to \u201cnormal\u201d and fail the whole deploy process if an error for this resource occurs once again.</li> <li><code>IgnoreAndContinueDeployProcess</code> \u2014 resource errors do not affect the deployment process.</li> </ul>"},{"location":"anno/#helmwavedevfailures-allowed-per-replica","title":"<code>helmwave.dev/failures-allowed-per-replica</code>","text":"<p>By default, one error per replica is allowed before considering the whole deployment process unsuccessful. This setting defines a threshold of failures after which resource will be considered as failed and helmwave will handle this situation using fail mode.</p> <ul> <li>NUMBER</li> </ul>"},{"location":"anno/#helmwavedevlog-regex","title":"<code>helmwave.dev/log-regex</code>","text":"<p>Defines a Re2 regex template that applies to all logs of all containers of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwavedevlog-regex-for-container","title":"<code>helmwave.dev/log-regex-for-{container}</code>","text":"<p>Defines a Re2 regex template that applies to all logs of specified container of all Pods owned by a resource with this annotation. helmwave would show only those log lines that fit the specified regex template. By default, helmwave shows all log lines.</p> <ul> <li>RE2_REGEX</li> </ul>"},{"location":"anno/#helmwavedevskip-logs","title":"<code>helmwave.dev/skip-logs</code>","text":"<p>Set to \"true\" to turn off printing logs of all containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"anno/#helmwavedevskip-logs-for-containers","title":"<code>helmwave.dev/skip-logs-for-containers</code>","text":"<p>Turn off printing logs of specified containers of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwavedevshow-logs-only-for-containers","title":"<code>helmwave.dev/show-logs-only-for-containers</code>","text":"<p>Turn off printing logs of all containers except specified of all Pods owned by a resource with this annotation. This annotation is disabled by default.</p> <ul> <li>string with <code>,</code> as a separator</li> </ul>"},{"location":"anno/#helmwavedevshow-service-messages","title":"<code>helmwave.dev/show-service-messages</code>","text":"<p>Set to \"true\" to enable additional real-time debugging info (including Kubernetes events) for a resource during tracking. By default, helmwave would show these service messages only if the resource has failed the entire deploy process.</p> <ul> <li>\"true\"|\"false\"</li> </ul>"},{"location":"ci/","title":"\ud83e\uddcb Continuous Integration","text":"<p>Helmwave was built from the very first commit with the idea of running it as part of the CI pipeline in mind.</p> <p>Let's see how we can get it working on popular CI software.</p>"},{"location":"ci/#github-action","title":"GitHub action","text":"<ul> <li>official github action</li> </ul> <pre><code>name: Deploy\non:\npush:\n\n\njobs:\nexternal:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v2\n- uses: helmwave/setup-action@v0.2.0\nname: Install helmwave\nwith:\nversion: '0.16.2'\n- name: templating helmwave.yml.tpl  run: helmwave yml\n- name: plan\nrun: helmwave build\n- name: deploy\nrun: helmwave up\n</code></pre>"},{"location":"ci/#gitlab-ci","title":"Gitlab-CI","text":"<pre><code>variables:\nHELMWAVE_LOG_LEVEL: debug\n\nhelmwave:\nstage: deploy\nenvironment:\nname: \"ref/$CI_COMMIT_REF_SLUG\"\nimage:\nname: diamon/helmwave:0.16.2\nentrypoint: [\"\"]\nbefore_script:\n- printenv | grep HELMWAVE\nscript:\n- helmwave yml # if it needs\n- helmwave build\n- helmwave up\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 week\n</code></pre> <p>See example</p>"},{"location":"ci/#kube-linter-and-helmwave","title":"Kube-Linter and Helmwave","text":"<pre><code>stages:\n- build\n- lint\n- deploy\n\n\nvariables:\nHELMWAVE_PLAN: $CI_PROJECT_DIR/.helmwave\n\n\n.helmwave: &amp;helmwave\nbefore_script:\n- printenv | grep HELMWAVE\n- ls -la $HELMWAVE_PLAN || true\nafter_script: - ls -la $HELMWAVE_PLAN\nimage:\nname: ghcr.io/helmwave/helmwave:0.16.2\nentrypoint: ['']\n\n###############  BUILD  ################\nplan:\nstage: build\nextends: .helmwave\nartifacts:\npaths:\n- .helmwave\nexpire_in: 1 week\nscript:\n- '[[ -f \"helmwave.yml.tpl\" ]] &amp;&amp; helmwave yml'\n- cat helmwave.yml\n- helmwave build\n\n###############  Deploy  ################\nup:\nstage: deploy\nextends: .helmwave\nwhen: manual\nscript: - helmwave up\n\n\n###############  LINT  ################\nkube-linter:\nstage: lint\nimage:\nname: stackrox/kube-linter:0.2.5-alpine\nentrypoint: ['']\nscript:\n- /kube-linter lint $HELMWAVE_PLAN\n\n\nkubeval:\nstage: lint\nimage:\nname: garethr/kubeval\nentrypoint: ['']\nscript:\n- kubeval --force-color $HELMWAVE_PLAN/manifest/*.yml\n\n\npluto:\nimage:\nname: quay.io/fairwinds/pluto:v5.1\nentrypoint: ['']\nscript:\n- /pluto detect-files -d $HELMWAVE_PLAN\n</code></pre>"},{"location":"cli/","title":"\ud83d\udee0 CLI Reference","text":"<pre><code>NAME:\n   helmwave - is like docker-compose for helm\n\nUSAGE:\n   helmwave [global options] command [command options] [arguments...]\n\nVERSION:\n   0.16.2\n\nDESCRIPTION:\n   This tool helps you compose your helm releases!\n   0. $ helmwave yml\n   1. $ helmwave build\n   2. $ helmwave up\n\nCOMMANDS:\n   build         \ud83c\udfd7 Build a plan\n   diff, vs      \ud83c\udd9a Show Differences\n   up            \ud83d\udea2 Apply your plan\n   list, ls      \ud83d\udc40 List of deployed releases\n   rollback      \u23ee  Rollback your plan\n   status        \ud83d\udc41\ufe0f Status of deployed releases\n   down          \ud83d\udd2a Delete all\n   validate      \ud83d\udec2 Validate your plan\n   yml           \ud83d\udcc4 Render helmwave.yml.tpl -&gt; helmwave.yml\n   version, ver  Show shorts version\n   completion    Generate completion script\n   help, h       Shows a list of commands or help for one command\n\n\nGLOBAL OPTIONS:\n   --log-format value         You can set: [ text | json | pad | emoji ] (default: \"emoji\") [$HELMWAVE_LOG_FORMAT]\n   --log-level value          You can set: [ debug | info | warn  | fatal | panic | trace ] (default: \"info\") [$HELMWAVE_LOG_LEVEL, $HELMWAVE_LOG_LVL]\n   --log-color                Force color (default: true) [$HELMWAVE_LOG_COLOR]\n   --kubedog-log-width value  Set kubedog max log line width (default: 140) [$HELMWAVE_KUBEDOG_LOG_WIDTH]\n   --help, -h                 show help (default: false)\n   --version, -v              print the version (default: false)\n</code></pre>"},{"location":"cli/#step-0-yml","title":"step #0: yml","text":"<p>It allows render <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code></p> <p>Options</p> <pre><code>--tpl value             Main tpl file (default: \"helmwave.yml.tpl\") [$HELMWAVE_TPL]\n--file value, -f value  Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML]\n</code></pre>"},{"location":"cli/#step-1-build","title":"step #1: build","text":"<p>This command generates <code>.helmwave/</code> </p> <pre><code>--plandir value         Path to plandir (default: \".helmwave/\") [$HELMWAVE_PLANDIR]\n--tags value, -t value  It allows you choose releases for sync. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--match-all-tags        Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n--file value, -f value  Main yml file (default: \"helmwave.yml\") [$HELMWAVE_YAML]\n--diff-mode value       You can set: [ live | local ] (default: \"live\") [$HELMWAVE_DIFF_MODE]\n--wide value            Show line around change (default: 5) [$HELMWAVE_DIFF_WIDE]\n--show-secret           Show secret in diff (default: true) [$HELMWAVE_DIFF_SHOW_SECRET]\n</code></pre>"},{"location":"cli/#step-2-working-with-plan","title":"step #2: Working with plan","text":""},{"location":"cli/#up","title":"up","text":"<p>Helmwave will install repositories and helm-releases from plan.</p>"},{"location":"cli/#down","title":"down","text":"<p>Helmwave will uninstall helm-releases from plan.</p> <pre><code>$ helmwave down      [\ud83d\ude43 aka INFO]: \u2705 frontend@test uninstalled!\n[\ud83d\ude43 aka INFO]: \u2705 database@test uninstalled!\n[\ud83d\ude43 aka INFO]: \u2705 backend@test uninstalled!\n</code></pre>"},{"location":"cli/#ls","title":"ls","text":"<p>Helmwave try getting list of helm-releases from plan.</p> <pre><code>$ helmwave ls      [\ud83d\ude43 aka INFO]: Should be 3 releases\n   NAME    | NAMESPACE | REVISION |            UPDATED             |  STATUS  | CHART | VERSION  \n-----------+-----------+----------+--------------------------------+----------+-------+----------\n  frontend | test      |        1 | 2021-11-10 04:41:23.330989     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |          database | test      |        1 | 2021-11-10 04:41:23.353473     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |          backend  | test      |        1 | 2021-11-10 04:41:23.270076     | deployed | this  | 0.1.0    |           |          | +0300 MSK                      |          |       |\n</code></pre>"},{"location":"cli/#status","title":"status","text":"<p>Helmwave try getting status of helm-releases from plan.</p> <pre><code>$ helmwave status      [\ud83d\ude43 aka INFO]: Status of frontend@test\n        status: deployed\n        revision: 1\nname: frontend\n        namespace: test\nchart: frontend-0.1.0\n        last deployed: 2021-11-10 04:41:23.330989 +0300 MSK\n[\ud83d\ude43 aka INFO]: Status of database@test\n        status: deployed\n        revision: 1\nname: database\n        namespace: test\nchart: database-0.1.0\n        last deployed: 2021-11-10 04:41:23.353473 +0300 MSK\n[\ud83d\ude43 aka INFO]: Status of backend@test\n        name: backend\n        namespace: test\nchart: backend-0.1.0\n        last deployed: 2021-11-10 04:41:23.270076 +0300 MSK\n        status: deployed\n        revision: 1\n</code></pre>"},{"location":"cli/#rollback","title":"rollback","text":"<p>Helmwave will rollback helm-releases from plan.</p> <pre><code>$ helmwave down      [\ud83d\ude43 aka INFO]: \u2705 frontend@test rollback!\n[\ud83d\ude43 aka INFO]: \u2705 database@test rollback!\n[\ud83d\ude43 aka INFO]: \u2705 backend@test rollback!\n</code></pre>"},{"location":"cli/#validate","title":"validate","text":"<p>Helmwave will validate plan.</p>"},{"location":"cli/#diff","title":"diff","text":"<p>Diff has 2 subcommands </p> <ol> <li><code>helmwave diff live</code> will diff with manifests in the k8s-cluster </li> <li><code>helmwave diff plan</code> will diff with your another local plan.</li> </ol>"},{"location":"cli/#logs","title":"Logs","text":"<p>Logs options. Helmwave use logrus as internal logger.</p>"},{"location":"cli/#log-format","title":"Log Format","text":"<p>Helmwave supports several log-format</p> features <code>text</code> <code>json</code> <code>pad</code> <code>emoji</code> (default) Color \u2705 \u274c \u2705 \ud83c\udf08 Human readable \ud83e\uddd0 \ud83e\udd16 \ud83e\uddd0\ud83e\uddd0 \u2705 Performance \ud83d\ude80 \ud83d\udc22 \u2708\ufe0f \ud83d\udc22 Module TextFormatter (in-built logrus formatter) JSONFormatter (in-built logrus formatter) TextFormatter (in-built logrus formatter) logrus-emoji-formatter special for helmwave"},{"location":"cli/#log-level","title":"Log Level","text":"_ <code>info</code> (default) <code>warn</code> <code>debug</code> <code>fatal</code> <code>panic</code> <code>trace</code> general info \u2705 \u2705 \u2705 \u2705 \u2705 \u2705 incompatible version \u274c \u2705 \u2705 \u2705 \u2705 \u2705 helm-debug \u274c \u274c \u2705 \u2705 \u2705 \u2705 file content \u274c \u274c \u2705 \u2705 \u2705 \u2705 helm manifests, bug report \u274c \u274c \u274c \u274c \u274c \u2705 <p><code>info</code> or <code>debug</code> is preferred.</p>"},{"location":"cli/#how-to-use","title":"How to use?","text":"<pre><code>helmwave &lt;cmd&gt; --log-color=true --log-level=debug --log-format=pad\n</code></pre> <p>or</p> <pre><code>export HELMWAVE_LOG_FORMAT=pad\nexport HELMWAVE_LOG_LEVEL=debug\nexport HELMWAVE_LOG_COLOR=true\nhelmwave &lt;cmd&gt;\n</code></pre>"},{"location":"cli/#get-version","title":"Get Version","text":""},{"location":"cli/#long-version","title":"Long version","text":"<pre><code>$ helmwave --version  \nhelmwave version 0.16.2\n\n$ helmwave -v\nhelmwave version 0.16.2\n</code></pre>"},{"location":"cli/#short-version","title":"Short version","text":"<pre><code>$ helmwave version\n0.16.2\n\n$ helmwave ver\n0.16.2\n</code></pre>"},{"location":"cli/#completion","title":"Completion","text":""},{"location":"cli/#bash","title":"Bash","text":"<p>Add this code to your ~/.bashrc</p> <pre><code>source &lt;(helmwave completion bash)\n</code></pre> <pre><code>echo \"source &lt;(helmwave completion bash)\" &gt;&gt; ~/.bashrc\n</code></pre> <p></p>"},{"location":"cli/#zsh","title":"ZSH","text":"<p>Add this code to your ~/.zshrc</p> <pre><code>source &lt;(helmwave completion zsh)\n</code></pre> <pre><code>echo \"source &lt;(helmwave completion zsh)\" &gt;&gt; ~/.zshrc\n</code></pre> <p></p>"},{"location":"install/","title":"\ud83d\udce5 Installation","text":"<p>You can install the pre-compiled binary from  releases,  packages, use Docker or compile from the source.</p> <p>Here are the steps for each of them:</p>"},{"location":"install/#mac-os","title":"\ud83c\udf4f Mac OS","text":"<p>Download one of releases</p> <p>Install with  brew</p> <pre><code>brew install helmwave/tap/helmwave\n</code></pre> <p>or use wget <pre><code>export VERSION=0.16.2\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_darwin_amd64.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre></p>"},{"location":"install/#linux","title":"\ud83d\udc27 Linux","text":"<p>Download one of releases</p> <pre><code>export VERSION=0.16.2\nwget -c https://github.com/helmwave/helmwave/releases/download/v$VERSION/helmwave_${VERSION}_linux_amd64.tar.gz -O - | tar -xz\nmv helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#windows","title":"\ud83e\ude9f Windows","text":"<p>We haven't tried running this on Windows.</p> <p>Download one of releases</p>"},{"location":"install/#run-as-a-container","title":"Run as a container","text":"<p>We use 2 docker registries. </p> Registry URL project page Docker hub https://hub.docker.com view Github Container registry https://ghcr.io view <pre><code>docker pull diamon/helmwave\ndocker pull ghcr.io/helmwave/helmwave\n</code></pre> <p>Use specific version</p> <pre><code>docker pull diamon/helmwave:0.16.2\ndocker pull ghcr.io/helmwave/helmwave:0.16.2\n\ndocker run --entrypoint=ash -it --rm --name helmwave ghcr.io/helmwave/helmwave:0.16.2\n# helmwave version\n0.16.2\n#\n</code></pre> <p>Use scratch image</p> <p>scratch image run with nobody user.</p> <pre><code>docker pull diamon/helmwave:scratch\ndocker pull ghcr.io/helmwave/helmwave:scratch\n\ndocker run ghcr.io/helmwave/helmwave:0.16.2-scratch version\n0.16.2\n</code></pre> <p>Use scratch image with specific helmwave version</p> <pre><code>docker pull diamon/helmwave:0.16.2-scratch\ndocker pull ghcr.io/helmwave/helmwave:0.16.2-scratch\n</code></pre>"},{"location":"install/#install-with-go-get","title":"Install with go get","text":"<pre><code>export VERSION=0.16.2\nGO111MODULE=on go get github.com/helmwave/helmwave/cmd/helmwave@$VERSION\n</code></pre>"},{"location":"install/#compile-from-source","title":"Compile from source","text":"<pre><code>git clone git@github.com:helmwave/helmwave.git\ncd helmwave\ngo build ./cmd/helmwave\nmv -f helmwave /usr/local/bin/\n</code></pre>"},{"location":"install/#install-with-marcosnilsbin","title":"Install with marcosnils/bin","text":"<pre><code>bin install github.com/helmwave/helmwave\n</code></pre>"},{"location":"intro/","title":"Intro","text":"<p>\ud83c\udf0a Helmwave is helm3-native tool for deploy your Helm Charts via GitOps. HelmWave is like docker-compose for helm.</p>"},{"location":"intro/#features","title":"\ud83d\ude80 Features","text":"<p>We focus on speed execution, tiny size, pretty debugging.</p> <p>With helmwave you will become a superhero:</p> <ul> <li>Deploy multiple environments by one step</li> <li>Separate values for environments</li> <li>Common values for apps</li> <li>Keep a directory of chart value files</li> <li>Maintain changes in version control</li> <li>Template values</li> <li>Step by Step deployment (depends_on, allow_failure)</li> <li>Live tracking kubernetes resources with kubedog</li> <li>Fetch data from external datasource like vault, aws ssm</li> <li>... and much more!</li> </ul>"},{"location":"intro/#comparison-to-alternatives","title":"Comparison to alternatives","text":"\ud83c\udf0a HelmWave Helmfile Helmsman Syntax YAML + sprig/gomplate YAML + sprig TOML/YAML Requirements No <code>kubectl</code>, <code>helm</code> <code>helm-diff</code> (optional: <code>helm-secrets</code>, <code>helm-s3</code>, <code>helm-git</code>) <code>kubectl</code>, <code>helm</code> <code>helm-diff</code> Helm execution function call of bundled helm <code>os.Exec</code> <code>os.Exec</code> Remote values Partially Yes No Parallel releases Yes Yes No Releases dependencies Yes (depends_on) Yes (needs) Kind of (priority) Latest docker image size Linux amd64 binary size  + requirements  + requirements Live-tracking kubernetes resources Kubedog No No Compatible with helm v2 no Yes Yes Graph dependencies yes No No <p>\ud83c\udf0a Helmwave is inspired by docker-compose, terraform and helmfile,</p> <p>Here I would like to express our gratitude to all contributors for their commits, authors of third-party dependencies and all open source community \u2764\ufe0f</p>"},{"location":"tpl/","title":"\ud83d\udcc4 Templating","text":"<p>Helmwave uses Go templates for templating.</p> <p>Helmwave supports all built-in functions / sprig / gomplate / custom.</p>"},{"location":"tpl/#sprig","title":"Sprig","text":"<p>If you've ever written helm charts, then you're already familiar with it.</p> <p>http://masterminds.github.io/sprig/</p>"},{"location":"tpl/#gomplate","title":"Gomplate","text":"<p>Since v0.14.0. Helmwave works with Gomplate.</p>"},{"location":"tpl/#how-to-enable-gomplate-for-v0140-and-later","title":"How to enable gomplate for v0.14.0 and later","text":"<p>helmwave.yml</p> <pre><code>template:\ngomplate:\nenabled: true\n</code></pre> <p>see example</p>"},{"location":"tpl/#issues","title":"Issues","text":"<ul> <li>https://github.com/helmwave/helmwave/issues/159</li> <li>https://github.com/helmwave/helmwave/issues/103</li> </ul>"},{"location":"tpl/#custom","title":"Custom","text":"<ul> <li><code>toYaml</code> marshals a map into a string</li> <li><code>fromYaml</code> reads a golang string and generates a map</li> <li><code>readFile</code> get file as string</li> <li><code>hasKey</code> get true if field is exists</li> <li><code>get</code> (Sprig's original <code>get</code> is available as <code>sprigGet</code>)</li> <li><code>setValueAtPath</code> PATH NEW_VALUE traverses a golang map, replaces the value at the PATH with NEW_VALUE</li> <li><code>requiredEnv</code> The requiredEnv function allows you to declare a particular environment variable as required for   template rendering. If the environment variable is unset or empty, the template rendering will fail with an error   message.</li> </ul>"},{"location":"yaml/","title":"Yaml","text":"<p>works on helm v3.7.1</p> <p>Sample: </p> <pre><code>project: my-project\nversion: dev\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\nusername: \"\"\npassword: \"\"\ncertfile: \"\"\nkeyfile: \"\"\ncafile: \"\"\ninsecureskiptlsverify: false\nforce: false\nallow_failure: true\nreleases:\n- store:\nhello: world\nchart:\nname: bitnami/nginx\ncafile: \"\"\ncertfile: \"\"\nkeyfile: \"\"\ninsecureskiptlsverify: false\nkeyring: \"\"\npassword: \"\"\nrepourl: \"\"\nusername: \"\"\nverify: false\nversion: \"\"\nname: nginx\nnamespace: test\ndescription: \"\"\ndepends_on: []\nvalues: - .helmwave/values/nginx@test/5ae83192a2a53eec01dee5207fcf3cccbc5af87f.yml\n- tests/07_values.yaml\ntags: []\ntimeout: 0s\nmaxhistory: 0\ncreatenamespace: false\nresetvalues: false\nrecreate: false\nforce: false\natomic: false\ncleanuponfail: false\nsubnotes: false\ndisablehooks: false\ndisableopenapivalidation: false\nwaitforjobs: false\nwait: false\nskipcrds: false\ndevel: false\nreusevalues: false\n</code></pre>"},{"location":"yaml/#project","title":"Project","text":"<p>Reserved for future.</p>"},{"location":"yaml/#version","title":"Version","text":"<p>Helmwave will check current version and project version.</p> <p>In the future it is planned to be used for major compatibility. </p>"},{"location":"yaml/#repositories","title":"Repositories[]","text":"field required type default name \u2705 string \"\" url \u2705 url \"\" username \ud83d\ude45 string \"\" password \ud83d\ude45 string \"\" certfile \ud83d\ude45 string \"\" keyfile \ud83d\ude45 string \"\" cafile \ud83d\ude45 string \"\" insecureskiptlsverify \ud83d\ude45 bool false force \ud83d\ude45 bool false"},{"location":"yaml/#name","title":"name","text":"<p>Local name alias</p>"},{"location":"yaml/#url","title":"url","text":"<p>URL for chart repository</p>"},{"location":"yaml/#force","title":"force","text":"<p>Don't skip if repository exists.</p>"},{"location":"yaml/#releases","title":"Releases[]","text":"field required type default <code>helmwave build</code> <code>helmwave up</code> name \u2705 string \"\" \u2705 \u2705 namespace \u2705 string \"\" \u2705 \u2705 chart.name \u2705 string \"\" \u2705 \u2705 chart.username \ud83d\ude45 string \"\" chart.password \ud83d\ude45 string \"\" chart.certfile \ud83d\ude45 string \"\" chart.keyfile \ud83d\ude45 string \"\" chart.cafile \ud83d\ude45 string \"\" chart.insecureskiptlsverify \ud83d\ude45 bool false description \ud83d\ude45 string \"\" depends_on \ud83d\ude45 array [] \u2705 allow_failure \ud83d\ude45 bool false \u2705 values \ud83d\ude45 array [] \u2705 \u2705 tags \ud83d\ude45 array [] \u2705 store \ud83d\ude45 object {} \u2705 timeout \ud83d\ude45 interval 0s \u2705 maxhistory \ud83d\ude45 int 0 \u2705 createnamespace \ud83d\ude45 bool false \u2705 resetvalues \ud83d\ude45 bool false \u2705 recreate \ud83d\ude45 bool false \u2705 force \ud83d\ude45 bool false \u2705 atomic \ud83d\ude45 bool false \u2705 cleanuponfail \ud83d\ude45 bool false \u2705 subnotes \ud83d\ude45 bool false \u2705 disablehooks \ud83d\ude45 bool false \u2705 disableopenapivalidation \ud83d\ude45 bool false \u2705 waitforjobs \ud83d\ude45 bool false \u2705 wait \ud83d\ude45 bool false \u2705 skipcrds \ud83d\ude45 bool false \u2705 devel \ud83d\ude45 bool false \u2705 reusevalues \ud83d\ude45 bool false \u2705"},{"location":"yaml/#store","title":"\ud83d\uddf3\ufe0f Store","text":"<p>It allows to pass you custom fields from helmwave.yml to values.</p> <p>It works when you call <code>$ helmwave build</code></p> <p>example</p>"},{"location":"yaml/#tags","title":"\ud83d\udd16 Tags","text":"<p>It allows you to choose releases for build</p> <p>It works with next options when you call <code>$ helmwave build</code>:</p> <pre><code>--tags value, -t value  It allows you choose releases for build. Example: -t tag1 -t tag3,tag4 [$HELMWAVE_TAGS]\n--match-all-tags        Match all provided tags (default: false) [$HELMWAVE_MATCH_ALL_TAGS]\n</code></pre> <p>Matching with tags</p> <p>Suppose we have next <code>helmwave.yml</code> with 4 releases.</p> <ol> <li>redis-a</li> <li>redis-b</li> <li>memcached-a</li> <li>memcached-b</li> </ol> <p></p> <pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\nreleases:\n- name: redis-a\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- a\n- redis\n\n- name: redis-b\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- b\n- redis\n\n- name: memcached-a\nnamespace: test\nchart:\nname: bitnami/redis\ntags:\n- a\n- memcached\n\n\n- name: memcached-b\nnamespace: test\nchart:\nname: bitnami/memcached\ntags:\n- b\n- memcached\n</code></pre> <p>Match all redis</p> <pre><code>helmwave build -t redis\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - redis-b@test\n</code></pre> <p>Match the group <code>a</code></p> <pre><code>helmwave build -t a [\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - memcached-a@test\n</code></pre> <p>Match multiply group.</p> <p>If you know SQL. It looks like that:</p> <pre><code>SELECT * FROM releases WHERE tag = \"redis\" OR tag = \"a\"\n</code></pre> <pre><code>helmwave build -t redis -t a\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: - redis-a@test\n          - redis-b@test\n          - memcached-a@test\n</code></pre> <p>All that was above, we used the logical <code>OR</code> operator. If you need strongly logic with <code>AND</code> you should use <code>--match-all-tags</code> flag.  This flag changes logic for query releases.</p> <p>If you know SQL. It looks like that:</p> <pre><code>SELECT * FROM releases WHERE tag = \"redis\" AND tag = \"a\"\n</code></pre> <pre><code>helmwave build -t redis -t a --match-all-tags\n[\ud83d\ude43 aka INFO]: \ud83c\udfd7 Plan\n        releases: \n          - redis-a@test\n</code></pre>"},{"location":"yaml/#depends_on-allow_failure","title":"depends_on &amp; allow_failure","text":"<p>It allows waiting releases</p> <p>It works when you call <code>$ helmwave up</code></p> <p>Example for 3-tier application</p> graph LR     frontend --&gt; backend --&gt; db;  <p>Your <code>helmwave.yml</code> will</p> <pre><code>releases:\n- name: frontend\ndepends_on: backend@test\nnamespace: test\n\n- name: backend\ndepends_on: db@test\nnamespace: test\n\n- name: db\nallow_failure: false\nnamespace: test\n</code></pre> <p>When <code>allow_failure</code> is set true. It allows the installation to proceed.</p>"},{"location":"yaml/#name_1","title":"name","text":"<p>Release name</p> <p>I hope you know what it is.</p>"},{"location":"yaml/#namespace","title":"namespace","text":"<p>Kubernetes namespace</p>"},{"location":"yaml/#createnamespace","title":"createnamespace","text":"<p>if <code>true</code> Helmwave will create the release namespace if not present</p>"},{"location":"yaml/#timeout","title":"timeout","text":"<p>time to wait for any individual Kubernetes operation</p>"},{"location":"examples/apps-per-ns/","title":"Apps per namespace","text":"<p>Source</p> <p>If you want to install each application in your own namespace. </p>"},{"location":"examples/apps-per-ns/#create-the-project","title":"Create the project","text":"<p>Project structure <pre><code>\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u251c\u2500\u2500 values\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 harbor.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 minio.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plantuml.yml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 renovate.yml\n\u2514\u2500\u2500 vars.yaml\n</code></pre></p> <p>Step 1. Create <code>helmwave.yml.tpl</code></p> <pre><code>version: 0.16.2\n\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n- name: renovate\nurl: https://docs.renovatebot.com/helm-charts\n- name: stevehipwell\nurl: https://stevehipwell.github.io/helm-charts\n\n\n\n# General options\n.options: &amp;options\nwait: true\nwaitforjobs: true\nforce: false\ntimeout: 10m\natomic: false\nmaxhistory: 3\ncreatenamespace: true\n\n\nreleases:\n{{- with readFile \"vars.yaml\" | fromYaml | get \"releases\" }}\n{{ range $v := . }}\n\n#################################\n#                               #\n#      {{ $v | get \"name\" }}\n#                               #\n#################################\n- name: {{ $v | get \"name\" }}\nchart:\nname: {{ $v | get \"repo\" }}/{{ $v | get \"name\" }}\nversion: {{ $v | get \"version\" }}\nnamespace: {{ $v | get \"name\" }}\ntags: [{{ $v | get \"name\" }}]\nvalues:\n- values/{{ $v | get \"name\" }}.yml\n&lt;&lt;: *options\n\n{{ end }}\n{{- end }}\n</code></pre> <p>Step 2. Create <code>vars.yaml</code></p> <p>We will manage list apps with additional <code>vars.yaml</code> file</p> <pre><code>releases:\n- name: harbor\nrepo: bitnami\nversion: 11.0.5\n\n- name: minio\nrepo: bitnami\nversion: 9.0.2\n\n- name: plantuml\nrepo: stevehipwell\nversion: 3.3.0\n\n- name: renovate\nrepo: renovate\nversion: 25.76.1\n</code></pre> <p>Step 3. Render <code>helmwave.yml.tpl</code> -&gt;  <code>helmwave.yml</code></p> <pre><code>helmwave yml\n</code></pre> <p>You will get it</p> <pre><code>version: 0.16.2\n\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n- name: renovate\nurl: https://docs.renovatebot.com/helm-charts\n- name: stevehipwell\nurl: https://stevehipwell.github.io/helm-charts\n\n\n\n# General options\n.options: &amp;options\nwait: true\nwaitforjobs: true\nforce: false\ntimeout: 10m\natomic: false\nmaxhistory: 3\ncreatenamespace: true\n\n\nreleases:\n\n\n#################################\n#                               #\n#      harbor\n#                               #\n#################################\n- name: harbor\nchart:\nname: bitnami/harbor\nversion: 11.0.5\nnamespace: harbor\ntags: [harbor]\nvalues:\n- values/harbor.yml\n&lt;&lt;: *options\n\n\n\n#################################\n#                               #\n#      minio\n#                               #\n#################################\n- name: minio\nchart:\nname: bitnami/minio\nversion: 9.0.2\nnamespace: minio\ntags: [minio]\nvalues:\n- values/minio.yml\n&lt;&lt;: *options\n\n\n\n#################################\n#                               #\n#      plantuml\n#                               #\n#################################\n- name: plantuml\nchart:\nname: stevehipwell/plantuml\nversion: 3.3.0\nnamespace: plantuml\ntags: [plantuml]\nvalues:\n- values/plantuml.yml\n&lt;&lt;: *options\n\n\n\n#################################\n#                               #\n#      renovate\n#                               #\n#################################\n- name: renovate\nchart:\nname: renovate/renovate\nversion: 25.76.1\nnamespace: renovate\ntags: [renovate]\nvalues:\n- values/renovate.yml\n&lt;&lt;: *options\n</code></pre> <p>Step 4. Build plan</p> <pre><code>helmwave build\n</code></pre> <p>Step 5. Deploy plan</p> <p>if we want to deploy only <code>plantuml</code></p> <pre><code>helmwave build -t plantuml\nhelmwave up\n</code></pre> <p>looks how to work HELMWAVE_TAGS</p>"},{"location":"examples/apps-per-ns/#cicd-with-gitlab-ci","title":"CI/CD with Gitlab-CI","text":"<pre><code>variables:\nHELMWAVE_LOG_LEVEL: debug\n\nDeploy to prod:\nstage: deploy\nwhen: manual\nenvironment:\nname: prod\nimage:\nname: ghcr.io/helmwave/helmwave:0.16.2\nentrypoint: [\"\"]\nbefore_script:\n- printenv | grep HELMWAVE\nscript:\n- helmwave yml\n- helmwave build\n- helmwave up\nartifacts:\npaths:\n- .helmwave\nexpire_in: 2 week\n</code></pre> <p>if you want to deploy only <code>plantuml</code> via CI.</p> <p></p> <p></p>"},{"location":"examples/aws-sm/","title":"AWS secret manager","text":"<p>Source</p> <p>Project structure</p> <pre><code>\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 vaules-secret.yaml\n</code></pre> <p>Step 1. Create next secret</p> <pre><code>aws secretsmanager create-secret --name hello/foobar --secret-string '{\"foo\":\"bar\"}'\n</code></pre> <p>Step 2. Create <code>helmwave.yml</code></p> <pre><code>repositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\ntemplate:\ngomplate:\nenabled: true\ndata:\nsources:\nsecret:\nurl:\nscheme: aws+sm\npath: 'hello/foobar'\n\nreleases:\n- name: app\nchart:\nname: bitnami/nginx\nnamespace: test\nvalues:\n- vaules-secret.yaml\n</code></pre> <p>Step 3. Create <code>vaules-secret.yaml</code></p> <pre><code>secret: {{ datasource \"secret\" }}\n</code></pre> <p>Step 4. Run <code>helmwave build</code></p> <p>You will get <code>secret: {\"foo\":\"bar\"}</code></p>"},{"location":"examples/pass-git-commit/","title":"Restart pods via git-commit","text":"<p>Source</p> <p>Project Structure</p> <pre><code>.\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values.yml\n</code></pre> <p><code>helmwave.yml</code></p> <pre><code>version: 0.16.2\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n\nreleases:\n- name: my-app\nchart:\nname: bitnami/nginx\nvalues:\n- values.yml\nnamespace: my-namespace\ncreatenamespace: true\n</code></pre> <p><code>nginx/template/deployment.yaml</code> looks like that:</p> <pre><code>    ...\nmetadata:  {{- with .Values.podAnnotations }}  annotations:  {{- toYaml . | nindent 8 }}  {{- end }}\n...\n</code></pre> <p>We will pass pod annotations with  <code>values</code></p> <p><code>values.yml</code></p> <pre><code>podAnnotations:\ngitCommit: {{ requiredEnv \"CI_COMMIT_SHORT_SHA\" | quote }}\n</code></pre> <p>Run</p> <pre><code>helmwave build\nhelmwave up\n</code></pre> <p>or <code>helmwave up --build</code></p>"},{"location":"examples/pass-git-tag/","title":"Git tag -&gt; Docker image tag","text":"<p>Source</p> <p>Suppose <code>my-chart</code> has default <code>values.yaml</code>:</p> <pre><code>image:\nrepository: registry.gitlab.local/example/app\ntag: v1.0.0\n...\n</code></pre> <p>If we need to create CI/CD pipeline, we need use next script</p> <pre><code>helm upgrade --instal my-release my-chart-repo/my-chart-app --set=\"image.tag=$CI_COMMIT_TAG\" -n my-namespace\n</code></pre> <p>HelmWave allows use declarative way to approach this goal.</p> <p>Project Structure</p> <pre><code>.\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 values.yml\n</code></pre> <p><code>helmwave.yml.tpl</code></p> <pre><code>version: 0.16.2\n\nreleases:\n- name: my-release\nchart:\nname: my-chart-repo/my-chart-app\nvalues:\n- values.yml\nnamespace: my-namespace\ncreatenamespace: true\n</code></pre> <p><code>values.yml</code></p> <p>This values will override default values </p> <pre><code>image:\ntag: {{ env \"CI_COMMIT_TAG\" }}\n</code></pre> <p>Run</p> <pre><code>helmwave build\nhelmwave up\n</code></pre> <p>or <code>helmwave up --build</code></p>"},{"location":"examples/private-github-repo/","title":"Private GitHub repo","text":"<p>Source</p> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 helmwave.yml\n\u2514\u2500\u2500 helmwave.yml.tpl\n</code></pre> <p>Suppose the <code>helmwave.yml.tpl</code> looks like</p> <pre><code>version: 0.16.2\n\nrepositories:\n- name: your-private-git-repo-hosted-charts\nurl: https://{{ requiredEnv \"GITHUB_TOKEN\"}}@raw.githubusercontent.com/foo/bar/master/\n\n\n.options: &amp;options\nnamespace: {{ requiredEnv \"NS\" }}\ncreatenamespace: true\n\n\nreleases:\n- name: hello\nchart:\nname: foo/bar\n&lt;&lt;: *options\n</code></pre> <p>This command will render <code>helmwave.yml.tpl</code> to <code>helmwave.yml</code></p> <pre><code>$ export NS=stage\n$ export GITHUB_TOKEN=my-secret-token\n$ helmwave yml\n[\ud83d\ude43 aka INFO]: \ud83d\udcc4 YML is ready!\n        build plan with next command: helmwave build -f helmwave.yml\n</code></pre> <p>Once applied, your <code>helmwave.yml</code> will look like</p> <pre><code>version: 0.16.2\n\nrepositories:\n- name: your-private-git-repo-hosted-charts\nurl: https://my-secret-token@raw.githubusercontent.com/foo/bar/master/\n\n\n.options: &amp;options\nnamespace: ips\ncreatenamespace: true\n\n\nreleases:\n- name: hello\nchart:\nname: foo/bar\n&lt;&lt;: *options\n</code></pre>"},{"location":"examples/quick-start/","title":"\ud83d\udd30 Quick Start","text":"<p>1) install helmwave</p> <p>2) create helmwave.yml</p> <p>Suppose the <code>helmwave.yml</code> representing the desired state of your helm releases looks like:</p> <pre><code>version: 0.16.2\n\nrepositories:\n- name: bitnami\nurl: https://charts.bitnami.com/bitnami\n\n\n.options: &amp;options\nnamespace: my-namespace\nwait: true\n\nreleases:\n- name: redis-a\n&lt;&lt;: *options\nchart:\nname: bitnami/redis\n\n\n- name: redis-b\n&lt;&lt;: *options\nchart:\nname: bitnami/redis\n</code></pre> <p>3) build plan</p> <pre><code>helmwave build\n</code></pre> <p>this steps generate plan</p> <p>4) if everything is ok , deploy plan </p> <pre><code>helmwave up </code></pre> <p>Output will be like that:</p> <pre><code>[\ud83d\ude43 aka INFO]: \u2705 redis-a@my-namespace\n[\ud83d\ude43 aka INFO]: \u2705 redis-b@my-namespace\n[\ud83d\ude43 aka INFO]: Success 2 / 2\n</code></pre> <p>6) check</p> <pre><code>$ helm list -n my-namespace\nNAME                    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART                   APP VERSION\nredis-a                 my-namespace    1               2020-10-31 17:05:35.829766 +0300 MSK    deployed        redis-11.2.3            6.0.9      \nredis-b                 my-namespace    1               2020-10-31 17:05:39.437556 +0300 MSK    deployed        redis-11.2.3            6.0.9  \n\n$ k get po -n my-namespace                                                                                                                         \nNAME               READY   STATUS    RESTARTS   AGE\nredis-a-master-0   1/1     Running   0          64s\nredis-a-slave-0    1/1     Running   0          31s\nredis-a-slave-1    1/1     Running   0          62s\nredis-b-master-0   1/1     Running   0          59s\nredis-b-slave-0    1/1     Running   0          32s\nredis-b-slave-1    1/1     Running   0          51s\n</code></pre> <p>Congratulations!</p>"},{"location":"examples/quick-start/#live-mode","title":"Live mode","text":"<p>!!! Ascinema cast is too old.</p>"},{"location":"examples/single-app-multi-envs/","title":"Single app multi envs","text":"<p> [source] </p> <p>When we work with helm sometimes we need dynamics chose environment.</p> <pre><code>export CI_ENVIRONMENT_NAME=stage\nhelm upgrade --install my-release my-chart-repo/my-chart-app -f values/_.yml -f values/$CI_ENVIRONMENT_NAME.yaml\n</code></pre> <p>Project structure</p> <pre><code>.\n\u251c\u2500\u2500 helmwave.yml.tpl\n\u2514\u2500\u2500 values\n    \u251c\u2500\u2500 _.yml\n    \u251c\u2500\u2500 prod.yml\n    \u251c\u2500\u2500 qa.yml\n    \u2514\u2500\u2500 stage.yml\n</code></pre> <p><code>helmwave.yml.tpl</code></p> <pre><code>version: 0.16.2\n\nreleases:\n- name: my-release\nchart:\nname: my-chart-repo/my-chart-app\n# yaml says \"Who is the last one is right.\"\nvalues:\n# Default\n- values/_.yml\n# For specific ENVIRONMENT\n- values/{{ requiredEnv \"CI_ENVIRONMENT_NAME\" }}.yml\ncreatenamespace: true\n</code></pre> <p><code>_.yml</code></p> <pre><code>image:\ntag: {{ env \"pass-git-tag\" }}\n\npodAnnotations:\ngitCommit: {{ requiredEnv \"pass-git-commit\" | quote }}\n</code></pre> <p><code>prod.yml</code></p> <pre><code>replicaCount: 6\n</code></pre> <p><code>qa.yml</code></p> <pre><code>replicaCount: 2\n</code></pre> <p><code>stage.yml</code></p> <pre><code>replicaCount: 4\n</code></pre> <p>Run</p> <pre><code>export CI_ENVIRONMENT_NAME=stage\nhelmwave yml\nhelmwave build\nhelmwave up\n</code></pre> <p>or one command </p> <pre><code>helmwave up --build --yml\n</code></pre>"},{"location":"examples/store-greeting-hello/","title":"Same values -&gt; different  fields","text":"<p> [source] </p> <p>Store is very helpful when you need to pass the same values to different fields with your releases.</p> <p>Project Structure</p> <pre><code>.\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 a.yml\n\u251c\u2500\u2500 b.yml\n\u2514\u2500\u2500 helmwave.yml\n</code></pre> <p><code>helmwave.yml</code></p> <pre><code>releases:\n- name: a\nchart:\nname: my/a\nstore:\nmsg: hello\nvalues:\n- a.yml\n\n- name: b\nchart:\nname: my/b\nstore:\nmsg: hello\nvalues:\n- b.yml\n</code></pre> <p>a.yml</p> <pre><code>image:\nrepository: nginx\n\ngreeting: {{ .Release.Store.msg }}\n</code></pre> <p>b.yml</p> <pre><code>image:\ntag: v1.0.0\n\nmessage: {{ .Release.Store.msg }} world\n</code></pre> <p>After run <code>helmwave build</code> you get</p> <p>a.yml </p> <pre><code>image:\nrepository: nginx\n\ngreeting: hello\n</code></pre> <p>b.yml</p> <pre><code>image:\ntag: v1.0.0\n\nmessage: hello world\n</code></pre>"}]}